%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Hannousse Abdelhakim at 2020-02-04 17:35:59 +0100 


%% Saved with string encoding Unicode (UTF-8) 



@article{Myllarniemi:2014,
	Author = {Myll{\"a}rniemi, Varvana and Savolainen, Juha and Raatikainen, Mikko and M{\"a}nnist{\"o}, Tomi},
	Date-Added = {2019-05-09 23:14:28 +0100},
	Date-Modified = {2020-02-04 17:35:54 +0100},
	Doi = {10.1007/s10664-014-9359-z},
	Issn = {1573-7616},
	Journal = {Empirical Software Engineering},
	Number = {4},
	Pages = {1623--1669},
	Publisher = {Springer Nature},
	Title = {Performance variability in software product lines: proposing theories from a case study},
	Url = {http://dx.doi.org/10.1007/s10664-014-9359-z},
	Volume = {21},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s10664-014-9359-z}}

@article{Sepulveda:2016,
	Abstract = {Context: Software product lines (SPLs) have reached a considerable level of adoption in the software industry, having demonstrated their cost-effectiveness for developing higher quality products with lower costs. For this reason, in the last years the requirements engineering community has devoted much effort to the development of a myriad of requirements modelling languages for SPLs. Objective: In this paper, we review and synthesize the current state of research of requirements modelling languages used in SPLs with respect to their degree of empirical validation, origin and context of use, level of expressiveness, maturity, and industry adoption. Method: We have conducted a systematic literature review with six research questions that cover the main objective. It includes 54 studies, published from 2000 to 2013. Results: The mean level of maturity of the modelling languages is 2.59 over 5, with 46% of them falling within level 2 or below -no implemented abstract syntax reported-. They show a level of expressiveness of 0.7 over 1.0. Some constructs (feature, mandatory, optional, alternative, exclude and require) are present in all the languages, while others (cardinality, attribute, constraint and label) are less common. Only 6% of the languages have been empirically validated, 41% report some kind of industry adoption and 71% of the languages are independent from any development process. Last but not least, 57% of the languages have been proposed by the academia, while 43% have been the result of a joint effort between academia and industry. Conclusions: Research on requirements modeling languages for SPLs has generated a myriad of languages that differ in the set of constructs provided to express SPL requirements. Their general lack of empirical validation and adoption in industry, together with their differences in maturity, draws the picture of a discipline that still needs to evolve.},
	Author = {Samuel Sep{\'u}lveda and Ania Cravero and Cristina Cachero},
	Date-Added = {2019-05-09 23:10:26 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2015.08.007},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Requirements engineering, Modeling languages, Software product lines, Systematic literature review},
	Pages = {16 - 36},
	Title = {Requirements modeling languages for software product lines: A systematic literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584915001494},
	Volume = {69},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584915001494},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2015.08.007}}

@article{Sanchez_Guinea:2016,
	Abstract = {Context: Software engineering for ubiquitous systems has experienced an important and rapid growth, however the vast research corpus makes it difficult to obtain valuable information from it. Objective: To identify, evaluate, and synthesize research about the most relevant approaches addressing the different phases of the software development life cycle for ubiquitous systems. Method: We conducted a systematic literature review of papers presenting and evaluating approaches for the different phases of the software development life cycle for ubiquitous systems. Approaches were classified according to the phase of the development cycle they addressed, identifying their main concerns and limitations. Results: We identified 128 papers reporting 132 approaches addressing issues related to different phases of the software development cycle for ubiquitous systems. Most approaches have been aimed at addressing the implementation, evolution/maintenance, and feedback phases, while others phases such as testing need more attention from researchers. Conclusion: We recommend to follow existing guidelines when conducting case studies to make the studies more reproducible and closer to real life cases. While some phases of the development cycle have been extensively explored, there is still room for research in other phases, toward a more agile and integrated cycle, from requirements to testing and feedback.},
	Author = {Alejandro S{\'a}nchez Guinea and Gr{\'e}gory Nain and Yves Le Traon},
	Date-Added = {2019-05-09 23:09:49 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.jss.2016.05.024},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Empirical software engineering, Evidence-based software engineering, Systematic review, Research synthesis, Software development cycle, Ubiquitous systems, Development methods, Pervasive systems},
	Pages = {251 - 276},
	Title = {A systematic review on the engineering of software for ubiquitous systems},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121216300553},
	Volume = {118},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121216300553},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2016.05.024}}

@article{Badampudi:2016,
	Abstract = {Context: Component-based software systems require decisions on component origins for acquiring components. A component origin is an alternative of where to get a component from. Objective: To identify factors that could influence the decision to choose among different component origins and solutions for decision-making (For example, optimization) in the literature. Method: A systematic review study of peer-reviewed literature has been conducted. Results: In total we included 24 primary studies. The component origins compared were mainly focused on in-house vs. COTS and COTS vs. OSS. We identified 11 factors affecting or influencing the decision to select a component origin. When component origins were compared, there was little evidence on the relative (either positive or negative) effect of a component origin on the factor. Most of the solutions were proposed for in-house vs. COTS selection and time, cost and reliability were the most considered factors in the solutions. Optimization models were the most commonly proposed technique used in the solutions. Conclusion: The topic of choosing component origins is a green field for research, and in great need of empirical comparisons between the component origins, as well of how to decide between different combinations of them.},
	Author = {Deepika Badampudi and Claes Wohlin and Kai Petersen},
	Date-Added = {2019-05-09 23:09:00 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.jss.2016.07.027},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {OSS, COTS, In-house development, Outsourcing, Decision-making, Component-based software engineering},
	Pages = {105 - 124},
	Title = {Software component decision-making: In-house, OSS, COTS or outsourcing - A systematic literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121216301212},
	Volume = {121},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121216301212},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2016.07.027}}

@article{Haselberger:2016,
	Abstract = {Context
In Information and Communication Technology (ICT) projects, leadership interactions affect project team performance and so influence the outcomes of projects. While aspects of team performance have been vastly researched, leadership skills and interactions specific to the challenges of ICT project environments remain less investigated.
Objective
A taxonomy of leadership interactions is developed and descriptions of interactions are collected to form a framework of leadership interactions that support team performance in ICT projects.
Method
A systematic literature review was conducted to find resources on supportive leadership interactions in ICT project teams, including categorization schemas of leadership functions and behaviors. The review was limited by the selection of sources to be searched and comprises articles from 1977 until early 2014. The developed taxonomy was compared to benchmark work on team leadership. Risks and challenges of leading ICT project teams as well as descriptions of interactions were collected.
Results
Throughout the search process, 2780 articles were examined, 218 of which were included in the review. 62 articles qualified to be accepted, 156 were rejected. 20 (including 4 meta-studies) papers holding leadership interaction categories were selected as taxonomy papers. The developed taxonomy holds 18 key dimensions of leadership team interaction. 13 areas of risks and challenges were discerned. 262 leadership interaction descriptions relevant in ICT project teams were retrieved.
Conclusions
In collected studies, the categories ``systems sensing'', ``planning and scheduling'', ``coaching'', as well as ``monitoring and controlling'' were highly developed. Many risks deal with project complexity and interpersonal processes. However, leadership interactions addressing these challenges are scarce, indicating a research gap. Furthermore, prominent leadership team interactions such as monitoring or consulting may need to be adapted to deal with challenges specific to ICT project teams. Few studies describe best-practice examples of leadership interaction in ICT teams.},
	Author = {David Haselberger},
	Date-Added = {2019-05-09 23:07:53 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2015.09.003},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Leadership, Project team, Team performance, Interpersonal interaction, Classification, Clustering},
	Pages = {1 - 17},
	Title = {A literature-based framework of performance-related leadership interactions in ICT project teams},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584915001561},
	Volume = {70},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584915001561},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2015.09.003}}

@article{Chauhan:2017,
	Author = {Chauhan, Muhammad Aufeef and Babar, Muhammad Ali and Benatallah, Boualem},
	Date-Added = {2019-05-09 23:07:04 +0100},
	Date-Modified = {2020-02-04 17:35:54 +0100},
	Doi = {10.1002/spe.2409},
	Issn = {1097-024X},
	Journal = {Software: Practice and Experience},
	Number = {4},
	Pages = {599--644},
	Publisher = {Wiley},
	Title = {Architecting cloud‐enabled systems: a systematic survey of challenges and solutions},
	Url = {http://dx.doi.org/10.1002/spe.2409},
	Volume = {47},
	Year = {2017},
	Bdsk-Url-1 = {http://dx.doi.org/10.1002/spe.2409}}

@article{Afzal:2016,
	Abstract = {Software test process improvement (STPI) approaches are frameworks that guide software development organizations to improve their software testing process. We have identified existing STPI approaches and their characteristics (such as completeness of development, availability of information and assessment instruments, and domain limitations of the approaches) using a systematic literature review (SLR). Furthermore, two selected approaches (TPI NEXT and TMMi) are evaluated with respect to their content and assessment results in industry. As a result of this study, we have identified 18 STPI approaches and their characteristics. A detailed comparison of the content of TPI NEXT and TMMi is done. We found that many of the STPI approaches do not provide sufficient information or the approaches do not include assessment instruments. This makes it difficult to apply many approaches in industry. Greater similarities were found between TPI NEXT and TMMi and fewer differences. We conclude that numerous STPI approaches are available but not all are generally applicable for industry. One major difference between available approaches is their model representation. Even though the applied approaches generally show strong similarities, differences in the assessment results arise due to their different model representations.},
	Author = {Wasif Afzal and Snehal Alone and Kerstin Glocksien and Richard Torkar},
	Date-Added = {2019-05-09 23:06:06 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.jss.2015.08.048},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Software test process improvement, Systematic literature review, Case study},
	Pages = {1 - 33},
	Title = {Software test process improvement approaches: A systematic literature review and an industrial case study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121215001910},
	Volume = {111},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121215001910},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2015.08.048}}

@article{Weinreich:2016,
	Abstract = {Context: Numerous approaches for Software Architecture Knowledge Management (SAKM) have been developed by the research community over the last decade. Still, these approaches have not yet found widespread use in practice. Objective: This work identifies existing approaches to SAKM and analyzes them in terms of their support for central architecture knowledge management activities, i.e., capturing, using, maintaining, sharing, and reuse of architectural knowledge, along with presenting the evidence provided for this support. Method: A systematic literature review has been conducted for identifying and analyzing SAKM approaches, covering work published between January 2004 and August 2015. We identified 56 different approaches to SAKM based on 115 studies. We analyzed each approach in terms of its focus and support for important architecture knowledge management activities and in terms of the provided level of evidence for each supported activity. Results: Most of the developed approaches focus on using already-captured knowledge. Using is also the best-validated activity. The problem of efficient capturing is still not sufficiently addressed, and only a few approaches specifically address reuse, sharing, and, especially, maintaining. Conclusions: Without adequate support for other core architecture knowledge management activities besides using, the adoption of SAKM in practice will remain an elusive target. The problem of efficient capturing is still unsolved, as is the problem of maintaining captured knowledge over the long term. We also need more case studies and replication studies providing evidence for the usefulness of developed support for SAKM activities, as well as better reporting on these case studies.},
	Author = {Rainer Weinreich and Iris Groher},
	Date-Added = {2019-05-09 23:05:33 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2016.09.007},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Software architecture, Software architecture knowledge management, Software architecture knowledge management activities, Software architecture knowledge management approaches, Systematic literature review},
	Pages = {265 - 286},
	Title = {Software architecture knowledge management approaches and their support for knowledge management activities: A systematic literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916301707},
	Volume = {80},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916301707},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.09.007}}

@article{Sadeghi:2017,
	Author = {A. {Sadeghi} and H. {Bagheri} and J. {Garcia} and S. {Malek}},
	Date-Added = {2019-05-09 23:04:49 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1109/TSE.2016.2615307},
	Issn = {0098-5589},
	Journal = {IEEE Transactions on Software Engineering},
	Keywords = {Android (operating system);mobile computing;program diagnostics;security of data;taxonomy;program analysis;security assessment;Android software;mobile software;security threats;mobile platforms;dominant platform;Android security;Androids;Humanoid robots;Security;Taxonomy;Mobile communication;Malware;Systematics;Taxonomy and survey;security assessment;android platform;program analysis},
	Number = {6},
	Pages = {492-530},
	Title = {A Taxonomy and Qualitative Comparison of Program Analysis Techniques for Security Assessment of Android Software},
	Volume = {43},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1109/TSE.2016.2615307}}

@article{Sobernig:2016,
	Abstract = {When developing domain-specific modeling languages (DSMLs), software engineers have to make a number of important design decisions on the DSML itself, or on the software-development process that is applied to develop the DSML. Thus, making well-informed design decisions is a critical factor in developing DSMLs. To support this decision-making process, the model-driven development community has started to collect established design practices in terms of patterns, guidelines, story-telling, and procedural models. However, most of these documentation practices do not capture the details necessary to reuse the rationale behind these decisions in other DSML projects. In this paper, we report on a three-year research effort to compile and to empirically validate a catalog of structured decision descriptions (decision records) for UML-based DSMLs. This catalog is based on design decisions extracted from 90 DSML projects. These projects were identified---among others---via an extensive systematic literature review (SLR) for the years 2005--2012. Based on more than 8,000 candidate publications, we finally selected 84 publications for extracting design-decision data. The extracted data were evaluated quantitatively using a frequent-item-set analysis to obtain characteristic combinations of design decisions and qualitatively to document recurring documentation issues for UML-based DSMLs. We revised the collected decision records based on this evidence and made the decision-record catalog for developing UML-based DSMLs publicly available. Furthermore, our study offers insights into UML usage (e.g. diagram types) and into the adoption of UML extension techniques (e.g. metamodel extensions, profiles).},
	Author = {Stefan Sobernig and Bernhard Hoisl and Mark Strembeck},
	Date-Added = {2019-05-09 23:02:23 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.jss.2015.11.037},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Domain-specific language, Unified modeling language, Design decision, Design rationale, Domain-specific modeling, Model-driven development},
	Pages = {140 - 172},
	Title = {Extracting reusable design decisions for UML-based domain-specific languages: A multi-method study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121215002617},
	Volume = {113},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121215002617},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2015.11.037}}

@article{Neiva:2016,
	Abstract = {Context: Many researchers have argued that providing interoperability support only considering the format and meaning (i.e. syntax and semantic) of data exchange is not enough to achieve complete, effective and meaningful collaboration. Pragmatic interoperability has been highlighted as a key requirement to enhance collaboration. However, fulfilling this requirement is not a trivial task and there is a lack of works discussing solutions to achieve this level of interoperability. Objectives: The aim of this study is to present a systematic review and mapping of the literature in order to identify, analyse and classify the published solutions to achieve pragmatic interoperability. Method: To conduct a systematic review and mapping in accordance with the guidelines proposed in the evidence-based software engineering literature. Results: Our study identified 13 papers reporting pragmatic interoperability computational solutions. The first paper in our set of selected papers was published in 2004; the main strategies used to address pragmatic interoperability issues were service discovery, composition and/or selection and ontologies. The application domain of the identified solutions was mainly e-business. In addition, most of the identified solutions were software architectures. Conclusion: Mature proposals addressing pragmatic interoperability are still rare in the literature. Although many works have discussed the importance of pragmatic interoperability, it is necessary that researchers report solutions that implement and evaluate pragmatic interoperability in order to make progress in this area.},
	Author = {Fr{\^a}ncila Weidt Neiva and Jos{\'e} Maria N. David and Regina Braga and Fernanda Campos},
	Date-Added = {2019-05-09 23:01:41 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2015.12.013},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Pragmatic interoperability, Collaboration, Collaborative systems, Groupware, Interoperability},
	Pages = {137 - 150},
	Title = {Towards pragmatic interoperability to support collaboration: A systematic review and mapping of the literature},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916000021},
	Volume = {72},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916000021},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2015.12.013}}

@article{Li:2016,
	Abstract = {Background: Spot pricing is considered as a significant supplement for building a full-fledged market economy for the Cloud ecosystem. However, it seems that both providers and consumers are still hesitating to enter the Cloud spot market. The relevant academic community also has conflicting opinions about Cloud spot pricing in terms of revenue generation. Aim: This work aims to systematically identify, assess, synthesize and report the published evidence in favor of or against spot-price scheme compared with fixed-price scheme of Cloud computing, so as to help relieve the aforementioned conflict. Method: We employed the systematic literature review (SLR) method to collect and investigate the empirical studies of Cloud spot pricing indexed by major electronic libraries. Results: This SLR identified 61 primary studies that either delivered discussions or conducted experiments to perform comparison between spot pricing and fixed pricing in the Cloud domain. The reported benefits and limitations were summarized to facilitate cost-benefit analysis of being a Cloud spot pricing player, while four types of theories were distinguished to help both researchers and practitioners better understand the Cloud spot market. Conclusions: This SLR shows that the academic community strongly advocates the emerging Cloud spot market. Although there is still a lack of practical and easily deployable market-driven mechanisms, the overall findings of our work indicate that spot pricing plays a promising role in the sustainability of Cloud resource exploitation.},
	Author = {Zheng Li and He Zhang and Liam O'Brien and Shu Jiang and You Zhou and Maria Kihl and Rajiv Ranjan},
	Date-Added = {2019-05-09 23:00:36 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.jss.2015.10.042},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Cloud computing, Cloud spot pricing, Systematic literature review},
	Pages = {1 - 19},
	Title = {Spot pricing in the Cloud ecosystem: A comparative investigation},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121215002332},
	Volume = {114},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121215002332},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2015.10.042}}

@article{Tahir:2016,
	Abstract = {Context
Software measurement programs (MPs) are an important means for understanding, evaluating, managing, and improving software processes, products and resources. However, implementing successful MPs still remains a challenge.
Objectives
To make a comprehensive review of the studies on MPs for bringing into light the existing measurement planning models and tools used for implementing MPs,the accumulated knowledge on the success/failure factors of MPs and mitigation strategies to address their challenges.
Methods
A Systematic Literature Review (SLR) was conducted. In total, 65primary studies were reviewed and analyzed.
Results
We identified 35 measurement planning models and 11 associated tools, most of which either proposed extensions or improvements for goal based approaches. The identified success factors include (a) organizational adoption of MP, (b) integration of MP with SDLC, (c) synchronization of MP with SPI and (d) design of MP. The mostly mentioned mitigation strategies for addressing challenges are effective change management and measurement stakeholder management, automated tool support and incorporation of engineering mechanisms for designing sustainable, effective, scalable and extendible MPs, and measurement expertise and standards development.
Conclusion
Most of the success factors and mitigation strategies have interdependencies. Therefore, for successful MP implementation, software organizations should consider these factors in combination and make a feasibility study at the very beginning.},
	Author = {Touseef Tahir and Ghulam Rasool and Cigdem Gencel},
	Date-Added = {2019-05-09 23:00:05 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2016.01.014},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Software measurement, Software measurement program, Software metrics, GQM, Systematic Literature Review},
	Pages = {101 - 121},
	Title = {A systematic literature review on software measurement programs},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916300131},
	Volume = {73},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916300131},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.01.014}}

@article{Bissi:2016,
	Abstract = {Context: Test Driven Development (TDD) is an agile practice that has gained popularity when it was defined as a fundamental part in eXtreme Programming (XP). Objective: This study analyzed the conclusions of previously published articles on the effects of TDD on internal and external software quality and productivity, comparing TDD with Test Last Development (TLD). Method: In this study, a systematic literature review has been conducted considering articles published between 1999 and 2014. Results: In about 57% of the analyzed studies, the results were validated through experiments and in 32% of them, validation was performed through a case study. The results of this analysis show that 76% of the studies have identified a significant increase in internal software quality while 88% of the studies identified a meaningful increase in external software quality. There was an increase in productivity in the academic environment, while in the industrial scenario there was a decrease in productivity. Overall, about 44% of the studies indicated lower productivity when using TDD compared to TLD. Conclusion: According to our findings, TDD yields more benefits than TLD for internal and external software quality, but it results in lower developer productivity than TLD.},
	Author = {Wilson Bissi and Adolfo Gustavo Serra Seca Neto and Maria Claudia Figueiredo Pereira Emer},
	Date-Added = {2019-05-09 22:59:36 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2016.02.004},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Test-driven development, Productivity, Internal quality, External quality, Systematic review},
	Pages = {45 - 54},
	Title = {The effects of test driven development on internal quality, external quality and productivity: A systematic review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916300222},
	Volume = {74},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916300222},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.02.004}}

@article{Tarhan:2016,
	Abstract = {Context
The number of maturity models proposed in the area of Business Process Management (BPM) has increased considerably in the last decade. However, there are a number of challenges, such as the limited empirical studies on their validation and a limited extent of actionable properties of these models in guiding their application. These challenges hinder the widespread usage of the maturity models in the BPM field.
Objective
In order to better understand the state of the research on business process maturity models (BPMMs) and identify opportunities for future research, we conducted a systematic literature review.
Method
We searched the studies between the years 1990 and 2014 in established digital libraries to identify empirical studies of BPMMs by focusing on their development, validation, and application. We targeted studies on generic models proposed for business process maturity, business process management or orientation maturity, and selected 61 studies out of 2899 retrieved initially.
Results
We found that despite that many BPMMs were proposed in the last decade, the level of empirical evidence that reveals the validity and usefulness of these models is scarce.
Conclusion
The current state of research on BPM maturity is in its early phases, and academic literature lacks methodical applications of many mainstream BPMMs that have been proposed. Future research should be directed towards: (1) reconciling existing models with a strong emphasis on prescriptive properties, (2) conducting empirical studies to demonstrate the validity and usefulness of BPMMs, and (3) separating the assessment method used to evaluate the maturity level from the maturity model which acts as the reference framework for the assessment.},
	Author = {Ayca Tarhan and Oktay Turetken and Hajo A. Reijers},
	Date-Added = {2019-05-09 22:59:10 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2016.01.010},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Business process management, Business process orientation, Maturity model, Systematic literature review},
	Pages = {122 - 134},
	Title = {Business process maturity models: A systematic literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916300015},
	Volume = {75},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916300015},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.01.010}}

@article{Idri:2016,
	Abstract = {The need to overcome the weaknesses of single estimation techniques for prediction tasks has given rise to ensemble methods in software development effort estimation (SDEE). An ensemble effort estimation (EEE) technique combines several of the single/classical models found in the SDEE literature. However, to the best of our knowledge, no systematic review has yet been performed with a focus on the use of EEE techniques in SDEE. The purpose of this review is to analyze EEE techniques from six viewpoints: single models used to construct ensembles, ensemble estimation accuracy, rules used to combine single estimates, accuracy comparison of EEE techniques with single models, accuracy comparison between EEE techniques and methodologies used to construct ensemble methods. We performed a systematic review of EEE studies published between 2000 and 2016, and we selected 24 of them to address the questions raised in this review. We found that EEE techniques may be separated into two types: homogeneous and heterogeneous, and that the machine learning single models are the most frequently employed in constructing EEE techniques. We also found that EEE techniques usually yield acceptable estimation accuracy, and in fact are more accurate than single models.},
	Author = {Ali Idri and Mohamed Hosni and Alain Abran},
	Date-Added = {2019-05-09 22:58:39 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.jss.2016.05.016},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Systematic literature review, Software development effort estimation, Ensemble effort estimation},
	Pages = {151 - 175},
	Title = {Systematic literature review of ensemble effort estimation},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121216300450},
	Volume = {118},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121216300450},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2016.05.016}}

@article{Dikert:2016,
	Abstract = {Agile methods have become an appealing alternative for companies striving to improve their performance, but the methods were originally designed for small and individual teams. This creates unique challenges when introducing agile at scale, when development teams must synchronize their activities, and there might be a need to interface with other organizational units. In this paper we present a systematic literature review on how agile methods and lean software development has been adopted at scale, focusing on reported challenges and success factors in the transformation. We conducted a systematic literature review of industrial large-scale agile transformations. Our keyword search found 1875 papers. We included 52 publications describing 42 industrial cases presenting the process of taking large-scale agile development into use. Almost 90% of the included papers were experience reports, indicating a lack of sound academic research on the topic. We identified 35 reported challenges grouped into nine categories, and 29 success factors, grouped into eleven categories. The most salient success factor categories were management support, choosing and customizing the agile model, training and coaching, and mindset and alignment.},
	Author = {Kim Dikert and Maria Paasivaara and Casper Lassenius},
	Date-Added = {2019-05-09 22:58:12 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.jss.2016.06.013},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Agile software development, Organizational transformation, Large-scale agile, Adopting agile software development, Challenges, Success factors, Systematic literature review},
	Pages = {87 - 108},
	Title = {Challenges and success factors for large-scale agile transformations: A systematic literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121216300826},
	Volume = {119},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121216300826},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2016.06.013}}

@article{Garousi:2016a,
	Abstract = {Context: The global software industry and the software engineering (SE) academia are two large communities. However, unfortunately, the level of joint industry-academia collaborations in SE is still relatively very low, compared to the amount of activity in each of the two communities. It seems that the two 'camps' show only limited interest/motivation to collaborate with one other. Many researchers and practitioners have written about the challenges, success patterns (what to do, i.e., how to collaborate) and anti-patterns (what not do do) for industry-academia collaborations. Objective: To identify (a) the challenges to avoid risks to the collaboration by being aware of the challenges, (b) the best practices to provide an inventory of practices (patterns) allowing for an informed choice of practices to use when planning and conducting collaborative projects. Method: A systematic review has been conducted. Synthesis has been done using grounded-theory based coding procedures. Results: Through thematic analysis we identified 10 challenge themes and 17 best practice themes. A key outcome was the inventory of best practices, the most common ones recommended in different contexts were to hold regular workshops and seminars with industry, assure continuous learning from industry and academic sides, ensure management engagement, the need for a champion, basing research on real-world problems, showing explicit benefits to the industry partner, be agile during the collaboration, and the co-location of the researcher on the industry side. Conclusion: Given the importance of industry-academia collaboration to conduct research of high practical relevance we provide a synthesis of challenges and best practices, which can be used by researchers and practitioners to make informed decisions on how to structure their collaborations.},
	Author = {Vahid Garousi and Kai Petersen and Baris Ozkan},
	Date-Added = {2019-05-09 22:57:43 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2016.07.006},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Software engineering, Industry-academia collaborations, Industry, Universities, Challenges, Success patterns, Best practices, Systematic literature review},
	Pages = {106 - 127},
	Title = {Challenges and best practices in industry-academia collaborations in software engineering: A systematic literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916301203},
	Volume = {79},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916301203},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.07.006}}

@article{Febrero:2016,
	Abstract = {Context
The increasing dependence of our society on software driven systems has led Software Reliability to become a key factor as well as making it a highly active research area with hundreds of works being published every year. It would, however, appear that this activity is much more reduced as regards how to apply representative international standards on Product Quality to industrial environments, with just a few works on Standard Based software reliability modeling (SB-SRM). This is surprising given the relevance of such International Standards in industry.
Objective
To identify and analyze the existing works on the modeling of Software Reliability based on International Standards as the starting point for a reliability assessment proposal based on ISO/IEC-25000 ``Software Product Quality Requirements and Evaluation'' (SQuaRE) series.
Method
The work methodology is based on the guidelines provided in Evidence Based Software Engineering for Systematic Literature Reviews (SLR).
Results
A total of 1820 works were obtained as a result of the SLR search, more than 800 primary studies were selected after data filtering. After scrutiny, over thirty of those were thoroughly analyze, the results obtained show a very limited application of SB-SRM particularly to industrial environment.
Conclusion
Our analysis point to the complexity of the proposed models together with the difficulties involved in applying them to the management of engineering activities as a root cause to be considered for such limited application. The various stakeholder needs are also a point of paramount importance that should be better covered if the industrial applicability of the proposed models is to be increased.},
	Author = {Felipe Febrero and Coral Calero and M. {\'A}ngeles Moraga},
	Date-Added = {2019-05-09 22:57:15 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2015.09.006},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Software quality, Software reliability modeling, International standard, SQuaRE},
	Pages = {18 - 29},
	Title = {Software reliability modeling based on ISO/IEC SQuaRE},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584915001652},
	Volume = {70},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584915001652},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2015.09.006}}

@article{Torrecilla_Salinas:2016,
	Abstract = {Context
Agile approaches are an alternative for organizations developing software, particularly for those who develop Web applications. Besides, CMMI (Capability Maturity Model Integration) models are well-established approaches focused on assessing the maturity of an organization that develops software. Web Engineering is the field of Software Engineering responsible for analyzing and studying the specific characteristics of the Web. The suitability of an Agile approach to help organizations reach a certain CMMI maturity level in Web environments will be very interesting, as they will be able to keep the ability to quickly react and adapt to changes as long as their development processes get mature.
Objective
This paper responds to whether it is feasible or not, for an organization developing Web systems, to achieve a certain maturity level of the CMMI-DEV model using Agile methods.
Method
The proposal is analyzed by means of a systematic literature review of the relevant approaches in the field, defining a characterization schema in order to compare them to introduce the current state-of-the-art.
Results
The results achieved after the systematic literature review are presented, analyzed and compared against the defined schema, extracting relevant conclusions for the different dimensions of the problem: compatibility, compliance, experience, maturity and Web.
Conclusion
It is concluded that although the definition of an Agile approach to meet the different CMMI maturity levels goals could be possible for an organization developing Web systems, there is still a lack of detailed studies and analysis on the field.},
	Author = {C.J. Torrecilla-Salinas and J. Sede{\~n}o and M.J. Escalona and M. Mej{\'\i}as},
	Date-Added = {2019-05-09 22:56:45 +0100},
	Date-Modified = {2020-02-01 16:09:10 +0100},
	Doi = {10.1016/j.infsof.2015.11.002},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Agile, Scrum, Web Engineering, CMMI, Software Engineering},
	Pages = {92 - 107},
	Title = {Agile, Web Engineering and Capability Maturity Model Integration: A systematic literature review.},
	Url = {http://www.sciencedirect.com/science/article/pii/S095058491500186X},
	Volume = {71},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S095058491500186X},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2015.11.002}}

@article{Gasparic:2016,
	Abstract = {A recommendation system for software engineering (RSSE) is a software application that provides information items estimated to be valuable for a software engineering task in a given context. Present the results of a systematic literature review to reveal the typical functionality offered by existing RSSEs, research gaps, and possible research directions. We evaluated 46 papers studying the benefits, the data requirements, the information and recommendation types, and the effort requirements of RSSE systems. We include papers describing tools that support source code related development published between 2003 and 2013. The results show that RSSEs typically visualize source code artifacts. They aim to improve system quality, make the development process more efficient and less expensive, lower developer's cognitive load, and help developers to make better decisions. They mainly support reuse actions and debugging, implementation, and maintenance phases. The majority of the systems are reactive. Unexploited opportunities lie in the development of recommender systems outside the source code domain. Furthermore, current RSSE systems use very limited context information and rely on simple models. Context-adapted and proactive behavior could improve the acceptance of RSSE systems in practice.},
	Author = {Marko Gasparic and Andrea Janes},
	Date-Added = {2019-05-09 22:56:13 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.jss.2015.11.036},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Recommendation system for software engineering, Systematic literature review},
	Pages = {101 - 113},
	Title = {What recommendation systems for software engineering recommend: A systematic literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121215002605},
	Volume = {113},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121215002605},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2015.11.036}}

@article{Soomro:2016,
	Abstract = {Context
Over the past 50years numerous studies have investigated the possible effect that software engineers' personalities may have upon their individual tasks and teamwork. These have led to an improved understanding of that relationship; however, the analysis of personality traits and their impact on the software development process is still an area under investigation and debate. Further, other than personality traits, ``team climate'' is also another factor that has also been investigated given its relationship with software teams' performance.
Objective
The aim of this paper is to investigate how software professionals' personality is associated with team climate and team performance.
Method
In this paper we detail a Systematic Literature Review (SLR) of the effect of software engineers' personality traits and team climate on software team performance.
Results
Our main findings include 35 primary studies that have addressed the relationship between personality and team performance without considering team climate. The findings showed that team climate comprises a wide range of factors that fall within the fields of management and behavioral sciences. Most of the studies used undergraduate students as subjects and as surrogates of software professionals.
Conclusions
The findings from this SLR would be beneficial for understanding the personality assessment of software development team members by revealing the traits of personality taxonomy, along with the measurement of the software development team working environment. These measurements would be useful in examining the success and failure possibilities of software projects in development processes.
General terms
Human factors, performance.},
	Author = {Arjumand Bano Soomro and Norsaremah Salleh and Emilia Mendes and John Grundy and Giles Burch and Azlin Nordin},
	Date-Added = {2019-05-09 22:54:56 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2016.01.006},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Software team climate, Personality and software engineering, Systematic literature review, Team performance},
	Pages = {52 - 65},
	Title = {The effect of software engineers' personality traits on team climate and performance: A Systematic Literature Review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916000082},
	Volume = {73},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916000082},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.01.006}}

@article{Martins:2016,
	Abstract = {Context
Safety-Critical Systems (SCS) are becoming increasingly present in our society. A considerable amount of research effort has been invested into improving the SCS requirements engineering process as it is critical to the successful development of SCS and, in particular, the engineering of safety aspects.
Objective
This article aims to investigate which approaches have been proposed to elicit, model, specify and validate safety requirements in the context of SCS, as well as to what extent such approaches have been validated in industrial settings. The paper will also investigate how the usability and usefulness of the reported approaches have been explored, and to what extent they enable requirements communication among the development project/team actors in the development of SCS.
Method
We conducted a systematic literature review by selecting 151 papers published between 1983 and 2014. The research methodology to conduct the SLR was based on the guidelines proposed by Kitchenham and Biolchini.
Results
The results of this systematic review should encourage further research into the design of studies to improve the requirements engineering for SCS, particularly to enable the communication of the safety requirements among the project team actors, and the adoption of other models for hazard and accident models. The presented results point to the need for more industry-oriented studies, particularly with more participation of practitioners in the validation of new approaches.
Conclusion
The most relevant findings from this review and their implications for further research are as follows: integration between requirements engineering and safety engineering areas; dominance of the traditional approaches; early mortality of new approaches; need for industry validation; lack of evidence for the usefulness and usability of most approaches; and the lack of studies that investigate how to improve the communication process throughout the lifecycle. Based on the findings, we suggest a research agenda to the community of researchers and advices to SCS practitioners.},
	Author = {Luiz Eduardo G. Martins and Tony Gorschek},
	Date-Added = {2019-05-09 22:54:07 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2016.04.002},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Safety requirements, Safety-critical systems, Hazard, Accident, Systematic literature review, Requirements engineering},
	Pages = {71 - 89},
	Title = {Requirements engineering for safety-critical systems: A systematic literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916300568},
	Volume = {75},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916300568},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.04.002}}

@article{Garousi:2016,
	Abstract = {Context
Many organizations see software test automation as a solution to decrease testing costs and to reduce cycle time in software development. However, establishment of automated testing may fail if test automation is not applied in the right time, right context and with the appropriate approach.
Objective
The decisions on when and what to automate is important since wrong decisions can lead to disappointments and major wrong expenditures (resources and efforts). To support decision making on when and what to automate, researchers and practitioners have proposed various guidelines, heuristics and factors since the early days of test automation technologies. As the number of such sources has increased, it is important to systematically categorize the current state-of-the-art and -practice, and to provide a synthesized overview.
Method
To achieve the above objective, we have performed a Multivocal Literature Review (MLR) study on when and what to automate in software testing. A MLR is a form of a Systematic Literature Review (SLR) which includes the grey literature (e.g., blog posts and white papers) in addition to the published (formal) literature (e.g., journal and conference papers). We searched the academic literature using the Google Scholar and the grey literature using the regular Google search engine.
Results
Our MLR and its results are based on 78 sources, 52 of which were grey literature and 26 were formally published sources. We used the qualitative analysis (coding) to classify the factors affecting the when- and what-to-automate questions to five groups: (1) Software Under Test (SUT)-related factors, (2) test-related factors, (3) test-tool-related factors, (4) human and organizational factors, and (5) cross-cutting and other factors. The most frequent individual factors were: need for regression testing (44 sources), economic factors (43), and maturity of SUT (39).
Conclusion
We show that current decision-support in software test automation provides reasonable advice for industry, and as a practical outcome of this research we have summarized it as a checklist that can be used by practitioners. However, we recommend developing systematic empirically-validated decision-support approaches as the existing advice is often unsystematic and based on weak empirical evidence.},
	Author = {Vahid Garousi and Mika V. M{\"a}ntyl{\"a}},
	Date-Added = {2019-05-09 22:53:25 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2016.04.015},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Software test automation, Decision support, When to automate, What to automate, Multivocal literature review, Systematic literature review, Systematic Mapping study},
	Pages = {92 - 117},
	Title = {When and what to automate in software testing? A multi-vocal literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916300702},
	Volume = {76},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916300702},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.04.015}}

@article{Niazi:2016,
	Abstract = {Context
Global Software Development (GSD) is the process whereby software is developed by different teams located in various parts of the globe. One of the major reasons for GSD project failure is that a number of organizations endorse global development prior to understanding project management challenges for the global activity.
Objective
The objective of this paper is to identify the challenges, from the client and vendor perspectives, which can undermine the successful management of GSD projects.
Method
We followed a two-phase approach: we first identified the challenges via a Systematic Literature Review (SLR) and then the identified challenges were validated using a questionnaire-based survey.
Results
Through both approaches, we identified 19 challenges important to the success of GSD project management. A comparison of the challenges identified in client and vendor organizations indicates that there are more similarities than differences between the challenges. Our results show a positive correlation between the ranks obtained from the SLR and the questionnaire ((rs(19) = 0.102), p = 0.679). The results of t-test (i.e., t = 0.299, p = 0.768>0.05) show that there is no significant difference between the findings of SLR and questionnaire.
Conclusions
GSD organizations should try to address the identified challenges when managing their global software development activities to increase the probability of project success.},
	Author = {Mahmood Niazi and Sajjad Mahmood and Mohammad Alshayeb and Mohammed Rehan Riaz and Kanaan Faisal and Narciso Cerpa and Siffat Ullah Khan and Ita Richardson},
	Date-Added = {2019-05-09 22:52:32 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2016.08.002},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Global software development, Software project management, Challenges and barriers, Systematic literature review, Empirical study},
	Pages = {1 - 19},
	Title = {Challenges of project management in global software development: A client-vendor analysis},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916301227},
	Volume = {80},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916301227},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.08.002}}

@article{Vierhauser:2016,
	Abstract = {Context
Software systems today often interoperate with each other, thus forming a system of systems (SoS). Due to the scale, complexity, and heterogeneity of SoS, determining compliance with their requirements is challenging, despite the range of existing monitoring approaches. The fragmented research landscape and the diversity of existing approaches, however, make it hard to understand and analyze existing research regarding its suitability for SoS.
Objective
The aims of this paper are thus to systematically identify, describe, and classify existing approaches for requirements-based monitoring of software systems at runtime. Specifically, we (i) analyze the characteristics and application areas of monitoring approaches proposed in different domains, we (ii) systematically identify frameworks supporting requirements monitoring, and finally (iii) analyze their support for requirements monitoring in SoS.
Method
We performed a systematic literature review (SLR) to identify existing monitoring approaches and to classify their key characteristics and application areas. Based on this analysis we selected requirements monitoring frameworks, following a definition by Robinson, and analyzed them regarding their support for requirements monitoring in SoS.
Results
We identified 330 publications, which we used to produce a comprehensive overview of the landscape of requirements monitoring approaches. We analyzed these publications regarding their support for Robinson's requirements monitoring layers, resulting in 37 identified frameworks. We investigated how well these frameworks support requirements monitoring in SoS.
Conclusions
We conclude that most existing approaches are restricted to certain kinds of checks, particular types of events and data, and mostly also limited to one particular architectural style and technology. This lack of flexibility makes their application in an SoS context difficult. Also, systematic and automated variability management is still missing. Regarding their evaluation, many existing frameworks focus on measuring the performance overhead, while only few frameworks have been assessed in cases studies with real-world systems.},
	Author = {Michael Vierhauser and Rick Rabiser and Paul Gr{\"u}nbacher},
	Date-Added = {2019-05-09 22:51:57 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1016/j.infsof.2016.08.005},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Requirements monitoring, Systems of systems, Systematic literature review},
	Pages = {89 - 109},
	Title = {Requirements monitoring frameworks: A systematic review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916301288},
	Volume = {80},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916301288},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.08.005}}

@article{Lenberg:2016,
	Author = {Lenberg, Per and Wallgren Tengberg, Lars G{\"o}ran and Feldt, Robert},
	Date-Added = {2019-05-09 22:50:46 +0100},
	Date-Modified = {2020-01-28 14:05:02 +0100},
	Doi = {10.1007/s10664-016-9482-0},
	Issn = {1573-7616},
	Journal = {Empirical Software Engineering},
	Number = {4},
	Pages = {2179--2205},
	Publisher = {Springer Nature},
	Title = {An initial analysis of software engineers' attitudes towards organizational change},
	Url = {http://dx.doi.org/10.1007/s10664-016-9482-0},
	Volume = {22},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s10664-016-9482-0}}
