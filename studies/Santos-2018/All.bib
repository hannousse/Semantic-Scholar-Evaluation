%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Hannousse Abdelhakim at 2020-01-28 14:22:30 +0100 


%% Saved with string encoding Unicode (UTF-8) 



@inproceedings{Codabux:2017,
	Author = {Zadia Codabux and Kazi Zakia Sultana and Byron J. Williams},
	Booktitle = {The 29th International Conference on Software Engineering & Knowledge Engineering (SEKE)},
	Date-Added = {2019-05-07 01:19:07 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.18293/SEKE2017-121},
	Title = {The Relationship between Traceable Code Patterns and Code Smells},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.18293/SEKE2017-121}}

@article{Tufano:2017,
	Author = {M. {Tufano} and F. {Palomba} and G. {Bavota} and R. {Oliveto} and M. D. {Penta} and A. {De Lucia} and D. {Poshyvanyk}},
	Date-Added = {2019-05-07 01:13:52 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/TSE.2017.2653105},
	Issn = {0098-5589},
	Journal = {IEEE Transactions on Software Engineering},
	Keywords = {data mining;public domain software;software maintenance;software quality;source code (software);open source projects;code smells;code comprehensibility;code maintainability;commits mining;smell instances;smell-introducing commits;code quality;technical debt;Ecosystems;History;Androids;Humanoid robots;Software systems;Maintenance engineering;Code smells;empirical study;mining software repositories},
	Number = {11},
	Pages = {1063-1088},
	Title = {When and Why Your Code Starts to Smell Bad (and Whether the Smells Go Away)},
	Volume = {43},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1109/TSE.2017.2653105}}

@inproceedings{Ahmed:2017,
	Author = {I. {Ahmed} and C. {Brindescu} and U. A. {Mannan} and C. {Jensen} and A. {Sarma}},
	Booktitle = {2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
	Date-Added = {2019-05-07 01:12:56 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/ESEM.2017.12},
	Keywords = {data mining;program debugging;public domain software;software maintenance;software metrics;conflicting change;method-level code;semantic conflicts;code changes;code elements;resulting code quality;merge conflicts Background;code smells;conflict resolution;Bad code design;Software;Merging;Computer bugs;Tools;Software measurement;Semantics;Code Smell;Merge Conflict;Empirical Analysis;Machine Learning},
	Pages = {58-67},
	Title = {An Empirical Examination of the Relationship between Code Smells and Merge Conflicts},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1109/ESEM.2017.12}}

@inproceedings{Mello:2017,
	Author = {R. M. d. {Mello} and R. F. {Oliveira} and A. F. {Garcia}},
	Booktitle = {2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
	Date-Added = {2019-05-07 01:12:12 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/ESEM.2017.13},
	Keywords = {human factors;software maintenance;software quality;code smells;multitrial empirical study;human factors;complex smells;code smell identification;smell identification tasks;human resources;Human factors;Collaboration;Tools;Software systems;Software measurement;code smell identification;human factors;context;collaboration;code review;replication},
	Pages = {68-77},
	Title = {On the Influence of Human Factors for Identifying Code Smells: A Multi-Trial Empirical Study},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1109/ESEM.2017.13}}

@inproceedings{Rani:2017,
	Author = {A. {Rani} and J. K. {Chhabra}},
	Booktitle = {2017 2nd International Conference for Convergence in Technology (I2CT)},
	Date-Added = {2019-05-07 01:11:18 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/I2CT.2017.8226297},
	Keywords = {Java;program testing;reverse engineering;software maintenance;software quality;Gitblit;code JDeodorant;Type Checking smell;refactoring strategies;reverse engineering;empirical study;code design;code smells;design quality;Software;Tools;Feature extraction;Software measurement;History;System analysis and design;code smell;empirical study;refactoring;object oriented maintainence},
	Pages = {1093-1098},
	Title = {Evolution of code smells over multiple versions of softwares: An empirical investigation},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1109/I2CT.2017.8226297}}

@article{Khomh:2011,
	Author = {Khomh, Foutse and Penta, Massimiliano Di and Gu{\'e}h{\'e}neuc, Yann-Ga{\"e}l and Antoniol, Giuliano},
	Date-Added = {2019-05-07 01:09:55 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1007/s10664-011-9171-y},
	Issn = {1573-7616},
	Journal = {Empirical Software Engineering},
	Number = {3},
	Pages = {243--275},
	Publisher = {Springer Nature},
	Title = {An exploratory study of the impact of antipatterns on class change- and fault-proneness},
	Url = {http://dx.doi.org/10.1007/s10664-011-9171-y},
	Volume = {17},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s10664-011-9171-y}}

@article{Romano:2012,
	Author = {Romano, Daniele and Raila, Paulius and Pinzger, Martin and Khomh, Foutse},
	Date-Added = {2019-05-07 01:09:21 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/wcre.2012.53},
	Isbn = {9781467345361},
	Journal = {2012 19th Working Conference on Reverse Engineering},
	Publisher = {IEEE},
	Title = {Analyzing the Impact of Antipatterns on Change-Proneness Using Fine-Grained Source Code Changes},
	Url = {http://dx.doi.org/10.1109/WCRE.2012.53},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/WCRE.2012.53},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/wcre.2012.53}}

@article{Sabane:2013,
	Author = {Sabane, A. and Di Penta, M. and Antoniol, G. and Gueheneuc, Y.},
	Date-Added = {2019-05-07 01:08:50 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/csmr.2013.26},
	Isbn = {9781467358330},
	Journal = {2013 17th European Conference on Software Maintenance and Reengineering},
	Publisher = {IEEE},
	Title = {A Study on the Relation between Antipatterns and the Cost of Class Unit Testing},
	Url = {http://dx.doi.org/10.1109/CSMR.2013.26},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/CSMR.2013.26},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/csmr.2013.26}}

@article{Taibi:2017,
	Abstract = {Context. In recent years, smells, also referred to as bad smells, have gained popularity among developers. However, it is still not clear how harmful they are perceived from the developers' point of view. Many developers talk about them, but only few know what they really are, and even fewer really take care of them in their source code. Objective. The goal of this work is to understand the perceived criticality of code smells both in theory, when reading their description, and in practice. Method. We executed an empirical study as a differentiated external replication of two previous studies. The studies were conducted as surveys involving only highly experienced developers (63 in the first study and 41 in the second one). First the perceived criticality was analyzed by proposing the description of the smells, then different pieces of code infected by the smells were proposed, and finally their ability to identify the smells in the analyzed code was tested. Results. According to our knowledge, this is the largest study so far investigating the perception of code smells with professional software developers. The results show that developers are very concerned about code smells in theory, nearly always considering them as harmful or very harmful (17 out of 23 smells). However, when they were asked to analyze an infected piece of code, only few infected classes were considered harmful and even fewer were considered harmful because of the smell. Conclusions. The results confirm our initial hypotheses that code smells are perceived as more critical in theory but not as critical in practice.},
	Author = {Davide Taibi and Andrea Janes and Valentina Lenarduzzi},
	Date-Added = {2019-05-07 01:08:13 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1016/j.infsof.2017.08.008},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Software maintenance, Code smells, Bad smells, Antipatterns, Refactoring},
	Pages = {223 - 235},
	Title = {How developers perceive smells in source code: A replicated study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916304128},
	Volume = {92},
	Year = {2017},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916304128},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2017.08.008}}

@article{Jaafar:2014,
	Author = {Jaafar, Fehmi and Khomh, Foutse and Gueheneuc, Yann-Gael and Zulkernine, Mohammad},
	Date-Added = {2019-05-07 01:07:43 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/qsic.2014.45},
	Isbn = {9781479971978},
	Journal = {2014 14th International Conference on Quality Software},
	Publisher = {IEEE},
	Title = {Anti-pattern Mutations and Fault-proneness},
	Url = {http://dx.doi.org/10.1109/QSIC.2014.45},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/QSIC.2014.45},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/qsic.2014.45}}

@inproceedings{Jaafar:2017,
	Author = {F. {Jaafar} and A. {Lozano} and Y. {Gu{\'e}h{\'e}neuc} and K. {Mens}},
	Booktitle = {2017 IEEE International Conference on Software Quality, Reliability and Security (QRS)},
	Date-Added = {2019-05-07 01:06:53 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/QRS.2017.38},
	Keywords = {public domain software;software engineering;open-source software systems;software engineering;Azureus;Eclipse;JHotDraw;clones;anti patterns;Cloning;Software systems;Maintenance engineering;Software quality;Measurement;Complexity theory;Code smells;Anti-patterns;Clones;Faults proneness;Software Quality},
	Pages = {274-284},
	Title = {On the Analysis of Co-Occurrence of Anti-Patterns and Clones},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1109/QRS.2017.38}}

@article{Jaafar:2013,
	Author = {Jaafar, Fehmi and Gueheneuc, Yann-Gael and Hamel, Sylvie and Khomh, Foutse},
	Date-Added = {2019-05-07 01:06:15 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/wcre.2013.6671310},
	Isbn = {9781479929313},
	Journal = {2013 20th Working Conference on Reverse Engineering (WCRE)},
	Publisher = {IEEE},
	Title = {Mining the relationship between anti-patterns dependencies and fault-proneness},
	Url = {http://dx.doi.org/10.1109/WCRE.2013.6671310},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/WCRE.2013.6671310},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/wcre.2013.6671310}}

@inproceedings{Zhang:2017,
	Author = {X. {Zhang} and Y. {Zhou} and C. {Zhu}},
	Booktitle = {2017 International Conference on Software Analysis, Testing and Evolution (SATE)},
	Date-Added = {2019-05-07 01:04:39 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/SATE.2017.9},
	Keywords = {public domain software;software engineering;software fault tolerance;software maintenance;software metrics;software quality;software reliability;software engineering researchers;software defect prediction techniques;defect prone software modules;source code files;software design;software quality;high dependency design;software engineering tasks;bad designs indicators;fundamental defect prediction metrics;defect prediction models;design metrics;defects proneness;Measurement;Predictive models;Correlation;Software design;Software quality;Software engineering},
	Pages = {1-9},
	Title = {An Empirical Study of the Impact of Bad Designs on Defect Proneness},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1109/SATE.2017.9}}

@inproceedings{Karasneh:2016,
	Author = {B. {Karasneh} and M. R. V. {Chaudron} and F. {Khomh} and Y. {Gueheneuc}},
	Booktitle = {2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
	Date-Added = {2019-05-07 01:03:25 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/SANER.2016.104},
	Keywords = {formal specification;public domain software;software fault tolerance;software quality;source code (software);Unified Modeling Language;design models;anti-pattern detection;software systems;source code quality;fault-prone anti-pattern elimination;UML design models;open-source systems;Anti-patterns;design models;source code},
	Pages = {36-45},
	Title = {Studying the Relation between Anti-Patterns in Design Models and in Source Code},
	Volume = {1},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1109/SANER.2016.104}}

@article{Taba:2013,
	Author = {Taba, Seyyed Ehsan Salamati and Khomh, Foutse and Zou, Ying and Hassan, Ahmed E. and Nagappan, Meiyappan},
	Date-Added = {2019-05-07 01:02:35 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/icsm.2013.38},
	Isbn = {9780769549811},
	Journal = {2013 IEEE International Conference on Software Maintenance},
	Publisher = {IEEE},
	Title = {Predicting Bugs Using Antipatterns},
	Url = {http://dx.doi.org/10.1109/ICSM.2013.38},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSM.2013.38},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icsm.2013.38}}

@article{Ma:2015,
	Author = {Ma, Wanwangying and Chen, Lin and Zhou, Yuming and Xu, Baowen and Zhou, Xiaoyu},
	Date-Added = {2019-05-07 01:02:08 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/qrs.2015.43},
	Isbn = {9781467379892},
	Journal = {2015 IEEE International Conference on Software Quality, Reliability and Security},
	Publisher = {IEEE},
	Title = {Are Anti-patterns Coupled? An Empirical Study},
	Url = {http://dx.doi.org/10.1109/QRS.2015.43},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/QRS.2015.43},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/qrs.2015.43}}

@article{Abbes:2011,
	Author = {Abbes, Marwen and Khomh, Foutse and Gueheneuc, Yann-Gael and Antoniol, Giuliano},
	Date-Added = {2019-05-07 01:01:18 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/csmr.2011.24},
	Isbn = {9781612842592},
	Journal = {2011 15th European Conference on Software Maintenance and Reengineering},
	Publisher = {IEEE},
	Title = {An Empirical Study of the Impact of Two Antipatterns, Blob and Spaghetti Code, on Program Comprehension},
	Url = {http://dx.doi.org/10.1109/CSMR.2011.24},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/CSMR.2011.24},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/csmr.2011.24}}

@article{Charalampidou:2017,
	Author = {Charalampidou, Sofia and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander and Avgeriou, Paris},
	Date-Added = {2019-05-07 00:59:56 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1145/3120459.3120465},
	Isbn = {9781450352642},
	Journal = {Proceedings of the XP2017 Scientific Workshops on - XP '17},
	Publisher = {ACM Press},
	Title = {Assessing Code Smell Interest Probability: A Case Study},
	Url = {http://dx.doi.org/10.1145/3120459.3120465},
	Year = {2017},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/3120459.3120465}}

@inproceedings{Soh:2016,
	Author = {Z. {Soh} and A. {Yamashita} and F. {Khomh} and Y. {Gu{\'e}h{\'e}neuc}},
	Booktitle = {2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
	Date-Added = {2019-05-07 00:59:00 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/SANER.2016.103},
	Keywords = {file organisation;Java;software maintenance;software quality;maintenance programming activities;code smells;file level;structural attributes;maintenance effort;functionally equivalent Java systems;developer log monitoring;annotation schema;file size;Maintenance engineering;Navigation;Java;Programming;Software;Companies;Software engineering;code smells;programming activity;maintenance effort;program comprehension;software quality},
	Pages = {393-402},
	Title = {Do Code Smells Impact the Effort of Different Maintenance Programming Activities?},
	Volume = {1},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1109/SANER.2016.103}}

@inproceedings{Palomba:2017,
	Author = {F. {Palomba} and R. {Oliveto} and A. {De Lucia}},
	Booktitle = {2017 IEEE Workshop on Machine Learning Techniques for Software Quality Evaluation (MaLTeSQuE)},
	Date-Added = {2019-05-07 00:58:07 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/MALTESQUE.2017.7882010},
	Keywords = {data mining;software maintenance;code smell co-occurrences;association rule learning;software maintainability;source code;smell co-presence;software system releases;unsupervised learning technique;frequent relationship discovery;Context;Software systems;Data mining;Manuals;Software maintenance;Computer bugs;Code Smells;Empirical Studies;Association Rule Mining},
	Pages = {8-13},
	Title = {Investigating code smell co-occurrences using association rule learning: A replicated study},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1109/MALTESQUE.2017.7882010}}

@inproceedings{Kaur:2016,
	Author = {A. {Kaur} and K. {Kaur} and S. {Jain}},
	Booktitle = {2016 International Conference on Advances in Computing, Communications and Informatics (ICACCI)},
	Date-Added = {2019-05-07 00:56:56 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/ICACCI.2016.7732136},
	Keywords = {Java;learning (artificial intelligence);object-oriented methods;software maintenance;software metrics;software change-proneness;code smells;class imbalance learning;object-oriented software metrics;maintenance problems;Java based mobile application;MOBAC;machine learning techniques;Software;Maintenance engineering;Couplings;Software metrics;Informatics;Data collection;Code smells;Exception handling smells;Software change-proneness;Machine learning techniques;Class imbalance learning},
	Pages = {746-754},
	Title = {Predicting software change-proneness with code smells and class imbalance learning},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1109/ICACCI.2016.7732136}}

@inproceedings{Zhao:2015,
	Author = {X. {Zhao} and X. {Xuan} and S. {Li}},
	Booktitle = {2015 30th IEEE/ACM International Conference on Automated Software Engineering Workshop (ASEW)},
	Date-Added = {2019-05-07 00:56:11 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/ASEW.2015.15},
	Keywords = {Java;software engineering;source code (software);Java based Web application projects;God method smell;Long method smell;God method;program source code;Complexity theory;Computer bugs;Java;Maintenance engineering;Size measurement;Business;Time measurement},
	Pages = {109-114},
	Title = {An Empirical Study of Long Method and God Method in Industrial Projects},
	Year = {2015},
	Bdsk-Url-1 = {https://doi.org/10.1109/ASEW.2015.15}}

@inproceedings{Islam:2016,
	Author = {M. R. {Islam} and M. F. {Zibran}},
	Booktitle = {2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
	Date-Added = {2019-05-07 00:55:12 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/SANER.2016.90},
	Keywords = {software engineering;source code (software);noncloned code;code clones;code smells;bug-proneness;clone-free source code;program faults;software systems;clone-aware software development;Cloning;Software systems;Measurement;Maintenance engineering;Encoding;History},
	Pages = {8-14},
	Title = {A Comparative Study on Vulnerabilities in Categories of Clones and Non-cloned Code},
	Volume = {3},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1109/SANER.2016.90}}

@article{Walter:2016,
	Abstract = {Context---Design patterns represent recommended generic solutions to various design problems, whereas code smells are symptoms of design issues that could hinder further maintenance of a software system. We can intuitively expect that both concepts are mutually exclusive, and the presence of patterns is correlated with the absence of code smells. However, the existing experimental evidence supporting this claim is still insufficient, and studies separately analyzing the impact of smells and patterns on code quality deliver diverse results. Objective---The aim of the paper is threefold: (1) to determine if and how the presence of the design patterns is linked to the presence of code smells, (2) to investigate if and how these relationships change throughout evolution of code, and (3) to identify the relationships between individual patterns and code smells. Method---We analyze nine design patterns and seven code smells in two medium-size, long-evolving, open source Java systems. In particular, we explore how the presence of design patterns impacts the presence of code smells, analyze if this link evolves over time, and extract association rules that describe their individual relationships. Results---Classes participating in design patterns appear to display code smells less frequently than other classes. The observed effect is stronger for some patterns (e.g., Singleton, State-Strategy) and weaker for others (e.g., Composite). The ratio between the relative number of smells in the classes participating in patterns and the relative number of smells in other classes, is approximately stable or slightly decreasing in time. Conclusion---This observation could be used to anticipate the smell-proneness of individual classes, and improve code smell detectors. Overall, our findings indicate that the presence of design patterns is linked with a lower number of code smell instances. This could support programmers in a context-sensitive analysis of smells in code.},
	Author = {Bartosz Walter and Tarek Alkhaeir},
	Date-Added = {2019-05-07 00:53:55 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1016/j.infsof.2016.02.003},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Design patterns, Code smells, Software evolution, Empirical study},
	Pages = {127 - 142},
	Title = {The relationship between design patterns and code smells: An exploratory study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916300210},
	Volume = {74},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916300210},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.02.003}}

@inproceedings{Ma:2016,
	Author = {W. {Ma} and L. {Chen} and Y. {Zhou} and B. {Xu}},
	Booktitle = {2016 International Conference on Software Analysis, Testing and Evolution (SATE)},
	Date-Added = {2019-05-07 00:52:49 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/SATE.2016.11},
	Keywords = {program debugging;software fault tolerance;software maintenance;software performance evaluation;bugs;code structures;code smell detection;Kappa statistic;code smell refactoring;Refused Parent Be Request;Long Parameter List;Blob;fault prediction performance improvement;Computer bugs;Measurement;Software;Object oriented modeling;Predictive models;Complexity theory;Logistics;Code smell;refactoring;refactoring prioritization;fault prediction},
	Pages = {24-29},
	Title = {Do We Have a Chance to Fix Bugs When Refactoring Code Smells?},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1109/SATE.2016.11}}

@inproceedings{Reis:2016,
	Author = {J. P. d. {Reis} and F. {Brito e Abreu} and G. d. F. {Carneiro}},
	Booktitle = {2016 10th International Conference on the Quality of Information and Communications Technology (QUATIC)},
	Date-Added = {2019-05-07 00:51:57 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/QUATIC.2016.044},
	Keywords = {software maintenance;software metrics;software quality;statistical analysis;statistical testing;software maintainability;QA preventive initiatives;software refactoring;application domain;Java applications;Kruskal-Wallis test;ANOVA test;open source applications;statistical analysis;duplicated code smell;software clones;Software;Complexity theory;Measurement;Education;Java;Business;Games;software quality;code smells;application domain;complexity metrics.},
	Pages = {172-177},
	Title = {Code Smells Incidence: Does It Depend on the Application Domain?},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1109/QUATIC.2016.044}}

@inproceedings{Palomba:2016,
	Author = {F. {Palomba} and M. {Zanoni} and F. A. {Fontana} and A. D. {Lucia} and R. {Oliveto}},
	Booktitle = {2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
	Date-Added = {2019-05-07 00:50:21 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/ICSME.2016.27},
	Keywords = {program debugging;software performance evaluation;source code (software);bug prediction performance improvement;code smell intensity index;bug-proneness;Measurement;Computer bugs;Predictive models;Indexes;Context;Object oriented modeling;Computational modeling;Code Smells;Bug Prediction},
	Pages = {244-255},
	Title = {Smells Like Teen Spirit: Improving Bug Prediction Performance Using the Intensity of Code Smells},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1109/ICSME.2016.27}}

@article{Yamashita:2013,
	Author = {Yamashita, Aiko},
	Date-Added = {2019-05-07 00:48:55 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1007/s10664-013-9250-3},
	Issn = {1573-7616},
	Journal = {Empirical Software Engineering},
	Number = {4},
	Pages = {1111--1143},
	Publisher = {Springer Nature},
	Title = {Assessing the capability of code smells to explain maintenance problems: an empirical study combining quantitative and qualitative data},
	Url = {http://dx.doi.org/10.1007/s10664-013-9250-3},
	Volume = {19},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s10664-013-9250-3}}

@article{Cardoso:2015,
	Author = {Bruno Cardoso and Eduardo Figueiredo},
	Date-Added = {2019-05-07 00:46:45 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Journal = {Proceedings of the XI Brazilian Symposium on Information Systems (SBSI 2015)},
	Title = {Co-Occurrence of Design Patterns and Bad Smells in Software Systems: An Exploratory Study},
	Url = {https://aisel.aisnet.org/sbis2015/55},
	Year = {2015},
	Bdsk-Url-1 = {https://aisel.aisnet.org/sbis2015/55}}

@article{Santos:2015,
	Author = {Santos, Jos{\'e} Amancio M. and de Mendon{\c c}a, Manoel G.},
	Date-Added = {2019-05-07 00:45:22 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1145/2695664.2695682},
	Isbn = {9781450331968},
	Journal = {Proceedings of the 30th Annual ACM Symposium on Applied Computing - SAC '15},
	Publisher = {ACM Press},
	Title = {Exploring decision drivers on god class detection in three controlled experiments},
	Url = {http://dx.doi.org/10.1145/2695664.2695682},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2695664.2695682}}

@article{Linares_Vasquez:2014,
	Author = {Linares-V{\'a}squez, Mario and Klock, Sam and McMillan, Collin and Saban{\'e}, Aminata and Poshyvanyk, Denys and Gu{\'e}h{\'e}neuc, Yann-Ga{\"e}l},
	Date-Added = {2019-05-07 00:44:35 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1145/2597008.2597144},
	Isbn = {9781450328791},
	Journal = {Proceedings of the 22nd International Conference on Program Comprehension - ICPC 2014},
	Publisher = {ACM Press},
	Title = {Domain matters: bringing further evidence of the relationships among anti-patterns, application domains, and quality-related metrics in Java mobile apps},
	Url = {http://dx.doi.org/10.1145/2597008.2597144},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2597008.2597144}}

@article{Yamashita:2015,
	Author = {Yamashita, Aiko and Zanoni, Marco and Fontana, Francesca Arcelli and Walter, Bartosz},
	Date-Added = {2019-05-07 00:44:00 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/icsm.2015.7332458},
	Isbn = {9781467375320},
	Journal = {2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
	Publisher = {IEEE},
	Title = {Inter-smell relations in industrial and open source systems: A replication and comparative analysis},
	Url = {http://dx.doi.org/10.1109/ICSM.2015.7332458},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSM.2015.7332458},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icsm.2015.7332458}}

@article{Tufano:2015,
	Author = {Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Oliveto, Rocco and Di Penta, Massimiliano and De Lucia, Andrea and Poshyvanyk, Denys},
	Date-Added = {2019-05-07 00:43:28 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/icse.2015.59},
	Isbn = {9781479919345},
	Journal = {2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
	Publisher = {IEEE},
	Title = {When and Why Your Code Starts to Smell Bad},
	Url = {http://dx.doi.org/10.1109/ICSE.2015.59},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSE.2015.59},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icse.2015.59}}

@article{Ahmed:2015,
	Author = {Ahmed, Iftekhar and Mannan, Umme Ayda and Gopinath, Rahul and Jensen, Carlos},
	Date-Added = {2019-05-07 00:42:21 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/esem.2015.7321186},
	Isbn = {9781467378994},
	Journal = {2015 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
	Publisher = {IEEE},
	Title = {An Empirical Study of Design Degradation: How Software Projects Get Worse over Time},
	Url = {http://dx.doi.org/10.1109/ESEM.2015.7321186},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ESEM.2015.7321186},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/esem.2015.7321186}}

@article{Oizumi:2014,
	Author = {Oizumi, Willian Nalepa and Garcia, Alessandro Fabricio and Colanzi, Thelma Elita and Ferreira, Manuele and Staa, Arndt von},
	Date-Added = {2019-05-07 00:41:32 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/sbes.2014.18},
	Isbn = {9781479942237},
	Journal = {2014 Brazilian Symposium on Software Engineering},
	Publisher = {IEEE},
	Title = {When Code-Anomaly Agglomerations Represent Architectural Problems? An Exploratory Study},
	Url = {http://dx.doi.org/10.1109/SBES.2014.18},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SBES.2014.18},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/sbes.2014.18}}

@article{Palomba:2014,
	Author = {Palomba, Fabio and Bavota, Gabriele and Penta, Massimiliano Di and Oliveto, Rocco and Lucia, Andrea De},
	Date-Added = {2019-05-07 00:40:23 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/icsme.2014.32},
	Isbn = {9781479961467},
	Journal = {2014 IEEE International Conference on Software Maintenance and Evolution},
	Publisher = {IEEE},
	Title = {Do They Really Smell Bad? A Study on Developers' Perception of Bad Code Smells},
	Url = {http://dx.doi.org/10.1109/ICSME.2014.32},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSME.2014.32},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icsme.2014.32}}

@article{Ban:2014,
	Author = {B{\'a}n, D{\'e}nes and Ferenc, Rudolf},
	Date-Added = {2019-05-07 00:39:36 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1007/978-3-319-09156-3_25},
	Isbn = {9783319091563},
	Issn = {1611-3349},
	Journal = {Lecture Notes in Computer Science},
	Pages = {337--352},
	Publisher = {Springer International Publishing},
	Title = {Recognizing Antipatterns and Analyzing Their Effects on Software Maintainability},
	Url = {http://dx.doi.org/10.1007/978-3-319-09156-3_25},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-09156-3_25}}

@inproceedings{Santos:2014,
	Author = {Jos{\'{e}} Amancio M. Santos and Manoel G. Mendon{\c{c}}a},
	Booktitle = {SEKE},
	Date-Added = {2019-05-07 00:37:23 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Pages = {244--249},
	Publisher = {Knowledge Systems Institute Graduate School},
	Title = {Identifying strategies on god class detection in two controlled experiments},
	Year = {2014}}

@article{Fontana:2013,
	Author = {Fontana, Francesca Arcelli and Ferme, Vincenzo and Marino, Alessandro and Walter, Bartosz and Martenka, Pawel},
	Date-Added = {2019-05-07 00:35:22 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/icsm.2013.37},
	Isbn = {9780769549811},
	Journal = {2013 IEEE International Conference on Software Maintenance},
	Publisher = {IEEE},
	Title = {Investigating the Impact of Code Smells on System's Quality: An Empirical Study on Systems of Different Application Domains},
	Url = {http://dx.doi.org/10.1109/ICSM.2013.37},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSM.2013.37},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icsm.2013.37}}

@article{Yamashita:2013b,
	Author = {Yamashita, Aiko and Moonen, Leon},
	Date-Added = {2019-05-07 00:34:32 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/wcre.2013.6671299},
	Isbn = {9781479929313},
	Journal = {2013 20th Working Conference on Reverse Engineering (WCRE)},
	Publisher = {IEEE},
	Title = {Do developers care about code smells? An exploratory survey},
	Url = {http://dx.doi.org/10.1109/WCRE.2013.6671299},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/WCRE.2013.6671299},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/wcre.2013.6671299}}

@inproceedings{Mantyla:2005,
	Author = {M. V. {Mantyla}},
	Booktitle = {2005 International Symposium on Empirical Software Engineering, 2005.},
	Date-Added = {2019-05-07 00:33:40 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/ISESE.2005.1541837},
	Keywords = {object-oriented programming;software metrics;object-oriented software;interrater agreement;software development;software evolvability evaluation;refactoring decision;evaluator demographics analysis;source code metrics;code smell evaluation;Software quality;Software performance;Demography;Humans;Programming profession;Performance evaluation;Object oriented modeling;Software systems},
	Pages = {10},
	Title = {An experiment on subjective evolvability evaluation of object-oriented software: explaining factors and interrater agreement},
	Year = {2005},
	Bdsk-Url-1 = {https://doi.org/10.1109/ISESE.2005.1541837}}

@inproceedings{Mantyla:2004,
	Author = {M. V. {Mantyla} and J. {Vanhanen} and C. {Lassenius}},
	Booktitle = {20th IEEE International Conference on Software Maintenance, 2004. Proceedings.},
	Date-Added = {2019-05-07 00:31:47 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/ICSM.2004.1357825},
	Issn = {1063-6773},
	Keywords = {program diagnostics;software houses;software metrics;software performance evaluation;subjective evaluation;bad code smell;poor software structures;Finnish software product company;code modules;code evaluation;source code metrics;Software quality;Software design;Companies;Software maintenance;Software tools;Software measurement;Current measurement;Quality assessment;Programming;Internet},
	Pages = {399-408},
	Title = {Bad smells - humans as code critics},
	Year = {2004},
	Bdsk-Url-1 = {https://doi.org/10.1109/ICSM.2004.1357825}}

@article{Mantyla:2006,
	Author = {M{\"a}ntyl{\"a}, Mika V. and Lassenius, Casper},
	Date-Added = {2019-05-07 00:30:43 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1007/s10664-006-9002-8},
	Issn = {1573-7616},
	Journal = {Empirical Software Engineering},
	Number = {3},
	Pages = {395--431},
	Publisher = {Springer Nature},
	Title = {Subjective evaluation of software evolvability using code smells: An empirical study},
	Url = {http://dx.doi.org/10.1007/s10664-006-9002-8},
	Volume = {11},
	Year = {2006},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s10664-006-9002-8}}

@article{Li:2007,
	Abstract = {Bad smells are used as a means to identify problematic classes in object-oriented systems for refactoring. The belief that the bad smells are linked with problematic classes is largely based on previous metric research results. Although there is a plethora of empirical studies linking software metrics to errors and error proneness of classes in object-oriented systems, the link between the bad smells and class error probability in the evolution of object-oriented systems after the systems are released has not been explored. There has been no empirical evidence linking the bad smells with class error probability so far. This paper presents the results from an empirical study that investigated the relationship between the bad smells and class error probability in three error-severity levels in an industrial-strength open source system. Our research, which was conducted in the context of the post-release system evolution process, showed that some bad smells were positively associated with the class error probability in the three error-severity levels. This finding supports the use of bad smells as a systematic method to identify and refactor problematic classes in this specific context.},
	Author = {Wei Li and Raed Shatnawi},
	Date-Added = {2019-05-07 00:30:05 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1016/j.jss.2006.10.018},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Object-oriented design, Bad smells, Software metrics, Design evolution, Open source software, Empirical study},
	Note = {Dynamic Resource Management in Distributed Real-Time Systems},
	Number = {7},
	Pages = {1120 - 1128},
	Title = {An empirical study of the bad smells and class error probability in the post-release object-oriented system evolution},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121206002780},
	Volume = {80},
	Year = {2007},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121206002780},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2006.10.018}}

@article{Vaucher:2009,
	Author = {Vaucher, Stephane and Khomh, Foutse and Moha, Naouel and Gueheneuc, Yann-Gael},
	Date-Added = {2019-05-07 00:29:37 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/wcre.2009.23},
	Isbn = {9780769538679},
	Journal = {2009 16th Working Conference on Reverse Engineering},
	Publisher = {IEEE},
	Title = {Tracking Design Smells: Lessons from a Study of God Classes},
	Url = {http://dx.doi.org/10.1109/WCRE.2009.23},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/WCRE.2009.23},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/wcre.2009.23}}

@article{Khomh:2009,
	Author = {Khomh, Foutse and Di Penta, Massimiliano and Gueheneuc, Yann-Gael},
	Date-Added = {2019-05-07 00:28:49 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/wcre.2009.28},
	Isbn = {9780769538679},
	Journal = {2009 16th Working Conference on Reverse Engineering},
	Publisher = {IEEE},
	Title = {An Exploratory Study of the Impact of Code Smells on Software Change-proneness},
	Url = {http://dx.doi.org/10.1109/WCRE.2009.28},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/WCRE.2009.28},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/wcre.2009.28}}

@article{DAmbros:2010,
	Author = {D'Ambros, Marco and Bacchelli, Alberto and Lanza, Michele},
	Date-Added = {2019-05-07 00:28:12 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/qsic.2010.58},
	Isbn = {9781424480784},
	Journal = {2010 10th International Conference on Quality Software},
	Publisher = {IEEE},
	Title = {On the Impact of Design Flaws on Software Defects},
	Url = {http://dx.doi.org/10.1109/QSIC.2010.58},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/QSIC.2010.58},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/qsic.2010.58}}

@article{Chatzigeorgiou:2010,
	Author = {Chatzigeorgiou, Alexander and Manakos, Anastasios},
	Date-Added = {2019-05-07 00:27:23 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/quatic.2010.16},
	Isbn = {9781424485390},
	Journal = {2010 Seventh International Conference on the Quality of Information and Communications Technology},
	Publisher = {IEEE},
	Title = {Investigating the Evolution of Bad Smells in Object-Oriented Code},
	Url = {http://dx.doi.org/10.1109/QUATIC.2010.16},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/QUATIC.2010.16},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/quatic.2010.16}}

@article{Carneiro:2010,
	Author = {Carneiro, Glauco de F. and Silva, Marcos and Mara, Leandra and Figueiredo, Eduardo and Sant'Anna, Claudio and Garcia, Alessandro and Mendonca, Manoel},
	Date-Added = {2019-05-07 00:26:42 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/sbes.2010.21},
	Isbn = {9781424489176},
	Journal = {2010 Brazilian Symposium on Software Engineering},
	Publisher = {IEEE},
	Title = {Identifying Code Smells with Multiple Concern Views},
	Url = {http://dx.doi.org/10.1109/SBES.2010.21},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SBES.2010.21},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/sbes.2010.21}}

@article{Olbrich:2010,
	Author = {Olbrich, Steffen M. and Cruzes, Daniela S. and Sjoberg, Dag I.K.},
	Date-Added = {2019-05-07 00:26:10 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/icsm.2010.5609564},
	Isbn = {9781424486304},
	Journal = {2010 IEEE International Conference on Software Maintenance},
	Publisher = {IEEE},
	Title = {Are all code smells harmful? A study of God Classes and Brain Classes in the evolution of three open source systems},
	Url = {http://dx.doi.org/10.1109/ICSM.2010.5609564},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSM.2010.5609564},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icsm.2010.5609564}}

@article{Marinescu:2011,
	Author = {Marinescu, Radu and Marinescu, Cristina},
	Date-Added = {2019-05-07 00:25:08 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/scam.2011.9},
	Isbn = {9781457709326},
	Journal = {2011 IEEE 11th International Working Conference on Source Code Analysis and Manipulation},
	Publisher = {IEEE},
	Title = {Are the Clients of Flawed Classes (Also) Defect Prone?},
	Url = {http://dx.doi.org/10.1109/SCAM.2011.9},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SCAM.2011.9},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/scam.2011.9}}

@article{Macia:2012,
	Author = {Macia, Isela and Garcia, Joshua and Popescu, Daniel and Garcia, Alessandro and Medvidovic, Nenad and von Staa, Arndt},
	Date-Added = {2019-05-07 00:23:28 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1145/2162049.2162069},
	Isbn = {9781450310925},
	Journal = {Proceedings of the 11th annual international conference on Aspect-oriented Software Development - AOSD '12},
	Publisher = {ACM Press},
	Title = {Are Automatically-detected Code Anomalies Relevant to Architectural Modularity?: An Exploratory Analysis of Evolving Systems},
	Url = {http://dx.doi.org/10.1145/2162049.2162069},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2162049.2162069}}

@article{Peters:2012,
	Author = {Peters, Ralph and Zaidman, Andy},
	Date-Added = {2019-05-07 00:22:34 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/csmr.2012.79},
	Isbn = {9781467309844},
	Journal = {2012 16th European Conference on Software Maintenance and Reengineering},
	Publisher = {IEEE},
	Title = {Evaluating the Lifespan of Code Smells using Software Repository Mining},
	Url = {http://dx.doi.org/10.1109/CSMR.2012.79},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/CSMR.2012.79},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/csmr.2012.79}}

@article{Macia:2012a,
	Author = {Macia, Isela and Arcoverde, Roberta and Garcia, Alessandro and Chavez, Christina and von Staa, Arndt},
	Date-Added = {2019-05-07 00:21:47 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/csmr.2012.35},
	Isbn = {9781467309844},
	Journal = {2012 16th European Conference on Software Maintenance and Reengineering},
	Publisher = {IEEE},
	Title = {On the Relevance of Code Anomalies for Identifying Architecture Degradation Symptoms},
	Url = {http://dx.doi.org/10.1109/CSMR.2012.35},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/CSMR.2012.35},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/csmr.2012.35}}

@article{Rahman:2011,
	Author = {Rahman, Foyzur and Bird, Christian and Devanbu, Premkumar},
	Date-Added = {2019-05-07 00:21:08 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1007/s10664-011-9195-3},
	Issn = {1573-7616},
	Journal = {Empirical Software Engineering},
	Number = {4-5},
	Pages = {503--530},
	Publisher = {Springer Nature},
	Title = {Clones: what is that smell?},
	Url = {http://dx.doi.org/10.1007/s10664-011-9195-3},
	Volume = {17},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s10664-011-9195-3}}

@article{Yamashita:2012,
	Author = {Yamashita, Aiko and Moonen, Leon},
	Date-Added = {2019-05-07 00:20:28 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/icsm.2012.6405287},
	Isbn = {9781467323130},
	Journal = {2012 28th IEEE International Conference on Software Maintenance (ICSM)},
	Publisher = {IEEE},
	Title = {Do code smells reflect important maintainability aspects?},
	Url = {http://dx.doi.org/10.1109/ICSM.2012.6405287},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSM.2012.6405287},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icsm.2012.6405287}}

@article{Sjoberg:2013,
	Author = {Sjoberg, Dag I.K. and Yamashita, Aiko and Anda, Bente C.D. and Mockus, Audris and Dyba, Tore},
	Date-Added = {2019-05-07 00:19:29 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/tse.2012.89},
	Issn = {1939-3520},
	Journal = {IEEE Transactions on Software Engineering},
	Number = {8},
	Pages = {1144--1156},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Quantifying the Effect of Code Smells on Maintenance Effort},
	Url = {http://dx.doi.org/10.1109/TSE.2012.89},
	Volume = {39},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/TSE.2012.89},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/tse.2012.89}}

@article{Yamashita:2013d,
	Abstract = {Context
Code smells are indicators of poor coding and design choices that can cause problems during software maintenance and evolution.
Objective
This study is aimed at a detailed investigation to which extent problems in maintenance projects can be predicted by the detection of currently known code smells.
Method
A multiple case study was conducted, in which the problems faced by six developers working on four different Java systems were registered on a daily basis, for a period up to four weeks. Where applicable, the files associated to the problems were registered. Code smells were detected in the pre-maintenance version of the systems, using the tools Borland Together and InCode. In-depth examination of quantitative and qualitative data was conducted to determine if the observed problems could be explained by the detected smells.
Results
From the total set of problems, roughly 30% percent were related to files containing code smells. In addition, interaction effects were observed amongst code smells, and between code smells and other code characteristics, and these effects led to severe problems during maintenance. Code smell interactions were observed between collocated smells (i.e., in the same file), and between coupled smells (i.e., spread over multiple files that were coupled).
Conclusions
The role of code smells on the overall system maintainability is relatively minor, thus complementary approaches are needed to achieve more comprehensive assessments of maintainability. Moreover, to improve the explanatory power of code smells, interaction effects amongst collocated smells and coupled smells should be taken into account during analysis.},
	Author = {Aiko Yamashita and Leon Moonen},
	Date-Added = {2019-05-07 00:18:47 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1016/j.infsof.2013.08.002},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Code smells, Maintainability, Empirical study},
	Number = {12},
	Pages = {2223 - 2242},
	Title = {To what extent can maintenance problems be predicted by code smell detection? - An empirical study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584913001614},
	Volume = {55},
	Year = {2013},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584913001614},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2013.08.002}}

@article{Yamashita:2013a,
	Abstract = {Context
Code smells are manifestations of design flaws that can degrade code maintainability. So far, no research has investigated if these indicators are useful for conducting system-level maintainability evaluations.
Aim
The research in this paper investigates the potential of code smells to reflect system-level indicators of maintainability.
Method
We evaluated four medium-sized Java systems using code smells and compared the results against previous evaluations on the same systems based on expert judgment and the Chidamber and Kemerer suite of metrics. The systems were maintained over a period of up to 4 weeks. During maintenance, effort (person-hours) and number of defects were measured to validate the different evaluation approaches.
Results
Most code smells are strongly influenced by size; consequently code smells are not good indicators for comparing the maintainability of systems differing greatly in size. Also, from the comparison of the different evaluation approaches, expert judgment was found as the most accurate and flexible since it considered effects due to the system's size and complexity and could adapt to different maintenance scenarios.
Conclusion
Code smell approaches show promise as indicators of the need for maintenance in a way that other purely metric-based approaches lack.},
	Author = {Aiko Yamashita and Steve Counsell},
	Date-Added = {2019-05-07 00:18:08 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1016/j.jss.2013.05.007},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Code smells, Maintainability, Empirical study, System evaluation},
	Number = {10},
	Pages = {2639 - 2653},
	Title = {Code smells as system-level indicators of maintainability: An empirical study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121213001258},
	Volume = {86},
	Year = {2013},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121213001258},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2013.05.007}}

@article{Zazworka:2011,
	Author = {Zazworka, Nico and Shaw, Michele A. and Shull, Forrest and Seaman, Carolyn},
	Date-Added = {2019-05-07 00:17:26 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1145/1985362.1985366},
	Isbn = {9781450305860},
	Journal = {Proceeding of the 2nd working on Managing technical debt - MTD '11},
	Publisher = {ACM Press},
	Title = {Investigating the impact of design debt on software quality},
	Url = {http://dx.doi.org/10.1145/1985362.1985366},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1985362.1985366}}

@article{Yamashita:2013c,
	Author = {Yamashita, Aiko and Moonen, Leon},
	Date-Added = {2019-05-07 00:16:50 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/icse.2013.6606614},
	Isbn = {9781467330732},
	Journal = {2013 35th International Conference on Software Engineering (ICSE)},
	Publisher = {IEEE},
	Title = {Exploring the impact of inter-smell relations on software maintainability: An empirical study},
	Url = {http://dx.doi.org/10.1109/ICSE.2013.6606614},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSE.2013.6606614},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icse.2013.6606614}}

@article{Schumacher:2010,
	Author = {Schumacher, Jan and Zazworka, Nico and Shull, Forrest and Seaman, Carolyn and Shaw, Michele},
	Date-Added = {2019-05-07 00:15:43 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1145/1852786.1852797},
	Isbn = {9781450300391},
	Journal = {Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement - ESEM '10},
	Publisher = {ACM Press},
	Title = {Building empirical support for automated code smell detection},
	Url = {http://dx.doi.org/10.1145/1852786.1852797},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1852786.1852797}}

@article{Santos:2013,
	Author = {Santos, Jos{\'e} A. M. and de Mendon{\c c}a, Manoel G. and Silva, Carlos V. A.},
	Date-Added = {2019-05-07 00:15:10 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1145/2460999.2461007},
	Isbn = {9781450318488},
	Journal = {Proceedings of the 17th International Conference on Evaluation and Assessment in Software Engineering - EASE '13},
	Publisher = {ACM Press},
	Title = {An exploratory study to investigate the impact of conceptualization in god class detection},
	Url = {http://dx.doi.org/10.1145/2460999.2461007},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2460999.2461007}}

@article{Olbrich:2009,
	Author = {Olbrich, Steffen and Cruzes, Daniela S. and Basili, Victor and Zazworka, Nico},
	Date-Added = {2019-05-07 00:14:33 +0100},
	Date-Modified = {2020-01-28 14:22:26 +0100},
	Doi = {10.1109/esem.2009.5314231},
	Isbn = {9781424448425},
	Journal = {2009 3rd International Symposium on Empirical Software Engineering and Measurement},
	Publisher = {IEEE},
	Title = {The evolution and impact of code smells: A case study of two open source systems},
	Url = {http://dx.doi.org/10.1109/ESEM.2009.5314231},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ESEM.2009.5314231},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/esem.2009.5314231}}
