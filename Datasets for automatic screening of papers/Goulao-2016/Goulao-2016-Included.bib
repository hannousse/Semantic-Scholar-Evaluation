%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Salima Yahiouche at 2020-10-24 19:42:07 +0100 


%% Saved with string encoding Unicode (UTF-8) 



@article{Yue:2010,
	Abstract = {Model transformation is one of the basic principles of Model Driven Architecture. To build a software system, a sequence of transformations is performed, starting from requirements and ending with implementation. However, requirements are mostly in the form of text, but not a model that can be easily understood by computers; therefore, automated transformations from requirements to analysis models are not easy to achieve. The overall objective of this systematic review is to examine existing literature works that transform textual requirements into analysis models, highlight open issues, and provide suggestions on potential directions of future research. The systematic review led to the analysis of 20 primary studies (16 approaches) obtained after a carefully designed procedure for selecting papers published in journals and conferences from 1996 to 2008 and Software Engineering textbooks. A conceptual framework is designed to provide common concepts and terminology and to define a unified transformation process. This facilitates the comparison and evaluation of the reviewed papers.},
	Author = {Yue, Tao and Briand, Lionel C. and Labiche, Yvan},
	Date-Added = {2019-05-13 16:32:22 +0100},
	Date-Modified = {2020-10-20 22:33:11 +0100},
	Doi = {10.1007/s00766-010-0111-y},
	Issn = {1432-010X},
	Journal = {Requirements Engineering},
	Keywords = {Systematic review ;Requirements; Analysis model ;Transformation ;Traceability; Natural language},
	Number = {2},
	Pages = {75--99},
	Publisher = {Springer Nature},
	Title = {A systematic review of transformation approaches between user requirements and analysis models},
	Url = {http://dx.doi.org/10.1007/s00766-010-0111-y},
	Volume = {16},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s00766-010-0111-y}}

@article{Szvetits:2013,
	Abstract = {In the context of software development, models provide an abstract representation of a software system or a part of it. In the software development process, they are primarily used for documentation and communication purposes in analysis, design, and implementation activities. Model-Driven Engineering (MDE) further increases the importance of models, as in MDE models are not only used for documentation and communication, but as central artefacts of the software development process. Various recent research approaches take the idea of using models as central artefacts one step further by using models at runtime to cope with dynamic aspects of ever-changing software and its environment. In this article, we analyze the usage of models at runtime in the existing research literature using the Systematic Literature Review (SLR) research method. The main goals of our SLR are building a common classification and surveying the existing approaches in terms of objectives, techniques, architectures, and kinds of models used in these approaches. The contribution of this article is to provide an overview and classification of current research approaches using models at runtime and to identify research areas not covered by models at runtime so far.

},
	Author = {Szvetits, Michael and Zdun, Uwe},
	Date-Added = {2019-05-13 16:31:29 +0100},
	Date-Modified = {2020-10-20 22:15:03 +0100},
	Doi = {10.1007/s10270-013-0394-9},
	Issn = {1619-1374},
	Journal = {Software & Systems Modeling},
	Keywords = {Models;Runtime;Literature review},
	Number = {1},
	Pages = {31--69},
	Publisher = {Springer Nature},
	Title = {Systematic literature review of the objectives, techniques, kinds, and architectures of models at runtime},
	Url = {http://dx.doi.org/10.1007/s10270-013-0394-9},
	Volume = {15},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s10270-013-0394-9}}

@article{Santiago:2012,
	Abstract = {Context
Model-Driven Engineering provides a new landscape for dealing with traceability in software development.
Objective
Our goal is to analyze the current state of the art in traceability management in the context of Model-Driven Engineering.
Method
We use the systematic literature review based on the guidelines proposed by Kitchenham. We propose five research questions and six quality assessments.
Results
Of the 157 relevant studies identified, 29 have been considered primary studies. These studies have resulted in 17 proposals.
Conclusion
The evaluation shows that the most addressed operations are storage, CRUD and visualization, while the most immature operations are exchange and analysis traceability information.},
	Author = {Iv{\'a}n Santiago and {\'A}lvaro Jim{\'e}nez and Juan Manuel Vara and Valeria De Castro and Ver{\'o}nica A. Bollati and Esperanza Marcos},
	Date-Added = {2019-05-13 16:30:43 +0100},
	Date-Modified = {2019-09-01 17:59:47 +0100},
	Doi = {10.1016/j.infsof.2012.07.008},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Traceability, Model-Driven Engineering, Systematic literature review},
	Note = {Special Section on Software Reliability and Security},
	Number = {12},
	Pages = {1340 - 1356},
	Title = {Model-Driven Engineering as a new landscape for traceability management: A systematic literature review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584912001346},
	Volume = {54},
	Year = {2012},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584912001346},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2012.07.008}}

@article{Nguyen:2013,
	Abstract = {To face continuously growing security threats and requirements, sound methodologies for constructing secure systems are required. In this context, Model-Driven Security (MDS) has emerged since more than a decade ago as a specialized Model-Driven Engineering approach for supporting the development of secure systems. MDS aims at improving the productivity of the development process and quality of the resulting secure systems, with models as the main artifact. This paper presents how we systematically examined existing published work in MDS and its results. The systematic review process, which is based on a formally designed review protocol, allowed us to identify, classify, and evaluate different MDS approaches. To be more specific, from thousands of relevant papers found, a final set of the most relevant MDS publications has been identified, strictly selected, and reviewed. We present a taxonomy for MDS, which is used to synthesize data in order to classify and evaluate the selected MDS approaches. The results draw a wide picture of existing MDS research showing the current status of the key aspects in MDS as well as the identified most relevant MDS approaches. We discuss the main limitations of the existing MDS approaches and suggest some potential research directions based on these insights.},
	Author = {Nguyen, Phu H. and Klein, Jacques and Le Traon, Yves and Kramer, Max E.},
	Date-Added = {2019-05-13 16:29:57 +0100},
	Date-Modified = {2020-10-24 19:40:50 +0100},
	Doi = {10.1109/apsec.2013.64},
	Isbn = {9781479921430},
	Journal = {2013 20th Asia-Pacific Software Engineering Conference (APSEC)},
	Keywords = {systematic review ; survey ;model-driven security ;model-driven;security;model;model transformations},
	Pages = {432-441},
	Publisher = {IEEE},
	Title = {A Systematic Review of Model-Driven Security},
	Url = {http://dx.doi.org/10.1109/APSEC.2013.64},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/APSEC.2013.64},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/apsec.2013.64}}

@article{Graciano_Neto:2014,
	Abstract = {Software-intensive systems have become increasingly large and complex and new techniques and methodologies are necessary to deal with such complexity. Model-Driven Development (MDD) has been used to deal with complex scenarios, since software models, despite details, facilitate the visualization of the whole. Moreover, MDD has been widely recognized as a way to assure quality, reducing time and effort, and making possible the automatic transformation of models to generate source code. In this direction, software-intensive Systems-of-Systems (SoS) is a class of software systems that have emerged over the iminence of large systems which have a high-level of complexity. Considering the success of MDD in other areas, we decided to investigate how MDD has been used in the context of SoS. This paper presents results of a Systematic Literature Review conducted to scrutinize and bring to light the state of the art in the field of MDD for SoS. Besides that, we discuss future research directions and perspectives, aiming at contributing to the development of SoS.},
	Author = {Graciano Neto, Valdemar Vicente and Guessi, Milena and Oliveira, Lucas Bueno R. and Oquendo, Flavio and Nakagawa, Elisa Yumi},
	Date-Added = {2019-05-13 16:28:06 +0100},
	Date-Modified = {2020-10-24 19:41:46 +0100},
	Doi = {10.1145/2642803.2642825},
	Isbn = {9781450327787},
	Journal = {Proceedings of the 2014 European Conference on Software Architecture Workshops - ECSAW '14},
	Keywords = {Model-Driven Development; System-of-Systems; Software Generation},
	Pages = {8},
	Publisher = {ACM Press},
	Title = {Investigating the Model-Driven Development for Systems-of-Systems},
	Url = {http://dx.doi.org/10.1145/2642803.2642825},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2642803.2642825}}

@article{Mohagheghi:2009,
	Abstract = {More attention is paid to the quality of models along with the growing importance of modelling in software development. We performed a systematic review of studies discussing model quality published since 2000 to identify what model quality means and how it can be improved. From forty studies covered in the review, six model quality goals were identified; i.e., correctness, completeness, consistency, comprehensibility, confinement and changeability. We further present six practices proposed for developing high-quality models together with examples of empirical evidence. The contributions of the article are identifying and classifying definitions of model quality and identifying gaps for future research.},
	Author = {Parastoo Mohagheghi and Vegard Dehlen and Tor Neple},
	Date-Added = {2019-05-13 16:26:50 +0100},
	Date-Modified = {2019-09-01 17:59:47 +0100},
	Doi = {10.1016/j.infsof.2009.04.004},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Systematic review, Modelling, Model quality, Model-driven development, UML},
	Note = {Quality of UML Models},
	Number = {12},
	Pages = {1646 - 1669},
	Title = {Definitions and approaches to model quality in model-based software development -- A review of literature},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584909000457},
	Volume = {51},
	Year = {2009},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584909000457},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2009.04.004}}

@article{Mohagheghi:2008,
	Abstract = {Model-Driven Engineering (MDE) has been promoted as a solution to handle the complexity of software development by raising the abstraction level and automating labor-intensive and error-prone tasks. However, few efforts have been made at collecting evidence to evaluate its benefits and limitations, which is the subject of this review. We searched several publication channels in the period 2000 to June 2007 for empirical studies on applying MDE in industry, which produced 25 papers for the review. Our findings include industry motivations for investigating MDE and the different domains it has been applied to. In most cases the maturity of third-party tool environments is still perceived as unsatisfactory for large-scale industrial adoption. We found reports of improvements in software quality and of both productivity gains and losses, but these reports were mainly from small-scale studies. There are a few reports on advantages of applying MDE in larger projects, however, more empirical studies and detailed data are needed to strengthen the evidence. We conclude that there is too little evidence to allow generalization of the results at this stage.},
	Author = {Mohagheghi, Parastoo and Dehlen, Vegard},
	Date-Added = {2019-05-13 16:24:50 +0100},
	Date-Modified = {2020-10-20 22:35:45 +0100},
	Doi = {10.1007/978-3-540-69100-6_31},
	Isbn = {9783540691006},
	Journal = {Lecture Notes in Computer Science},
	Keywords = {Model-driven engineering ;quality; productivity ;evidence},
	Pages = {432--443},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Where Is the Proof? - A Review of Experiences from Applying MDE in Industry},
	Url = {http://dx.doi.org/10.1007/978-3-540-69100-6_31},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-540-69100-6_31}}

@article{Misbhauddin:2013,
	Abstract = {Model-driven engineering, an emerging trend in software engineering, has enabled the use of refactoring to UML models. Numerous approaches to model refactoring, problem detection, consistency management, and tool support to automate and verify refactoring are discussed and distributed across numerous research literatures. This paper provides a systematic overview of existing research in the field of model refactoring. A total of 3,295 articles, related to the field of UML model refactoring, were extracted from well-known electronic databases. A multi-stage selection process was used to ensure proper inclusion of relevant studies for review and analysis. Ninety-four primary studies were eventually selected and analyzed based on a number of different criteria: UML models considered for refactoring, formalisms used to support refactoring at the model level, important to consider when building refactoring tool support, and the effect of refactoring on model quality. The results of this review indicate that UML model refactoring is a highly active area of research. Quite a few quality techniques and approaches have been proposed in this area, but it still has some important open issues and limitations to be addressed in future work.

},
	Author = {Misbhauddin, Mohammed and Alshayeb, Mohammad},
	Date-Added = {2019-05-13 16:23:07 +0100},
	Date-Modified = {2020-10-20 22:13:12 +0100},
	Doi = {10.1007/s10664-013-9283-7},
	Issn = {1573-7616},
	Journal = {Empirical Software Engineering},
	Keywords = {Model refactoring; Model transformation;Systematic literature review;UML},
	Number = {1},
	Pages = {206--251},
	Publisher = {Springer Nature},
	Title = {UML model refactoring: a systematic literature review},
	Url = {http://dx.doi.org/10.1007/s10664-013-9283-7},
	Volume = {20},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s10664-013-9283-7}}

@article{Mehmood:2013,
	Abstract = {Context
Model-driven code generation is being increasingly applied to enhance software development from perspectives of maintainability, extensibility and reusability. However, aspect-oriented code generation from models is an area that is currently underdeveloped.
Objective
In this study we provide a survey of existing research on aspect-oriented modeling and code generation to discover current work and identify needs for future research.
Method
A systematic mapping study was performed to find relevant studies. Classification schemes have been defined and the 65 selected primary studies have been classified on the basis of research focus, contribution type and research type.
Results
The papers of solution proposal research type are in a majority. All together aspect-oriented modeling appears being the most focused area divided into modeling notations and process (36%) and model composition and interaction management (26%). The majority of contributions are methods.
Conclusion
Aspect-oriented modeling and composition mechanisms have been significantly discussed in existing literature while more research is needed in the area of model-driven code generation. Furthermore, we have observed that previous research has frequently focused on proposing solutions and thus there is need for research that validates and evaluates the existing proposals in order to provide firm foundations for aspect-oriented model-driven code generation.},
	Author = {Abid Mehmood and Dayang N.A. Jawawi},
	Date-Added = {2019-05-13 16:22:18 +0100},
	Date-Modified = {2019-09-01 17:59:47 +0100},
	Doi = {10.1016/j.infsof.2012.09.003},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Aspect-oriented software development, Model-driven engineering, Code generation, Systematic map},
	Note = {Special Section: Component-Based Software Engineering (CBSE), 2011},
	Number = {2},
	Pages = {395 - 411},
	Title = {Aspect-oriented model-driven code generation: A systematic mapping study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584912001863},
	Volume = {55},
	Year = {2013},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584912001863},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2012.09.003}}

@article{Malavolta:2014,
	Abstract = {Model-Driven Engineering (MDE) can be considered as the right tool to reduce the complexity of Wireless Sensor Network (WSN) development through its principles of abstraction, separation of concerns, reuse and automation. In this paper we present the results of a systematic mapping study we performed for providing an organized view of existing MDE approaches for designing WSNs. A total number of 780 studies were analysed, among them, we selected 16 papers as primary studies relevant for review. We setup a comparison framework for these studies, and classified them based on a set of common parameters. The main objective of our research is to give an overview about the state-of-the-art of MDE approaches dedicated to WSN design, and finally, discuss emerging challenges that have to be considered in future MDE approaches for engineering WSNs.},
	Author = {Malavolta, Ivano and Muccini, Henry},
	Date-Added = {2019-05-13 16:21:18 +0100},
	Date-Modified = {2020-10-24 19:41:09 +0100},
	Doi = {10.1109/seaa.2014.61},
	Isbn = {9781479957958},
	Journal = {2014 40th EUROMICRO Conference on Software Engineering and Advanced Applications},
	Pages = {149-157},
	Publisher = {IEEE},
	Title = {A Study on MDE Approaches for Engineering Wireless Sensor Networks},
	Url = {http://dx.doi.org/10.1109/SEAA.2014.61},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SEAA.2014.61},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/seaa.2014.61}}

@article{Lucas:2009,
	Abstract = {Information System (IS) development has been beset by consistency problems since its infancy. These problems are greater still in UML software development, and are principally caused by the existence of multiple views (models) for the same system, and may involve potentially contradictory system specifications. Since a considerable amount of work takes place within the scope of model consistency management, this paper presents a systematic literature review (SLR) which was carried out to discover the various current model consistency conceptions, proposals, problems and solutions provided. To do this, a total of 907 papers related to UML model consistency published in literature and extracted from the most relevant scientific sources (IEEE Computer Society, ACM Digital Library, Google Scholar, ScienceDirect, and the SCOPUS Database) were considered, of which 42 papers were eventually analyzed. This systematic literature review resulted in the identification of the current state-of-the-art with regard to UML model consistency management research along with open issues, trends and future research within this scope. A formal approach for the handling of inconsistency problems which fulfils the identified limitations is also briefly presented.},
	Author = {Francisco J. Lucas and Fernando Molina and Ambrosio Toval},
	Date-Added = {2019-05-13 16:20:22 +0100},
	Date-Modified = {2019-09-01 17:59:47 +0100},
	Doi = {10.1016/j.infsof.2009.04.009},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {UML, Model consistency, Systematic literature review},
	Note = {Quality of UML Models},
	Number = {12},
	Pages = {1631 - 1645},
	Title = {A systematic review of UML model consistency management},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584909000433},
	Volume = {51},
	Year = {2009},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584909000433},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2009.04.009}}

@inproceedings{Loniewski:2010,
	Abstract = {Model-Driven Development (MDD) emphasizes the use of models at a higher abstraction level in the software development process and argues in favor of automation via model execution, transformation, and code generation. However, one current challenge is how to manage requirements during this process whilst simultaneously stressing the benefits of automation. This paper presents a systematic review of the current use of requirements engineering techniques in MDD processes and their actual automation level. 72 papers from the last decade have been reviewed from an initial set of 884 papers. The results show that although MDD techniques are used to a great extent in platform-independent models, platform-specific models, and at code level, at the requirements level most MDD approaches use only partially defined requirements models or even natural language. We additionally identify several research gaps such as a need for more efforts to explicitly deal with requirements traceability and the provision of better tool support.},
	Address = {Berlin, Heidelberg},
	Author = {Loniewski, Grzegorz and Insfran, Emilio and Abrah{\~a}o, Silvia},
	Booktitle = {Model Driven Engineering Languages and Systems},
	Date-Added = {2019-05-13 16:19:47 +0100},
	Date-Modified = {2020-10-20 22:34:08 +0100},
	Doi = {10.1007/978-3-642-16129-2_16},
	Editor = {Petriu, Dorina C. and Rouquette, Nicolas and Haugen, {\O}ystein},
	Isbn = {978-3-642-16129-2},
	Keywords = {model-driven development ;requirements engineering ;systematic review},
	Pages = {213--227},
	Publisher = {Springer Berlin Heidelberg},
	Title = {A Systematic Review of the Use of Requirements Engineering Techniques in Model-Driven Development},
	Year = {2010},
	Bdsk-Url-1 = {https://doi.org/10.1007/978-3-642-16129-2_16}}

@article{Jensen:2011,
	Abstract = {Model driven development (MDD) is considered a promising approach for software development. In this paper the results of a systematic survey is reported to identify the state-of-the-art within the topic of security in model driven development, with a special focus on finding empirical studies. We provide an introduction to the major secure MDD initiatives, but our survey shows that there is a lack of empirical work on the topic. We conclude that better standardisation initiatives and more empirical research in the field is necessary before it can be considered mature.},
	Author = {Jensen, Jostein and Jaatun, Martin Gilje},
	Date-Added = {2019-05-13 16:17:28 +0100},
	Date-Modified = {2020-10-24 19:40:08 +0100},
	Doi = {10.1109/ares.2011.110},
	Isbn = {9781457709791},
	Journal = {2011 Sixth International Conference on Availability, Reliability and Security},
	Keywords = {MDD;MDA;security;survey},
	Pages = {704-709},
	Publisher = {IEEE},
	Title = {Security in Model Driven Development: A Survey},
	Url = {http://dx.doi.org/10.1109/ARES.2011.110},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ARES.2011.110},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ares.2011.110}}

@inproceedings{Hansson:2014,
	Abstract = {Since the launch of the Agile Manifesto there has been nu- merous propositions in how to combine agile practices with Model-driven Development. Ideally the combination would give the benefits of agile -- e.g. rapid response to changes and shorter lead times -- with the promises of Model-driven development -- such as high-level designs and automa- tion. A commonality among the proposals is that they lack in empirical evaluation. Our contribution is a systematic literature review to find out to what experiences there are of Model-driven Agile Development, MAD, from an empirical context. Among our conslusions is that MAD is sitll an immature research area and that more experience reports from industry are needed before we can claim to have understood the possibilities and drawbacks of MAD.},
	Author = {Sebastian Hansson and Yu Zhao and H{\aa}kan Burden},
	Booktitle = {CEUR Workshop Proceedings of the 3rd Workshop on Extreme Modeling, XM@MoDELS},
	Date-Added = {2019-05-13 16:14:35 +0100},
	Date-Modified = {2020-10-20 22:05:54 +0100},
	Keywords = {Systematic literature review; Agile practices; Model-driven development},
	Pages = {2-11},
	Title = {How MAD are we? Empirical Evidence for Model-driven Agile Development},
	Volume = {1239},
	Year = {2014}}

@article{Gonzalez:2014,
	Abstract = {Context
Model-driven Engineering (MDE) promotes the utilization of models as primary artifacts in all software engineering activities. Therefore, mechanisms to ensure model correctness become crucial, specially when applying MDE to the development of software, where software is the result of a chain of (semi)automatic model transformations that refine initial abstract models to lower level ones from which the final code is eventually generated. Clearly, in this context, an error in the model/s is propagated to the code endangering the soundness of the resulting software. Formal verification of software models is a promising approach that advocates the employment of formal methods to achieve model correctness, and it has received a considerable amount of attention in the last few years.
Objective
The objective of this paper is to analyze the state of the art in the field of formal verification of models, restricting the analysis to those approaches applied over static software models complemented or not with constraints expressed in textual languages, typically the Object Constraint Language (OCL).
Method
We have conducted a Systematic Literature Review (SLR) of the published works in this field, describing their main characteristics.
Results
The study is based on a set of 48 resources that have been grouped in 18 different approaches according to their affinity. For each of them we have analyzed, among other issues, the formalism used, the support given to OCL, the correctness properties addressed or the feedback yielded by the verification process.
Conclusions
One of the most important conclusions obtained is that current model verification approaches are strongly influenced by the support given to OCL. Another important finding is that in general, current verification tools present important flaws like the lack of integration into the model designer tool chain or the lack of efficiency when verifying large, real-life models.},
	Author = {Carlos A. Gonz{\'a}lez and Jordi Cabot},
	Date-Added = {2019-05-13 16:12:35 +0100},
	Date-Modified = {2019-09-01 17:59:47 +0100},
	Doi = {10.1016/j.infsof.2014.03.003},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {MDE, Formal verification, OCL, Systematic literature review},
	Number = {8},
	Pages = {821 - 838},
	Title = {Formal verification of static software models in MDE: A systematic review},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584914000627},
	Volume = {56},
	Year = {2014},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584914000627},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2014.03.003}}

@article{Giraldo:2015,
	Abstract = {[Context and motivation] The Model-Driven Engineering (MDE) paradigm remains an active niche in information systems engineering and research. Given their primary role, assuring the quality of models and modelling languages is crucial. In a previous literature review, we have confirmed that there exist different conceptions on model and modelling language quality. [Question/problem] Also, many approaches tackle a narrow perspective and practitioners often feel that such practices burden them with extra effort. A wider overview of the field is needed, taking into account the constraining and pressing conditions of industrial practice. [Principal ideas/results] This paper recalls the essence of, current trends and pitfalls of modelling language quality evaluation within MDE. Some of the current unsolved issues are related to a growing system complexity, evaluating the quality of a complementary set of languages, the need to bring model transformations in the picture, etc. [Contribution] Through this evaluation work, we define a research agenda that reveals the main challenges in modelling language quality evaluation in the context of MDE.},
	Author = {Giraldo, Faber D. and Espana, Sergio and Giraldo, William J. and Pastor, Oscar},
	Date-Added = {2019-05-13 16:11:41 +0100},
	Date-Modified = {2020-10-24 19:42:03 +0100},
	Doi = {10.1109/rcis.2015.7128864},
	Isbn = {9781467366304},
	Journal = {2015 IEEE 9th International Conference on Research Challenges in Information Science (RCIS)},
	Keywords = {Modelling language quality; Model-Driven Engineering; model quality evaluation issues; open challenges; research roadmap},
	Pages = {64-69},
	Publisher = {IEEE},
	Title = {Modelling language quality evaluation in model-driven information systems engineering: A roadmap},
	Url = {http://dx.doi.org/10.1109/RCIS.2015.7128864},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/RCIS.2015.7128864},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/rcis.2015.7128864}}

@article{Giraldo:2014,
	Abstract = {The Model-Driven Engineering (MDE) research must manage a diversity of conceptions despite the global truth about the use of conceptual models as one way for representing and managing the development of complex information systems. Due to this diversity of conceptions and the multiple MDE compliance interpretations, a pletora of definitions about quality in models are emerging, each one tackling specific dimensions involved in MDE projects. In order to explore a consensus about quality in models and model-driven contexts an identification of the previous proposals for quality in models is needed. The main contribution of this work is the identification of representative trends about quality definition in MDE, and therefore, exposing the implications of the multiple quality interpretations as consequence of the diversity in MDE compliance works.},
	Author = {Giraldo, Faber D. and Espana, Sergio and Pastor, Oscar},
	Date-Added = {2019-05-13 16:10:51 +0100},
	Date-Modified = {2020-10-24 19:41:26 +0100},
	Doi = {10.1109/rcis.2014.6861030},
	Isbn = {9781479923939},
	Journal = {2014 IEEE Eighth International Conference on Research Challenges in Information Science (RCIS)},
	Keywords = {Model quality; modelling language quality;software quality; model-driven engineering; systematic review},
	Pages = {1-12},
	Publisher = {IEEE},
	Title = {Analysing the concept of quality in model-driven engineering literature: A systematic review},
	Url = {http://dx.doi.org/10.1109/RCIS.2014.6861030},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/RCIS.2014.6861030},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/rcis.2014.6861030}}

@article{Giachetti:2012,
	Abstract = {Nowadays, the emergence of several model-driven development (MDD) proposals that are related to multiple domains requires the definition of proper interoperability mechanisms that facilitate the reuse of knowledge in the MDD community by taking advantage of already defined modeling languages, tools, and standards. However, there are no recent studies that cover the existent interoperability alternatives in the model-driven domain nor is there a common interoperability framework. This paper confronts this situation through a systematic analysis of recent interoperability approaches that provide relevant features for MDD processes. From this analysis, a general interoperability framework is depicted, which is complemented with our contributions to solve specific interoperability issues. Therefore, we present those aspects that are already covered by existent proposals as well as those pending subjects that, from our point of view, are future challenges in order to achieve a suitable interoperability framework for MDD approaches.},
	Author = {Giachetti, Giovanni and Valverde, Francisco and Marin, Beatriz},
	Date-Added = {2019-05-13 16:09:45 +0100},
	Date-Modified = {2020-10-24 19:40:30 +0100},
	Doi = {10.1109/rcis.2012.6240445},
	Isbn = {9781457719370},
	Journal = {2012 Sixth International Conference on Research Challenges in Information Science (RCIS)},
	Keywords = {Model-Driven Development;Model-Driven Interoperability;Interoperability Framework;Systematic Literature Review},
	Pages = {1-10},
	Publisher = {IEEE},
	Title = {Interoperability for model-driven development: Current state and future challenges},
	Url = {http://dx.doi.org/10.1109/RCIS.2012.6240445},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/RCIS.2012.6240445},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/rcis.2012.6240445}}

@article{Genero:2011,
	Abstract = {The quality of conceptual models directly affects the quality of the understanding of the application domain and the quality of the final software products that are ultimately based on them. This paper describes a systematic literature review (SLR) of peer-reviewed conference and journal articles published from 1997 through 2009 on the quality of conceptual models written in UML, undertaken to understand the state-of-the-art, and then identify any gaps in current research. Six digital libraries were searched, and 266 papers dealing specifically with the quality of UML models were identified and classified into five dimensions: type of model quality, type of evidence, type of research result, type of diagram, and research goal. The results indicate that most research focuses on semantic quality, with relatively little on semantic completeness; as such, this research examines new modeling methods vs. quality frameworks and metrics, as well as quality assurance vs. understanding quality issues. The results also indicate that more empirical research is needed to develop a theoretical understanding of conceptual model quality. The classification scheme developed in this paper can serve as a guide for both researchers and practitioners.},
	Author = {Genero, Marcela and Fern{\'a}ndez-Saez, Ana M. and Nelson, H. James and Poels, Geert and Piattini, Mario},
	Date-Added = {2019-05-13 16:07:56 +0100},
	Date-Modified = {2020-10-20 22:27:08 +0100},
	Doi = {10.4018/jdm.2011070103},
	Issn = {1533-8010},
	Journal = {Journal of Database Management},
	Keywords = {Conceptual Model Quality, Conceptual Models; Software; Systematic Literature Review; Unified Modeling Language (UML)},
	Number = {3},
	Pages = {46--70},
	Publisher = {IGI Global},
	Title = {Research Review: A Systematic Literature Review on the Quality of UML Models},
	Url = {http://dx.doi.org/10.4018/jdm.2011070103},
	Volume = {22},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.4018/jdm.2011070103}}

@article{Dominguez:2012,
	Abstract = {Context
Model Driven Development (MDD) encourages the use of models for developing complex software systems. Following a MDD approach, modelling languages are used to diagrammatically model the structure and behaviour of object-oriented software, among which state-based languages (including UML state machines, finite state machines and Harel statecharts) constitute the most widely used to specify the dynamic behaviour of a system. However, generating code from state machine models as part of the final system constitutes one of the most challenging tasks due to its dynamic nature and because many state machine concepts are not supported by the object-oriented programming languages. Therefore, it is not surprising that such code generation has received great attention over the years.
Objective
The overall objective of this paper is to plot the landscape of published proposals in the field of object oriented code generation from state machine specifications, restricting the search neither to a specific context nor to a particular programming language.
Method
We perform a systematic, accurate literature review of published studies focusing on the object oriented implementation of state machine specifications.
Results
The systematic review is based on a comprehensive set of 53 resources in all, which we have classified into two groups: pattern-based and not pattern-based. For each proposal, we have analysed both the state machine specification elements they support and the means the authors propose for their implementation. Additionally, the review investigates which proposals take into account desirable features to be considered in software development such as maintenance or reusability.
Conclusions
One of the conclusions drawn from the review is that most of the analysed works are based on a software design pattern. Another key finding is that many papers neither support several of the main components of the expressive richness of state machine specifications nor provide an implementation strategy that considers relevant qualitative aspects in software development.},
	Author = {Eladio Domı´nguez and Beatriz P{\'e}rez and {\'A}ngel L. Rubio and Marı´a A. Zapata},
	Date-Added = {2019-05-13 16:06:00 +0100},
	Date-Modified = {2019-09-01 17:59:47 +0100},
	Doi = {10.1016/j.infsof.2012.04.008},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {UML state machines, Finite state machines, Statecharts, Code generation, Systematic review},
	Number = {10},
	Pages = {1045 - 1066},
	Title = {A systematic review of code generation proposals from state machine specifications},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584912000924},
	Volume = {54},
	Year = {2012},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584912000924},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2012.04.008}}

@inproceedings{Delgado:2013,
	Abstract = {Over the last few years organizations have been dealing with the integration of their business processes and software and technologies to support their realization. One challenge is to unite the vision from business and software areas, to design and implement business processes in a way that allows organizations to react agilely to changes. New paradigms have appeared to support this vision: Business Process Management (BPM), Service-Oriented Computing (SOC) and Model-Driven Development (MDD). BPM deals with managing business process lifecycle from modeling, implementation, execution and evaluation to find improvement opportunities. SOC bases the design and implementation of software on services, which are defined to support business processes. MDD focus is on models, allowing the definition of automatic transformation between them along with code generation for different platforms. In this article we present the main principles for the integration of these paradigms as found in a systematic review carried out with the objective of establishing the bases for our research.},
	Address = {Berlin, Heidelberg},
	Author = {Delgado, Andrea and Ruiz, Francisco and de Guzm{\'a}n, Ignacio Garc{\'\i}a-Rodr{\'\i}guez and Piattini, Mario},
	Booktitle = {Software and Data Technologies},
	Date-Added = {2019-05-13 16:05:23 +0100},
	Date-Modified = {2020-10-20 22:31:03 +0100},
	Doi = {10.1007/978-3-642-29578-2_6},
	Editor = {Cordeiro, Jos{\'e} and Virvou, Maria and Shishkov, Boris},
	Isbn = {978-3-642-29578-2},
	Keywords = {Business process management (BPM) ; Service-oriented computing (SOC) ;Model-driven development (MDD) ; Systematic review},
	Pages = {88--108},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Main Principles on the Integration of SOC and MDD Paradigms to Business Processes: A Systematic Review},
	Year = {2010},
	Bdsk-Url-1 = {https://doi.org/10.1007/978-3-642-29578-2_6}}

@article{Budgen:2011,
	Abstract = {The Unified Modeling Language (UML) was created on the basis of expert opinion and has now become accepted as the `standard' object‐oriented modelling notation. Our objectives were to determine how widely the notations of the UML, and their usefulness, have been studied empirically, and to identify which aspects of it have been studied in most detail. We undertook a mapping study of the literature to identify relevant empirical studies and to classify them in terms of the aspects of the UML that they studied. We then conducted a systematic literature review, covering empirical studies published up to the end of 2008, based on the main categories identified. We identified 49 relevant publications, and report the aggregated results for those categories for which we had enough papers--- metrics, comprehension, model quality, methods and tools and adoption. Despite indications that a number of problems exist with UML models, researchers tend to use the UML as a `given' and seem reluctant to ask questions that might help to make it more effective. Copyright {\copyright} 2010 John Wiley & Sons, Ltd.},
	Author = {Budgen, D. and Burn, A. J. and Brereton, O. P. and Kitchenham, B. A. and Pretorius, R.},
	Date-Added = {2019-05-13 16:01:46 +0100},
	Date-Modified = {2020-10-20 22:29:12 +0100},
	Doi = {10.1002/spe.1009},
	Issn = {0038-0644},
	Journal = {Software: Practice and Experience},
	Keywords = {UML; systematic literature review},
	Number = {4},
	Pages = {363--392},
	Publisher = {Wiley},
	Title = {Empirical evidence about the UML: a systematic literature review},
	Url = {http://dx.doi.org/10.1002/spe.1009},
	Volume = {41},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1002/spe.1009}}
