%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Salima Yahiouche at 2020-10-24 21:50:33 +0100 


%% Saved with string encoding Unicode (UTF-8) 



@article{Nilsson:2014,
	Abstract = {While efficient testing arrangements are the key for software companies that are striving for continuous integration, most companies struggle with arranging these highly complex and interconnected testing activities. There is often a lack of an adequate overview of companies' end-to-end testing activities, which tend to lead to problems such as double work, slow feedback loops, too many issues found during post-development, disconnected organizations, and unpredictable release schedules. We report from a multiple-case study in which we explore current testing arrangements at five different software development sites. The outcome of the study is a visualization technique of the testing activities involved from unit and component level to product and release level that support the identification of improvement areas. This model for visualizing the end-to-end testing activities for a system has been used to visualize these five cases and has been validated empirically.},
	Author = {Nilsson, Agneta and Bosch, Jan and Berger, Christian},
	Date-Added = {2019-05-06 11:15:43 +0100},
	Date-Modified = {2020-10-21 22:18:17 +0100},
	Doi = {10.1007/978-3-319-06862-6_12},
	Isbn = {9783319068626},
	Issn = {1865-1356},
	Journal = {Agile Processes in Software Engineering and Extreme Programming},
	Keywords = {continuous integration; software testing; visualization},
	Pages = {171--186},
	Publisher = {Springer International Publishing},
	Title = {Visualizing Testing Activities to Support Continuous Integration: A Multiple Case Study},
	Url = {http://dx.doi.org/10.1007/978-3-319-06862-6_12},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-06862-6_12}}

@article{Rahman:2016,
	Abstract = {Continuous delivery and rapid releases have led to innovative techniques for integrating new features and bug fixes into a new release faster. To reduce the probability of integration conflicts, major software companies, including Google, Facebook and Netflix, use feature toggles to incrementally integrate and test new features instead of integrating the feature only when it's ready. Even after release, feature toggles allow operations managers to quickly disable a new feature that is behaving erratically or to enable certain features only for certain groups of customers. Since literature on feature toggles is surprisingly slim, this paper tries to understand the prevalence and impact of feature toggles. First, we conducted a quantitative analysis of feature toggle usage across 39 releases of Google Chrome (spanning five years of release history). Then, we studied the technical debt involved with feature toggles by mining a spreadsheet used by Google developers for feature toggle maintenance. Finally, we performed thematic analysis of videos and blog posts of release engineers at major software companies in order to further understand the strengths and drawbacks of feature toggles in practice. We also validated our findings with four Google developers. We find that toggles can reconcile rapid releases with long-term feature development and allow flexible control over which features to deploy. However they also introduce technical debt and additional maintenance for developers.},
	Author = {Rahman, Md Tajmilur and Querel, Louis-Philippe and Rigby, Peter C. and Adams, Bram},
	Date-Added = {2019-05-06 10:40:30 +0100},
	Date-Modified = {2020-10-24 20:43:13 +0100},
	Doi = {10.1145/2901739.2901745},
	Isbn = {9781450341868},
	Journal = {Proceedings of the 13th International Workshop on Mining Software Repositories - MSR '16},
	Pages = {201--211},
	Publisher = {ACM Press},
	Title = {Feature toggles: practitioner practices and a case study},
	Url = {http://dx.doi.org/10.1145/2901739.2901745},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2901739.2901745}}

@article{Xu:2014,
	Abstract = {Applications in the cloud are subject to sporadic changes due to operational activities such as upgrade, redeployment, and on-demand scaling. These operations are also subject to interferences from other simultaneous operations. Increasing the dependability of these sporadic operations is non-trivial, particularly since traditional anomaly-detection-based diagnosis techniques are less effective during sporadic operation periods. A wide range of legitimate changes confound anomaly diagnosis and make baseline establishment for "normal" operation difficult. The increasing frequency of these sporadic operations (e.g. due to continuous deployment) is exacerbating the problem. Diagnosing failures during sporadic operations relies heavily on logs, while log analysis challenges stemming from noisy, inconsistent and voluminous logs from multiple sources remain largely unsolved. In this paper, we propose Process Oriented Dependability (POD)-Diagnosis, an approach that explicitly models these sporadic operations as processes. These models allow us to (i) determine orderly execution of the process, and (ii) use the process context to filter logs, trigger assertion evaluations, visit fault trees and perform on-demand assertion evaluation for online error diagnosis and root cause analysis. We evaluated the approach on rolling upgrade operations in Amazon Web Services (A WS) while performing other simultaneous operations. During our evaluation, we correctly detected all of the 160 injected faults, as well as 46 interferences caused by concurrent operations. We did this with 91.95% precision. Of the correctly detected faults, the accuracy rate of error diagnosis is 96.55%.},
	Author = {Xu, Xiwei and Zhu, Liming and Weber, Ingo and Bass, Len and Sun, Daniel},
	Date-Added = {2019-05-06 10:40:13 +0100},
	Date-Modified = {2020-10-24 21:45:02 +0100},
	Doi = {10.1109/dsn.2014.94},
	Isbn = {9781479922338},
	Journal = {2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks},
	Keywords = {system administration;cloud;deployment;process mining;error detection;error diagnosis;DevOps},
	Pages = {252-263},
	Publisher = {IEEE},
	Title = {POD-Diagnosis: Error Diagnosis of Sporadic Operations on Cloud Applications},
	Url = {http://dx.doi.org/10.1109/DSN.2014.94},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/DSN.2014.94},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/dsn.2014.94}}

@article{Eyl:2016,
	Abstract = {Nowadays Continuous Integration (CI) is a very common practice with many advantages and it is used in many software projects. For large software projects checking out the source code, building the product and testing the product build via automated tests during CI can take a long time (e.g. many hours). So the software developers do not get fast feedback about their changes. Often the test report contains the results of many changes from several software developers or the feedback is not accurate enough according to the developer's source code changes. This paper describes a novel approach to reduce the feedback time and to provide test results for only these changes the developer has committed.

},
	Author = {Eyl, Martin and Reichmann, Clements and M{\"u}ller-Glaser, Klaus},
	Date-Added = {2019-05-06 10:39:52 +0100},
	Date-Modified = {2020-10-21 21:42:54 +0100},
	Doi = {10.1007/978-3-319-27033-3_14},
	Isbn = {9783319270333},
	Issn = {1865-1356},
	Journal = {Software Quality. The Future of Systems- and Software Development},
	Keywords = {Continuous integration; Automated testing; Test case prioritization},
	Pages = {199--210},
	Publisher = {Springer International Publishing},
	Title = {Fast Feedback from Automated Tests Executed with the Product Build},
	Url = {http://dx.doi.org/10.1007/978-3-319-27033-3_14},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-27033-3_14}}

@article{Rimba:2015,
	Abstract = {Building secure applications requires significant expertise. Secure platforms and security patterns have been proposed to alleviate this problem. However, correctly applying patterns to use platform features is still highly expertise-dependent. Patterns are informal and there is a gap between them and platform features. We propose the concept of reusable verified design fragments, which package security patterns and platform features and are verified to provide assurance about their security properties. Design fragments can be composed through four primitive tactics. The verification of the composed design against desired security properties is presented in an assurance case. We demonstrate our approach by securing a Continuous Deployment pipeline and show that the tactics are sufficient to compose design fragments into a secure system. Finally, we formally define composition tactics, which are intended to support the development of systems that are secure by construction.},
	Author = {Rimba, Paul and Zhu, Liming and Bass, Len and Kuz, Ihor and Reeves, Steve},
	Date-Added = {2019-05-06 10:39:33 +0100},
	Date-Modified = {2020-10-24 21:48:56 +0100},
	Doi = {10.1109/edcc.2015.12},
	Isbn = {9781467392891},
	Journal = {2015 11th European Dependable Computing Conference (EDCC)},
	Keywords = {security;verification;patterns;composition;assurance},
	Pages = {213-224},
	Publisher = {IEEE},
	Title = {Composing Patterns to Construct Secure Systems},
	Url = {http://dx.doi.org/10.1109/EDCC.2015.12},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/EDCC.2015.12},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/edcc.2015.12}}

@article{Escoffier:2013,
	Abstract = {Pervasive applications present stringent requirements that make their deployment especially challenging. The unknown and fluctuating environment in which pervasive applications are executed makes traditional approaches not suitable. In addition, the current trend to build applications out of separated components and services makes the deployment process inherently continuous and dynamic. In the last years, we developed several industrial pervasive platforms and applications. From these experiences, we identified ten requirements vital to support the continuous deployment of pervasive systems. In this paper we present these requirements and the associated challenges.},
	Author = {Escoffier, Cl{\'e}ment and G{\"u}nalp, Ozan and Lalanda, Philippe},
	Date-Added = {2019-05-06 10:39:11 +0100},
	Date-Modified = {2020-10-21 23:30:51 +0100},
	Doi = {10.1007/978-3-319-06859-6_40},
	Isbn = {9783319068596},
	Issn = {1611-3349},
	Journal = {Service-Oriented Computing -- ICSOC 2013 Workshops},
	Keywords = {Pervasive Computing; Continuous Deployment; Dynamism; Requirements},
	Pages = {457--468},
	Publisher = {Springer International Publishing},
	Title = {Requirements to Pervasive System Continuous Deployment},
	Url = {http://dx.doi.org/10.1007/978-3-319-06859-6_40},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-06859-6_40}}

@inproceedings{Knauss:2015,
	Abstract = {Continuous integration promises advantages in large-scale software development by enabling software development organizations to deliver new functions faster. However, implementing continuous integration in large software development organizations is challenging because of organizational, social and technical reasons. One of the technical challenges is the ability to rapidly prioritize the test cases which can be executed quickly and trigger the most failures as early as possible. In our research we propose and evaluate a method for selecting a suitable set of functional regression tests on system level. The method is based on analysis of correlations between test-case failures and source code changes and is evaluated by combining semi-structured interviews and workshops with practitioners at Ericsson and Axis Communications in Sweden. The results show that using measures of precision and recall, the test cases can be prioritized. The prioritization leads to finding an optimal test suite to execute before the integration.},
	Acmid = {2820684},
	Address = {Piscataway, NJ, USA},
	Author = {Knauss, Eric and Staron, Miroslaw and Meding, Wilhelm and S\"{o}der, Ola and Nilsson, Agneta and Castell, Magnus},
	Booktitle = {Proceedings of the Second International Workshop on Rapid Continuous Software Engineering},
	Date-Added = {2019-05-06 10:38:43 +0100},
	Date-Modified = {2020-10-21 21:58:36 +0100},
	Doi = {10.1109/RCoSE.2015.11},
	Location = {Florence, Italy},
	Numpages = {7},
	Pages = {19--25},
	Publisher = {IEEE Press},
	Series = {RCoSE '15},
	Title = {Supporting Continuous Integration by Code-churn Based Test Selection},
	Url = {http://dl.acm.org/citation.cfm?id=2820678.2820684},
	Year = {2015},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2820678.2820684}}

@inproceedings{Leppanen:2015a,
	Abstract = {Modern software is developed to meet evolving customer needs in a timely fashion. The need for a rapid time-to-market together with changing requirements has led software intensive companies to utilize agile development, where each iteration aims at producing end-user value and change is embraced. In today's post-agile software development world, there is a need for processes and tools that deliver new software to the end-user as fast as possible. The level of adoption of these continuous software engineering practices depends on the product, customers, and the business domain. In this paper, we investigate the benefits gained from implementing a completely continuous delivery workflow using a domain specific productized development infrastructure through a descriptive single case study. Embracing the continuous delivery mindset throughout the development pipeline allows the case customer company to gain fast insight on new business directions and lends the services to live experimentation which in turn adds to end-user value. Up-to-date feedback cycles between all stakeholders all the way from concept design to end-users are offered.},
	Acmid = {2820688},
	Address = {Piscataway, NJ, USA},
	Author = {Lepp\"{a}nen, Marko and Kilamo, Terhi and Mikkonen, Tommi},
	Booktitle = {Proceedings of the Second International Workshop on Rapid Continuous Software Engineering},
	Date-Added = {2019-05-06 10:38:03 +0100},
	Date-Modified = {2020-10-22 00:05:13 +0100},
	Doi = {10.1109/RCoSE.2015.14},
	Keywords = {continuous delivery, continuous software engineering, development infrastructure},
	Location = {Florence, Italy},
	Numpages = {7},
	Pages = {34--40},
	Publisher = {IEEE Press},
	Series = {RCoSE '15},
	Title = {Towards Post-agile Development Practices Through Productized Development Infrastructure},
	Url = {http://dl.acm.org/citation.cfm?id=2820678.2820688},
	Year = {2015},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2820678.2820688}}

@article{Gmeiner:2015,
	Abstract = {Companies running an online business need to be able to frequently push new features and bug fixes from development into production. Successful high-performance online companies deliver code changes often several times per day. Their continuous delivery model supports the business needs of the online world. At the same time, however, such practices increase the risk of introducing quality issues and unwanted side effects. Rigorous test automation is therefore a key success factor for continuous delivery. In this paper we describe how automated testing is used in the continuous delivery pipeline of an Austrian online business company. The paper illustrates the complex technical and organizational challenges involved and summarizes the lessons from more than six years of practical experience in establishing and maintaining an effective continuous delivery pipeline.},
	Author = {Gmeiner, Johannes and Ramler, Rudolf and Haslinger, Julian},
	Date-Added = {2019-05-06 10:37:31 +0100},
	Date-Modified = {2020-10-24 21:49:12 +0100},
	Doi = {10.1109/icstw.2015.7107423},
	Isbn = {9781479918850},
	Journal = {2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)},
	Keywords = {automated testing;continuous integration;continuous delivery;continusous deployment;dev ops},
	Pages = {1-6},
	Publisher = {IEEE},
	Title = {Automated testing in the continuous delivery pipeline: A case study of an online company},
	Url = {http://dx.doi.org/10.1109/ICSTW.2015.7107423},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSTW.2015.7107423},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icstw.2015.7107423}}

@article{Dunne:2015,
	Abstract = {Continuous delivery (CD) represents a challenge for software test teams, because of the continuous introduction of new features and feedback from customers. We consider testing in a framework where users are encouraged to report defects through social or other incentive schemes. Using an enterprise dataset, we address the question of which types of defects can best be found in the field, allowing in-house test resources to be refocused. Validation of these touch points ultimately interweaves both customer and business needs. The proposed framework is one which can help small to medium software businesses, which typically have limited resources to test and release software via CD.},
	Author = {Dunne, Jonathan and Malone, David and Flood, Jason},
	Date-Added = {2019-05-06 10:37:06 +0100},
	Date-Modified = {2020-10-24 20:42:13 +0100},
	Doi = {10.1109/cscesm.2015.7331827},
	Isbn = {9781479917907},
	Journal = {2015 Second International Conference on Computer Science, Computer Engineering, and Social Media (CSCESM)},
	Pages = {49-54},
	Publisher = {IEEE},
	Title = {Social testing: A framework to support adoption of continuous delivery by small medium enterprises},
	Url = {http://dx.doi.org/10.1109/CSCESM.2015.7331827},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/CSCESM.2015.7331827},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/cscesm.2015.7331827}}

@article{Smeds:2015,
	Abstract = {As the interest in DevOps continues to grow, there is an increasing need for software organizations to understand how to adopt it successfully. This study has as objective to clarify the concept and provide insight into existing challenges of adopting DevOps. First, the existing literature is reviewed. A definition of DevOps is then formed based on the literature by breaking down the concept into its defining characteristics. We interview 13 subjects in a software company adopting DevOps and, finally, we present 11 impediments for the company's DevOps adoption that were identified based on the interviews.},
	Author = {Smeds, Jens and Nybom, Kristian and Porres, Ivan},
	Date-Added = {2019-05-06 10:36:44 +0100},
	Date-Modified = {2020-10-21 22:14:02 +0100},
	Doi = {10.1007/978-3-319-18612-2_14},
	Isbn = {9783319186122},
	Issn = {1865-1356},
	Journal = {Agile Processes in Software Engineering and Extreme Programming},
	Keywords = {Cloud Service; Cultural Aspect; Service Failure; Software Process Improvement; Continuous Delivery},
	Pages = {166--177},
	Publisher = {Springer International Publishing},
	Title = {DevOps: A Definition and Perceived Adoption Impediments},
	Url = {http://dx.doi.org/10.1007/978-3-319-18612-2_14},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-18612-2_14}}

@article{Gunalp:2015,
	Abstract = {Driven by the emergence of new computing environments, dynamically evolving software systems makes it impossible for developers to deploy software with human-centric processes. Instead, there is an increasing need for automation tools that continuously deploy software into execution, in order to push updates or adapt existing software regarding contextual and business changes. Existing solutions fall short on providing fault-tolerant, reproducible deployments that can scale on heterogeneous environments. In this paper we present Rondo, a tool suite that enables continuous deployment for dynamic, service-oriented applications. At the center of these tools, we propose a deterministic and idem potent deployment process. We provide with Rondo a deployment manager that implements this process and capable of conducting deployments and continuously adapting applications according to the changes in the current target platform. The tool suite also includes a domain-specific language for describing deployment requests. We validate our approach in multiple projects, for provisioning the platform as well as for installing applications and continuous reconfigurations.},
	Author = {Gunalp, Ozan and Escoffier, Clement and Lalanda, Philippe},
	Date-Added = {2019-05-06 10:36:24 +0100},
	Date-Modified = {2020-10-24 21:49:30 +0100},
	Doi = {10.1109/scc.2015.102},
	Isbn = {9781467372817},
	Journal = {2015 IEEE International Conference on Services Computing},
	Keywords = {Dynamism;Continuous Deployment;Service-Oriented Computing},
	Pages = {720-727},
	Publisher = {IEEE},
	Title = {Rondo: A Tool Suite for Continuous Deployment in Dynamic Environments},
	Url = {http://dx.doi.org/10.1109/SCC.2015.102},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SCC.2015.102},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/scc.2015.102}}

@article{Callanan:2016,
	Abstract = {Wotif Group used DevOps principles to recover from the downward spiral of manual release activity that many IT departments face. Its approach involved the idea of "making it easy to do the right thing." By defining the right thing (deployment standards) for development and operations teams and making it easy to adopt, Wotif drastically improved the average release cycle time. This article is part of a theme issue on DevOps.},
	Author = {Callanan, Matt and Spillane, Alexandra},
	Date-Added = {2019-05-06 10:35:49 +0100},
	Date-Modified = {2020-10-21 21:45:00 +0100},
	Doi = {10.1109/ms.2016.66},
	Issn = {1937-4194},
	Journal = {IEEE Software},
	Keywords = {software release;software delivery;software release management and delivery;Internet;e-commerce;DevOps;continuous delivery;continuous deployment;Wotif Group:software development;software engineering},
	Number = {3},
	Pages = {53--59},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {DevOps: Making It Easy to Do the Right Thing},
	Url = {http://dx.doi.org/10.1109/MS.2016.66},
	Volume = {33},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2016.66},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2016.66}}

@article{Savor:2016,
	Abstract = {Continuous deployment is the software engineering practice of deploying many small incremental software updates into production, leading to a continuous stream of 10s, 100s, or even 1,000s of deployments per day. High-profile Internet firms such as Amazon, Etsy, Facebook, Flickr, Google, and Netflix have embraced continuous deployment. However, the practice has not been covered in textbooks and no scientific publication has presented an analysis of continuous deployment.
In this paper, we describe the continuous deployment practices at two very different firms: Facebook and OANDA. We show that continuous deployment does not inhibit productivity or quality even in the face of substantial engineering team and code size growth. To the best of our knowledge, this is the first study to show it is possible to scale the size of an engineering team by 20X and the size of the code base by 50X without negatively impacting developer productivity or software quality. Our experience suggests that top-level management support of continuous deployment is necessary, and that given a choice, developers prefer faster deployment. We identify elements we feel make continuous deployment viable and present observations from operating in a continuous deployment environment.},
	Author = {Savor, Tony and Douglas, Mitchell and Gentili, Michael and Williams, Laurie and Beck, Kent and Stumm, Michael},
	Date-Added = {2019-05-06 10:35:26 +0100},
	Date-Modified = {2020-10-24 20:42:52 +0100},
	Doi = {10.1145/2889160.2889223},
	Isbn = {9781450342056},
	Journal = {Proceedings of the 38th International Conference on Software Engineering Companion - ICSE '16},
	Pages = {21--30},
	Publisher = {ACM Press},
	Title = {Continuous deployment at Facebook and OANDA},
	Url = {http://dx.doi.org/10.1145/2889160.2889223},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2889160.2889223}}

@article{Lwakatare:2016,
	Abstract = {DevOps is a predominant phenomenon in the web domain. Its two core principles emphasize collaboration between software development and operations, and the use of agile principles to manage deployment environments and their configurations. DevOps techniques, such as collaboration and behaviour-driven monitoring, have been used by web companies to facilitate continuous deployment of new functionality to customers. The techniques may also offer opportunities for continuous product improvement when adopted in the embedded systems domain. However, certain characteristics of embedded software development present obstacles for DevOps adoption, and as yet, there is no empirical evidence of its adoption in the embedded systems domain. In this study, we present the challenges for DevOps adoption in embedded systems using a multiple-case study approach with four companies. The contribution of this paper is to introduce the concept of DevOps adoption in the embedded systems domain and then to identify key challenges for the DevOps adoption.},
	Author = {Lwakatare, Lucy Ellen and Karvonen, Teemu and Sauvola, Tanja and Kuvaja, Pasi and Olsson, Helena Holmstrom and Bosch, Jan and Oivo, Markku},
	Date-Added = {2019-05-06 10:34:54 +0100},
	Date-Modified = {2020-10-24 21:50:30 +0100},
	Doi = {10.1109/hicss.2016.671},
	Isbn = {9780769556703},
	Journal = {2016 49th Hawaii International Conference on System Sciences (HICSS)},
	Keywords = {DevOps;continuous deployment;embedded systems},
	Pages = {5437-5446},
	Publisher = {IEEE},
	Title = {Towards DevOps in the Embedded Systems Domain: Why is It So Hard?},
	Url = {http://dx.doi.org/10.1109/HICSS.2016.671},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/HICSS.2016.671},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/hicss.2016.671}}

@article{Elbaum:2014,
	Abstract = {In continuous integration development environments, software engineers frequently integrate new or changed code with the mainline codebase. This can reduce the amount of code rework that is needed as systems evolve and speed up development time. While continuous integration processes traditionally require that extensive testing be performed following the actual submission of code to the codebase, it is also important to ensure that enough testing is performed prior to code submission to avoid breaking builds and delaying the fast feedback that makes continuous integration desirable. In this work, we present algorithms that make continuous integration processes more cost-effective. In an initial pre-submit phase of testing, developers specify modules to be tested, and we use regression test selection techniques to select a subset of the test suites for those modules that render that phase more cost-effective. In a subsequent post-submit phase of testing, where dependent modules as well as changed modules are tested, we use test case prioritization techniques to ensure that failures are reported more quickly. In both cases, the techniques we utilize are novel, involving algorithms that are relatively inexpensive and do not rely on code coverage information -- two requirements for conducting testing cost-effectively in this context. To evaluate our approach, we conducted an empirical study on a large data set from Google that we make publicly available. The results of our study show that our selection and prioritization techniques can each lead to cost-effectiveness improvements in the continuous integration process.},
	Author = {Elbaum, Sebastian and Rothermel, Gregg and Penix, John},
	Date-Added = {2019-05-06 10:34:21 +0100},
	Date-Modified = {2020-10-24 21:45:17 +0100},
	Doi = {10.1145/2635868.2635910},
	Isbn = {9781450330565},
	Journal = {Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering - FSE 2014},
	Keywords = {Regression Testing; Test Case Prioritization; Continuous Integration; Regression Test Selection},
	Pages = {235--245},
	Publisher = {ACM Press},
	Title = {Techniques for improving regression testing in continuous integration development environments},
	Url = {http://dx.doi.org/10.1145/2635868.2635910},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2635868.2635910}}

@article{Hill:2008,
	Abstract = {System execution modeling (SEM) tools provide an effective means to evaluate the quality of service (QoS) of enterprise distributed real-time and embedded (DRE) systems. SEM tools facilitate testing and resolving performance issues throughout the entire development life-cycle, rather than waiting until final system integration. SEM tools have not historically focused on effective testing. New techniques are therefore needed to help bridge the gap between the early integration capabilities of SEM tools and testing so developers can focus on resolving strategic integration and performance issues, as opposed to wrestling with tedious and error-prone low-level testing concerns. This paper provides two contributions to research on using SEM tools to address enterprise DRE system integration challenges. First, we evaluate several approaches for combining continuous integration environments with SEM tools and describe CiCUTS, which combines the CUTS SEM tool with the CruiseControl.NET continuous integration environment. Second, we present a case study that shows how CiCUTS helps reduce the time and effort required to manage and execute integration tests that evaluate QoS metrics for a representative DRE system from the domain of shipboard computing. The results of our case study show that CiCUTS helps developers and testers ensure the performance of an example enterprise DRE system is within its QoS specifications throughout development, instead of waiting until system integration time to evaluate QoS.},
	Author = {Hill, James H. and Schmidt, Douglas C. and Porter, Adam A. and Slaby, John M.},
	Date-Added = {2019-05-06 10:34:03 +0100},
	Date-Modified = {2020-10-24 21:39:21 +0100},
	Doi = {10.1109/ecbs.2008.20},
	Isbn = {0769531415},
	Journal = {15th Annual IEEE International Conference and Workshop on the Engineering of Computer Based Systems (ecbs 2008)},
	Keywords = {continuous integration;integration testing;serialized phasing;system execution modeling},
	Pages = {66-75},
	Publisher = {IEEE},
	Title = {CiCUTS: Combining System Execution Modeling Tools with Continuous Integration Environments},
	Url = {http://dx.doi.org/10.1109/ECBS.2008.20},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ECBS.2008.20},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ecbs.2008.20}}

@article{Huang:2008,
	Abstract = {CIT (continuous integration testing) has been widely studied in the testing research field in order to start some levels of integration test as early as possible. One challenge of CIT lies in how to simulate the behavior of those unavailable components. Existing methods like stud and mock fail to provide the advanced component simulation capabilities required by CIT from perspectives like diversified program artifacts, behavior transitivity, and configurability. This paper proposes a new simulation apparatus, namely surrogate, to address this problem. The surrogate generator generates platform specific code skeleton from definition of the component to be simulated. The generated code communicates with surrogate engine and returns simulated platform specific behaviors. The surrogate engine simulates component behaviors including both output and possible invocation on dependent components. Moreover, it provides platform independent interfaces and configuration model. Early implementations of surrogate generator and surrogate engine are introduced in detail. To validate the value of surrogate technology in CIT, a case study has been carried out with careful analysis. The result shows that this technology really helps identify some bugs at early stage of development.},
	Author = {Huang, He Yuan and Liu, He Hui and Li, Zhong Jie and Zhu, Jun},
	Date-Added = {2019-05-06 10:33:20 +0100},
	Date-Modified = {2020-10-24 21:39:41 +0100},
	Doi = {10.1109/scc.2008.37},
	Isbn = {9780769532837},
	Journal = {2008 IEEE International Conference on Services Computing},
	Keywords = {Continuous integration testing;service oriented archi-tecture;simulation},
	Pages = {223-230},
	Publisher = {IEEE},
	Title = {Surrogate: A Simulation Apparatus for Continuous Integration Testing in Service Oriented Architecture},
	Url = {http://dx.doi.org/10.1109/SCC.2008.37},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SCC.2008.37},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/scc.2008.37}}

@inproceedings{Nimmer:2006,
	Abstract = {Software testing is vital for the success of any SDR engineering organization, given the complexity and reliability requirements of radio communications. At Vanu, Inc. all waveforms under development are tested 24 hours a day by an automated system. The test system has been running continuously since 2002. In that time it has evolved in sophistication and become an integral part of the company's software engineering methodology. As soon as an engineer checks a new software version into the code repository, the automated test system checks it out, compiles versions of all derived and inter-operating software, and commences testing. Test results are reported continuously to all interested members of the engineering team via web-based reports and an online chat room. Since Vanu waveforms are entirely implemented on general purpose processors using standard operating systems, the tests can run on standard servers without loss of fidelity. A radio channel simulator enables end-to-end testing of communication among multiple servers connected by Ethernet. Since our radio heads exchange digital samples with the baseband processing server via Ethernet, inserting the simulator rather than actual radio hardware is fully transparent to the software under test. This paper describes the architecture of the test system and the design of its major components. Synergies with aspects of the Vanu, Inc. SDR design approach are highlighted.},
	Author = {Jeremy Nimmer and Nimmer, Jeremy and Fallik, Brian and Martin, Nick and Chapin, John},
	Booktitle = {Software Defined Radio Technical Conference},
	Date-Added = {2019-05-06 10:32:50 +0100},
	Date-Modified = {2020-10-24 20:40:40 +0100},
	Doi = {10.1.1.118.5366},
	Pages = {6},
	Title = {CONTINUOUS AUTOMATED TESTING OF SDR SOFTWARE},
	Url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.118.5366},
	Year = {2006},
	Bdsk-Url-1 = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.118.5366},
	Bdsk-Url-2 = {https://doi.org/10.1.1.118.5366}}

@article{Bachmann:2012,
	Abstract = {The essence of stability in software development is the ability to produce quality software with infrastructure that will meet long-term business goals. The essence of rapid and agile development is the ability to deliver capabilities quickly based on customer priorities. Stability often requires cross-functional analysis and infrastructure support that will build foundational technology for the capabilities to stand on, which takes time and resources. But today's organizations must attend to both agility and enduring design. This article presents three tactics that support rapid and agile stability: aligning feature-based development and system decomposition, creating an architectural runway, and using matrix teams.},
	Author = {Bachmann, Felix and Nord, Robert and Ozkaya, Ipek},
	Bdsk-Color = {4211277567},
	Date-Added = {2019-05-06 10:31:55 +0100},
	Date-Modified = {2020-10-21 23:42:29 +0100},
	Journal = {RAPID AND AGILE STABILITY},
	Pages = {20-25},
	Title = {Architectural tactics to support rapid and agile stability},
	Volume = {25},
	Year = {2012}}

@article{Rogers:2004,
	Abstract = {Of all the Extreme Programming practices, continuous integration is one of the least controversial -- the benefits of an integrated, streamlined build process is something that software developers immediately recognise. However, as a project scales up in size and complexity, continuous integration can become increasingly hard to practice successfully. By focussing on the problems associated with a growing project, this paper describes a variety of strategies for successfully scaling continuous integration.},
	Author = {Rogers, R. Owen},
	Date-Added = {2019-05-06 10:28:21 +0100},
	Date-Modified = {2020-10-22 00:03:00 +0100},
	Doi = {10.1007/978-3-540-24853-8_8},
	Isbn = {9783540248538},
	Issn = {1611-3349},
	Journal = {Lecture Notes in Computer Science},
	Keywords = {Integration Process; Unit Test; Acceptance Test; Integration Server; Code Base},
	Pages = {68--76},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Scaling Continuous Integration},
	Url = {http://dx.doi.org/10.1007/978-3-540-24853-8_8},
	Year = {2004},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-540-24853-8_8}}

@article{Marschall:2007,
	Abstract = {This paper tells the story of how the team managed to speed up delivery whilst raising quality at the same time, conject used to release complete modules of their Internet platform once every six months. Customers were forced to wait for months to get access to new features. Once they arrived, the big bang releases disrupted the user experience due to bugs lurking in the new software. Despite what seemed to be an impossible task, the team successfully transformed their software development process to deliver a stable and continuous flow of small releases. Now features are delivered to customers more quickly and with much higher quality.},
	Author = {Marschall, Matthias},
	Date-Added = {2019-05-06 10:28:00 +0100},
	Date-Modified = {2020-10-24 20:41:16 +0100},
	Doi = {10.1109/agile.2007.64},
	Isbn = {0769528724},
	Journal = {AGILE 2007 (AGILE 2007)},
	Pages = {395-400},
	Publisher = {IEEE},
	Title = {Transforming a Six Month Release Cycle to Continuous Flow},
	Url = {http://dx.doi.org/10.1109/AGILE.2007.64},
	Year = {2007},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/AGILE.2007.64},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/agile.2007.64}}

@article{Feitelson:2013,
	Abstract = {Internet companies such as Facebook operate in a "perpetual development" mindset. This means that the website continues to undergo development with no predefined final objective, and that new developments are deployed so that users can enjoy them as soon as they're ready. To support this, Facebook uses both technical approaches such as peer review and extensive automated testing, and a culture of personal responsibility.},
	Author = {Feitelson, Dror G. and Frachtenberg, Eitan and Beck, Kent L.},
	Date-Added = {2019-05-06 10:27:38 +0100},
	Date-Modified = {2020-10-21 23:35:25 +0100},
	Doi = {10.1109/mic.2013.25},
	Issn = {1089-7801},
	Journal = {IEEE Internet Computing},
	Keywords = {perpetual development;devops;web development},
	Number = {4},
	Pages = {8--17},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Development and Deployment at Facebook},
	Url = {http://dx.doi.org/10.1109/MIC.2013.25},
	Volume = {17},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MIC.2013.25},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/mic.2013.25}}

@article{Roberts:2004,
	Abstract = {Continuous Integration (CI) is a well-established practice which allows us as developers to experience fewer development conflicts and achieve rapid feedback on progress. CI by itself though becomes hard to scale as projects get large or have independent deliverables. Enterprise Continuous Integration (ECI) is an extension to CI that helps us regain the benefits of CI when working with separately developed, yet interdependent modules. We show how to develop an ECI process based upon binary dependencies, giving examples using existing .NET tools.},
	Author = {Roberts, Mike},
	Date-Added = {2019-05-06 10:27:13 +0100},
	Date-Modified = {2020-10-22 00:03:57 +0100},
	Doi = {10.1007/978-3-540-24853-8_22},
	Isbn = {9783540248538},
	Issn = {1611-3349},
	Journal = {Lecture Notes in Computer Science},
	Keywords = {Continuous integration; scalability; tools and techniques; .NET},
	Pages = {194--201},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Enterprise Continuous Integration Using Binary Dependencies},
	Url = {http://dx.doi.org/10.1007/978-3-540-24853-8_22},
	Year = {2004},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-540-24853-8_22}}

@article{Bellomo:2015,
	Abstract = {Agile teams strive to balance short-term feature development with longer-term quality concerns. These evolutionary approaches often hit a "complexity wall"' from the cumulative effects of unplanned changes, resulting in unreliable, poorly performing software. So, the agile community is refocusing on approaches to address architectural concerns. Researchers analyzed quality attribute concerns from 15 years of Architecture Trade-Off Analysis Method data, gathered from 31 projects. Modifiability was the dominant concern across all project types; performance, availability, and interoperability also received considerable attention. For IT projects, a relatively new quality-deployability-emerged as a key concern. The study results provide insights for agile teams allocating architecture-related tasks to iterations. For example, teams can use these results to create checklists for release planning or retrospectives to help assess whether to address a given quality to support future needs. This article is part of a special issue on Software Architecture.},
	Author = {Bellomo, Stephany and Gorton, Ian and Kazman, Rick},
	Date-Added = {2019-05-06 10:26:52 +0100},
	Date-Modified = {2020-10-21 21:50:34 +0100},
	Doi = {10.1109/ms.2015.35},
	Issn = {1937-4194},
	Journal = {IEEE Software},
	Keywords = {architecture evaluation;agile;technical debt;incremental development;modifiability;availability;interoperability;deployability;software development;software engineering},
	Number = {5},
	Pages = {38--45},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Toward Agile Architecture: Insights from 15 Years of ATAM Data},
	Url = {http://dx.doi.org/10.1109/MS.2015.35},
	Volume = {32},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2015.35},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2015.35}}

@article{Laukkanen:2015,
	Abstract = {Continuous integration is an important support mechanism for fast delivery of new features. However, its adoption in industry has often been problematic, partly due to social challenges. However, there is little knowledge of the exact nature of the challenges, and how different stakeholders perceive the need for and adoption of continuous integration. In this paper, we describe how the introduction of continuous integration was perceived by different stakeholders in a R&D program at Ericsson. The case provided a rare opportunity to study the adoption of continuous integration in a large distributed organization. We interviewed 27 stakeholders and found differing perceptions of continuous integration: how suitable it is for the organization, how adoption should be organized, and whether it is possible to achieve sufficient quality through automated testing. These differences of perception were mainly consequences of the geographic distribution. Based on the case study, we propose three guidelines. First, understand that the product architecture has a significant effect on the adoption. However, do not let architectural problems keep you from implementing continuous integration. Second, give the team members sufficient time to overcome the initial learning phase in the adoption. Third, avoid centralizing competencies to individual sites, and invest in cross-site communication.},
	Author = {Laukkanen, Eero and Paasivaara, Maria and Arvonen, Teemu},
	Date-Added = {2019-05-06 10:26:26 +0100},
	Date-Modified = {2020-10-24 21:49:47 +0100},
	Doi = {10.1109/agile.2015.15},
	Isbn = {9781467371537},
	Journal = {2015 Agile Conference},
	Keywords = {continuous integration;adoption;case study},
	Pages = {11-20},
	Publisher = {IEEE},
	Title = {Stakeholder Perceptions of the Adoption of Continuous Integration -- A Case Study},
	Url = {http://dx.doi.org/10.1109/Agile.2015.15},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/Agile.2015.15},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/agile.2015.15}}

@article{Rahman:2015,
	Abstract = {Continuous deployment speeds up the process of existing agile methods, such as Scrum, and Extreme Programming (XP) through the automatic deployment of software changes to end-users upon passing of automated tests. Continuous deployment has become an emerging software engineering process amongst numerous software companies, such as Facebook, Github, Netflix, and Rally Software. A systematic analysis of software practices used in continuous deployment can facilitate a better understanding of continuous deployment as a software engineering process. Such analysis can also help software practitioners in having a shared vocabulary of practices and in choosing the software practices that they can use to implement continuous deployment. The goal of this paper is to aid software practitioners in implementing continuous deployment through a systematic analysis of software practices that are used by software companies. We studied the continuous deployment practices of 19 software companies by performing a qualitative analysis of Internet artifacts and by conducting follow-up inquiries. In total, we found 11 software practices that are used by 19 software companies. We also found that in terms of use, eight of the 11 software practices are common across 14 software companies. We observe that continuous deployment necessitates the consistent use of sound software engineering practices such as automated testing, automated deployment, and code review.},
	Author = {Rahman, Akond Ashfaque Ur and Helms, Eric and Williams, Laurie and Parnin, Chris},
	Date-Added = {2019-05-06 10:23:19 +0100},
	Date-Modified = {2020-10-24 21:50:10 +0100},
	Doi = {10.1109/agile.2015.12},
	Isbn = {9781467371537},
	Journal = {2015 Agile Conference},
	Keywords = {agile;continuous deployment;continuous delivery;industry practices;internet artifacts;follow-up inquiries},
	Pages = {1-10},
	Publisher = {IEEE},
	Title = {Synthesizing Continuous Deployment Practices Used in Software Development},
	Url = {http://dx.doi.org/10.1109/Agile.2015.12},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/Agile.2015.12},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/agile.2015.12}}

@article{Rissanen:2015,
	Abstract = {Delivering value to customers in real-time requires companies to utilize real-time deployment of software to expose features to users faster, and to shorten the feedback loop. This allows for faster reaction and helps to ensure that the development is focused on features providing real value. Continuous delivery is a development practice where the software functionality is deployed continuously to customer environment. Although this practice has been established in some domains such as B2C mobile software, the B2B domain imposes specific challenges. This article presents a case study that is conducted in a medium-sized software company operating in the B2B domain. The objective of this study is to analyze the challenges and benefits of continuous delivery in this domain. The results suggest that technical challenges are only one part of the challenges a company encounters in this transition. The company must also address challenges related to the customer and procedures. The core challenges are caused by having multiple customers with diverse environments and unique properties, whose business depends on the software product. Some customers require to perform manual acceptance testing, while some are reluctant towards new versions. By utilizing continuous delivery, it is possible for the case company to shorten the feedback cycles, increase the reliability of new versions, and reduce the amount of resources required for deploying and testing new releases.},
	Author = {Rissanen, Olli and M{\"u}nch, J{\"u}rgen},
	Date-Added = {2019-05-06 10:22:49 +0100},
	Date-Modified = {2020-10-21 21:48:40 +0100},
	Doi = {10.1007/978-3-319-18612-2_13},
	Isbn = {9783319186122},
	Issn = {1865-1356},
	Journal = {Agile Processes in Software Engineering and Extreme Programming},
	Keywords = {Continuous delivery; Continuous deployment; Development process; B2B; Case study},
	Pages = {154--165},
	Publisher = {Springer International Publishing},
	Title = {Transitioning Towards Continuous Delivery in the B2B Domain: A Case Study},
	Url = {http://dx.doi.org/10.1007/978-3-319-18612-2_13},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-18612-2_13}}

@article{Merson:2013,
	Abstract = {Creating a software architecture is a critical task in the development of software systems. However, the architecture discussed and carefully created is often not entirely followed in the implementation. Unless the architecture is communicated effectively to all developers, divergence between the intended architecture (created by the architect) and the actual architecture (found in the source code) tends to gradually increase. Static analysis tools, which are often used to check coding conventions and best practices, can help. However, the common use of static analysis tools for architecture enforcement has two limitations. One is the fact that design rules specific to a software architecture are not known and hence not enforced by the tool. The other limitation is more of a practical issue: static analysis tools are often integrated to the IDE or to a continuous integration environment; they report violations but the developers may choose to ignore them. This paper reports a successful experience where we addressed these two limitations for a large codebase comprising over 50 Java applications. Using a free open source tool called checkstyle and its Java API, we implemented custom checks for design constraints specified by the architecture of our software systems. In addition, we created a script that executes automatically on the Subversion software configuration management server prior to any code commit operation. This script runs the custom checks and denies the commit operation in case a violation is found. When that happens, the developer gets a clear error message explaining the problem. The architecture team is also notified and can proactively contact the developer to address any lack of understanding of the architecture. This experience report provides technical details of our architecture enforcement approach and recommendations to employ this or similar solutions more effectively.},
	Author = {Merson, Paulo},
	Date-Added = {2019-05-06 10:22:21 +0100},
	Date-Modified = {2020-10-24 21:43:33 +0100},
	Doi = {10.1145/2508075.2508433},
	Isbn = {9781450319959},
	Journal = {Proceedings of the 2013 companion publication for conference on Systems, programming, & applications: software for humanity - SPLASH '13},
	Keywords = {architecture conformance; checkstyle.; software architecture; architecture enforcement; java; static analysis},
	Pages = {153--160},
	Publisher = {ACM Press},
	Title = {Ultimate architecture enforcement custom checks enforced at code-commit time},
	Url = {http://dx.doi.org/10.1145/2508075.2508433},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2508075.2508433}}

@article{Kerzazi:2014,
	Abstract = {Context: Software release teams try to reduce the time needed for the transit of features or bug fixes from the development environment to the production, crossing all the quality gates. However, little is known about the factors that influence the time-to-production and how they might be controlled in order to speed up the release cycles.
Goal: This paper examines step by step the release process of an industrial software organization aiming to identify factors that have a significant impact on the lead time and outcomes of the software releases.
Method: Over 14 months of release data have been analyzed (246 releases from the isolated source code branches to the production environment).
Results: We discuss three dimensions under which a series of factors could be addressed: technical, organizational, and interactional. We present our findings in terms of implications for release process improvements.
Conclusions: Our analyzes reveal that testing is the most time consuming activities (86%) along with the need for more congruence among teams, especially in the context of parallel development.},
	Author = {Kerzazi, Noureddine and Khomh, Foutse},
	Date-Added = {2019-05-06 10:21:53 +0100},
	Date-Modified = {2020-10-24 21:45:33 +0100},
	Doi = {10.1145/2652524.2652589},
	Isbn = {9781450327749},
	Journal = {Proceedings of the 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement - ESEM '14},
	Keywords = {parallel development; rapid release; release cycles; release management; empirical software engineering; lead time; software release; software quality; software process},
	Pages = {1--8},
	Publisher = {ACM Press},
	Title = {Factors impacting rapid releases: An industrial case study},
	Url = {http://dx.doi.org/10.1145/2652524.2652589},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2652524.2652589}}

@article{Liu:2009,
	Abstract = {The quality of service oriented architecture (SOA) solutions is becoming more and more important along with the increasing adoption of SOA. Continuous integration testing (CIT) is an effective technology to discover bugs as early as possible. However, the diversity of programming models used in an SOA solution and the distribution nature of an SOA solution pose new challenges for CIT. Existing testing frameworks more focus on the integration testing of applications developed by a single programming model. In this paper, a unified test framework is proposed to overcome these limitations and enable the CIT of SOA solutions across the whole development lifecycle. This framework is designed following the model driven architecture (MDA). The information of an executable test case is separated into two layers: the behavior layer and the configuration layer. The behavior layer represents the test logic of a test case and is platform independent. The configuration layer contains the platform specific information and is configurable for different programming models. An extensible and pluggable test execution engine is specially designed to execute the integration test cases. A global test case identifier instrumentation approach is used to merge the distributed test case execution traces captured by ITCAM - an IBM integrated management tool. A verification approach supporting Boolean expression and back-end service interaction verification is proposed to verify the test execution result. Initial experiments have shown the effectiveness of this unified test framework.},
	Author = {Liu, Hehui and Li, Zhongjie and Zhu, Jun and Tan, Huafang and Huang, Heyuan},
	Date-Added = {2019-05-06 10:21:26 +0100},
	Date-Modified = {2020-10-24 21:40:19 +0100},
	Doi = {10.1109/icws.2009.28},
	Isbn = {9780769537092},
	Journal = {2009 IEEE International Conference on Web Services},
	Keywords = {continuous integration testing;service oriented architecture},
	Pages = {880-887},
	Publisher = {IEEE},
	Title = {A Unified Test Framework for Continuous Integration Testing of SOA Solutions},
	Url = {http://dx.doi.org/10.1109/ICWS.2009.28},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICWS.2009.28},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icws.2009.28}}

@article{Yuksel:2009,
	Abstract = {We have used CI (continuous integration) and various software testing techniques to achieve a robust C4ISR (command, control, communications, computers, intelligence, surveillance, and reconnaissance) multi-platform system. Because of rapid changes in the C4ISR domain and in the software technology, frequent critical design adjustments and in turn vast code modifications or additions become inevitable. Defect fixes might also incur code changes. These unavoidable code modifications may put a big risk in the reliability of a mission critical system. Also, in order to stay competitive in the C4ISR market, a company must make recurring releases without sacrificing quality. We have designed and implemented an XML driven automated test framework that enabled us developing numerous high quality tests rapidly. While using CI with automated software test techniques, we have aimed at speeding up the delivery of high quality and robust software by decreasing integration procedure, which is one of the main bottleneck points in the industry. This work describes how we have used CI and software test techniques in a large-scaled, multi-platform, multi-language, distributed C4ISR project and what the benefits of such a system are.},
	Author = {Yuksel, H. Mehmet and Tuzun, Eray and Gelirli, Erdogan and Biyikli, Emrah and Baykal, Buyurman},
	Date-Added = {2019-05-06 10:21:04 +0100},
	Date-Modified = {2020-10-24 21:41:14 +0100},
	Doi = {10.1109/iscis.2009.5291914},
	Isbn = {9781424450213},
	Journal = {2009 24th International Symposium on Computer and Information Sciences},
	Keywords = {continuous integration;software test techniques;mission critical systems;robustness;XML driven automated test framework;C4ISR systems;multi-platform testing},
	Pages = {743-748},
	Publisher = {IEEE},
	Title = {Using continuous integration and automated test techniques for a robust C4ISR system},
	Url = {http://dx.doi.org/10.1109/ISCIS.2009.5291914},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ISCIS.2009.5291914},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/iscis.2009.5291914}}

@article{Kim:2009,
	Abstract = {Manual testing is a laborious and time consuming process. In addition, it may not be effective in finding certain defects. Therefore, we introduce an effective framework for automated testing to help solve such problems. The proposed framework helps automate the distribution, execution, and results analysis of test cases. The workflow of tests and test environments are graphically expressed as tables. Many software development and testing practices can be automated and greatly simplified by using this framework. It can also be used to create a Continuous Integration (CI) system by incorporating the automated build tools or CI servers. This paper provides best practices on automated CI solutions using the proposed framework to provide developers and/or testers with a better idea of progress and code quality throughout the project lifecycle so that they can direct their time and expertise to more important, challenging issues.},
	Author = {Kim, Eun Ha and Na, Jong Chae and Ryoo, Seok Moon},
	Date-Added = {2019-05-06 10:20:40 +0100},
	Date-Modified = {2020-10-24 21:41:32 +0100},
	Doi = {10.1109/itng.2009.260},
	Isbn = {9781424437702},
	Journal = {2009 Sixth International Conference on Information Technology: New Generations},
	Keywords = {Test Automation Framework;STAF;Fit;FitNesse;Continuous Integration},
	Pages = {784-789},
	Publisher = {IEEE},
	Title = {Test Automation Framework for Implementing Continuous Integration},
	Url = {http://dx.doi.org/10.1109/ITNG.2009.260},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ITNG.2009.260},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/itng.2009.260}}

@article{Sutherland:2011,
	Abstract = {All-at-once Scrum implementations require total commitment to change, high level management support and aggressive removal of impediments. Several company-wide implementations are known to the authors but none of them had to deal with the complexity of a large, mission-critical, enterprise software product. Pegasystems develops software to manage, automate and optimize a broad array of business processes. In July of 2009 the company deployed over 20 Scrum teams in the U.S. and India within two months. Complexity of languages, frameworks, and tools led to an architecture where continuous integration support for software development teams was impossible without a major upgrade in infrastructure and operations. A virtual Scrum team was formed to avoid "hitting the wall" before this impediment impacted the first Scrum release of the software. Here we describe how a Scrum team engineered a continuous integration environment for hundreds of software developers on two continents within a few weeks.},
	Author = {Sutherland, J and Frohman, R},
	Date-Added = {2019-05-06 10:20:18 +0100},
	Date-Modified = {2020-10-24 20:41:37 +0100},
	Doi = {10.1109/hicss.2011.222},
	Isbn = {9781424496181},
	Journal = {2011 44th Hawaii International Conference on System Sciences},
	Pages = {1-6},
	Publisher = {IEEE},
	Title = {Hitting the Wall: What to Do When High Performing Scrum Teams Overwhelm Operations and Infrastructure},
	Url = {http://dx.doi.org/10.1109/HICSS.2011.222},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/HICSS.2011.222},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/hicss.2011.222}}

@article{Agarwal:2011,
	Abstract = {Hosted software-as-a-service products provide an opportunity to provide consumers with continuous deployment of new features, as opposed to scheduled version upgrades as is the norm for products installed on-premise. In order to exploit this opportunity, a SaaS provider needs to adopt an agile process that is capable of releasing new features rapidly. The SCRUM [5,6] process is ideally suited for this purpose: However, when SCRUM has been used for agile development of an installed product, parallel, overlapping 'sprints' are executed by separate teams, each dealing with short, medium, and longer-term enhancements to the product[3]; with the result that version upgrades are therefore easier to manage. In contrast, in the case of a SAAS product, version upgrades are no longer a constraint, so we can do better. In this paper we describe 'Continuous SCRUM', a variant of Type-C SCRUM, augmented with engineering best practices, in a manner ideally suited for managing SAAS products. In our approach, bug-fixes, minor enhancements, as well as major features are released continuously, on a weekly basis by a single team, in contrast to "Meta-SCRUM" [3]. We also present field data from our experience with using Continuous SCRUM for a hosted platform-as-a-service product for more than two years. Our experience reinforces other recent evidence [11] that rapid, smaller releases are often preferable to infrequent, larger ones. Continuous SCRUM provides a mechanism to achieve and sustain a rapid release cycle, for SAAS products as well as, we believe, for custom applications developed in-house.},
	Author = {Agarwal, Puneet},
	Date-Added = {2019-05-06 10:19:46 +0100},
	Date-Modified = {2020-10-24 21:42:31 +0100},
	Doi = {10.1145/1953355.1953362},
	Isbn = {9781450305594},
	Journal = {Proceedings of the 4th India Software Engineering Conference on - ISEC '11},
	Keywords = {agile process;configuration management; SCRUM; SAAS; PAAS; release management; continuous deployment},
	Pages = {51--60},
	Publisher = {ACM Press},
	Title = {Continuous SCRUM: Agile management of SAAS products},
	Url = {http://dx.doi.org/10.1145/1953355.1953362},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1953355.1953362}}

@article{Pesola:2011,
	Abstract = {The ever-growing market pressure and complex products demand high quality work and effectiveness from software practitioners. This relates also for the methods and tools they use for the development of software-intensive systems. Validation and verification (V&V) are the cornerstones of the overall quality of a system. By performing efficient V&V activities to detect defects during the early phases of development, the developers are able to save time and effort required for fixing them. Tool support is available for all types of V&V activities, especially testing, model checking, syntactic verification, and inspection. In distributed development the role of tools is even more relevant than in single-site development, and tool integration is often imperative for ensuring the effectiveness of work. In this paper, we discuss how a tool integration framework was extended to support early V&V activities via continuous integrations. We find that integrating early V& V supporting tools is feasible and useful, and makes a tool integration framework even more beneficial.},
	Author = {Pesola, Jukka-Pekka and Tanner, Hannu and Eskeli, Juho and Parviainen, Paivi and Bendas, Dan},
	Date-Added = {2019-05-06 10:19:25 +0100},
	Date-Modified = {2020-10-24 21:42:52 +0100},
	Doi = {10.1109/icgse-w.2011.32},
	Isbn = {9781457718397},
	Journal = {2011 IEEE Sixth International Conference on Global Software Engineering Workshop},
	Keywords = {Verfication and Validation;tool integration;V&V tools;global software integration;continuous integration},
	Pages = {95-101},
	Publisher = {IEEE},
	Title = {Integrating Early V&V Support to a GSE Tool Integration Platform},
	Url = {http://dx.doi.org/10.1109/ICGSE-W.2011.32},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICGSE-W.2011.32},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icgse-w.2011.32}}

@article{Jiang:2009,
	Abstract = {In continuous integration, a tight integration of test case prioritization techniques and fault-localization techniques may both expose failures faster and locate faults more effectively. Statistical fault-localization techniques use the execution information collected during testing to locate faults. Executing a small fraction of a prioritized test suite reduces the cost of testing, and yet the subsequent fault localization may suffer. This paper presents the first empirical study to examine the impact of test case prioritization on the effectiveness of fault localization. Among many interesting empirical results, we find that coverage-based and random techniques can be more effective than distribution-based techniques in supporting statistical fault localization.},
	Author = {Jiang, Bo and Zhang, Zhenyu and Tse, T. H. and Chen, T. Y.},
	Date-Added = {2019-05-06 10:18:58 +0100},
	Date-Modified = {2020-10-24 21:41:50 +0100},
	Doi = {10.1109/compsac.2009.23},
	Isbn = {9780769537269},
	Journal = {2009 33rd Annual IEEE International Computer Software and Applications Conference},
	Keywords = {Continuous integration;software process integration;test case prioritization;fault localization},
	Pages = {99-106},
	Publisher = {IEEE},
	Title = {How Well Do Test Case Prioritization Techniques Support Statistical Fault Localization},
	Url = {http://dx.doi.org/10.1109/COMPSAC.2009.23},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/COMPSAC.2009.23},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/compsac.2009.23}}

@inproceedings{Downs:2012,
	Abstract = {We describe the evaluation of a build awareness system that assists agile software development teams to understand current build status and who is responsible for any build breakages. The system uses ambient awareness technologies, providing a separate, easily perceived communication channel distinct from standard team workflow. Multiple system configurations and behaviours were evaluated. An evaluation of the system showed that, while there was no significant change in the proportion of build breakages, the overall number of builds increased substantially, and the duration of broken builds decreased. Team members also reported an increased sense of awareness of, and responsibility for, broken builds and some noted the system dramatically changed their perception of the build process making them more cognisant of broken builds.},
	Acmid = {2337283},
	Address = {Piscataway, NJ, USA},
	Author = {Downs, John and Plimmer, Beryl and Hosking, John G.},
	Booktitle = {Proceedings of the 34th International Conference on Software Engineering},
	Date-Added = {2019-05-06 10:17:59 +0100},
	Date-Modified = {2020-10-21 23:45:30 +0100},
	Doi = {10.1109/ICSE.2012.6227165},
	Isbn = {978-1-4673-1067-3},
	Keywords = {software teams; continuous integration; ambient awareness; build processes; status information},
	Location = {Zurich, Switzerland},
	Numpages = {11},
	Pages = {507--517},
	Publisher = {IEEE Press},
	Series = {ICSE '12},
	Title = {Ambient Awareness of Build Status in Collocated Software Teams},
	Url = {http://dl.acm.org/citation.cfm?id=2337223.2337283},
	Year = {2012},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2337223.2337283}}

@article{Johansen:2012,
	Abstract = {Product line developers must ensure that existing and new features work in all products. Adding to or changing a product line might break some of its features. In this paper, we present a technique for automatic and agile interaction testing for product lines. The technique enables developers to know if features work together with other features in a product line, and it blends well into a process of continuous integration. The technique is evaluated with two industrial applications, testing a product line of safety devices and the Eclipse IDEs. The first case shows how existing test suites are applied to the products of a 2-wise covering array to identify two interaction faults. The second case shows how over 400,000 test executions are performed on the products of a 2-wise covering array using over 40,000 existing automatic tests to identify potential interactions faults.

},
	Author = {Johansen, Martin Fagereng and Haugen, {\O}ystein and Fleurey, Franck and Carlson, Erik and Endresen, Jan and Wien, Tormod},
	Date-Added = {2019-05-06 10:17:18 +0100},
	Date-Modified = {2020-10-21 23:46:48 +0100},
	Doi = {10.1007/978-3-642-34691-0_5},
	Isbn = {9783642346910},
	Issn = {1611-3349},
	Journal = {Lecture Notes in Computer Science},
	Keywords = {Product Lines; Testing; Agile; Continuous Integration ;Automatic; Combinatorial Interaction Testing},
	Pages = {39--54},
	Publisher = {Springer Berlin Heidelberg},
	Title = {A Technique for Agile and Automatic Interaction Testing for Product Lines},
	Url = {http://dx.doi.org/10.1007/978-3-642-34691-0_5},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-34691-0_5}}

@article{Sekitoleko:2014,
	Abstract = {This qualitative study investigates challenges associated with technical dependencies and their communication. Such challenges frequently occur when agile practices are scaled to large-scale software development. The use of thematic analysis on semi-structured interviews revealed five challenges: planning, task prioritization, knowledge sharing, code quality, and integration. More importantly, these challenges interact with one another and can lead to a domino effect or vicious circle. If an organization struggles with one challenge, it is likely that the other challenges become problematic as well. This situation can have a significant impact on process and product quality. Our recommendations focus on improving planning and knowledge sharing (with practices such as scrum-of-scrums, continuous integration, open space technology) to break the vicious circle, and to reestablish effective communication across teams, which will then enable large-scale companies to achieve the benefits of large-scale agility.},
	Author = {Sekitoleko, Nelson and Evbota, Felix and Knauss, Eric and Sandberg, Anna and Chaudron, Michel and Olsson, Helena Holmstr{\"o}m},
	Date-Added = {2019-05-06 10:16:47 +0100},
	Date-Modified = {2020-10-21 22:22:46 +0100},
	Doi = {10.1007/978-3-319-06862-6_4},
	Isbn = {9783319068626},
	Issn = {1865-1356},
	Journal = {Agile Processes in Software Engineering and Extreme Programming},
	Keywords = {Technical dependencies; Large-scale agile; Cross-Functional Teams (XFT); Qualitative research},
	Pages = {46--61},
	Publisher = {Springer International Publishing},
	Title = {Technical Dependency Challenges in Large-Scale Agile Software Development},
	Url = {http://dx.doi.org/10.1007/978-3-319-06862-6_4},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-06862-6_4}}

@article{Hsieh:2015,
	Abstract = {Cross-platform software development poses challenges to agile development teams in practicing continuous integration (CI) builds not only because such builds take a longer time to complete and are more likely to fail, but also because builds of different lengths and scopes must be available depending on the working circumstances. To deal with this situation, three aspects of build automation in CI-the structuring of source code modules, the management of intermediate and final build artifacts, and the execution of builds-must be re-considered to account for the cross-platform characteristics. This paper discovers and documents a collection of ten patterns of CI builds for use in developing cross-platform software in the three aspects re-considered. These patterns are distilled from known uses of builds in existing software and from our experience in building commercial and open-source cross-platform software. As illustrated with an example adapted from the development of a real-world commercial cross-platform software product, the patterns can be effectively applied to solve many commonly encountered problems in applying CI for agile cross-platform software development.},
	Author = {Chin-Yun Hsieh and Chien-Tsun Chen},
	Date-Added = {2019-05-06 10:15:16 +0100},
	Date-Modified = {2020-10-21 22:10:26 +0100},
	Doi = {10.6688/JISE.2015.31.3.8},
	Journal = {J. Inf. Sci. Eng.},
	Keywords = {continuous integration; software build; cross-platform software; pattern; pattern language; agile development},
	Number = {3},
	Pages = {897--924},
	Title = {Patterns for Continuous Integration Builds in Cross-Platform Agile Software Development},
	Volume = {31},
	Year = {2015},
	Bdsk-Url-1 = {https://doi.org/10.6688/JISE.2015.31.3.8}}

@article{Souza:2015,
	Abstract = {Release engineering deals with decisions that impact the daily lives of developers, testers, and users and thus contribute to a product's success. Although gut feeling is important in such decisions, it's increasingly important to leverage existing data, such as bug reports, source code changes, code reviews, and test results, both to support decisions and to help evaluate current practices. The exploration of software engineering data to obtain insightful information is called software analytics.},
	Author = {Souza, Rodrigo and Chavez, Christina and Bittencourt, Roberto A.},
	Date-Added = {2019-05-06 10:12:49 +0100},
	Date-Modified = {2020-10-21 22:06:03 +0100},
	Doi = {10.1109/ms.2015.30},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {release engineering;rapid releases;software analytics;bug reopening;software engineering;software development;Mozilla;Firefox;Web browsers},
	Number = {2},
	Pages = {89--96},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Rapid Releases and Patch Backouts: A Software Analytics Approach},
	Url = {http://dx.doi.org/10.1109/MS.2015.30},
	Volume = {32},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2015.30},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2015.30}}

@article{Bellomo:2013,
	Abstract = {This experience report builds on an earlier study in which we interviewed eight project teams that were using iterative incremental lifecycles. In the study, we captured the practices the teams felt contributed to rapid delivery. We identified a mix of Agile and architecture practices that teams apply to rapidly field software and minimize disruption and delay. In this paper, we elaborate one practice from the study, prototyping with quality attribute focus. We compared two experiences in prototyping focused on quality attribute considerations applied on Scrum projects. We observe through interviews that feature development and prototyping practice spans multiple levels: feature development/sprint, release planning, and portfolio planning. We also observe other factors including rapid trade-off analysis, flexible architecture, and adoption of a set of enabling prototyping guidelines. The analysis of the observations sheds light on several aspects of the practice that enable the team to respond quickly and efficiently when prototype feedback suggests architectural change.},
	Author = {Bellomo, Stephany and Nord, Robert L. and Ozkaya, Ipek},
	Date-Added = {2019-05-06 10:12:27 +0100},
	Date-Modified = {2020-10-24 21:44:12 +0100},
	Doi = {10.1109/twinpeaks.2013.6614717},
	Isbn = {9781467364393},
	Journal = {2013 2nd International Workshop on the Twin Peaks of Requirements and Architecture (TwinPeaks)},
	Keywords = {agile software development;architecture;quality attribute;prototyping;release planning;requirements;software development practices;architecture trade-off},
	Pages = {8-13},
	Publisher = {IEEE},
	Title = {Elaboration on an integrated architecture and requirement practice: Prototyping with quality attribute focus},
	Url = {http://dx.doi.org/10.1109/TwinPeaks.2013.6614717},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/TwinPeaks.2013.6614717},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/twinpeaks.2013.6614717}}

@article{Gruhn:2013,
	Abstract = {Continuous Integration (CI) and Free, Libre and Open Source Software (FLOSS) are both associated with agile software development. Contradictingly, FLOSS projects have difficulties to use CI and software forges still lack support for CI. Two factors hamper widespread use of CI in FLOSS development: Cost of the computational resources and security risks of public CI services. Through security analysis of public CI services, this paper identifies possible attack vectors. To eliminate one class of attack vectors, the paper describes a concept that encapsulates a part of the CI system via virtualization. The concept is implemented as a proof of concept.},
	Author = {Gruhn, Volker and Hannebauer, Christoph and John, Christian},
	Date-Added = {2019-05-06 10:11:56 +0100},
	Date-Modified = {2020-10-24 21:44:42 +0100},
	Doi = {10.1145/2491055.2491070},
	Isbn = {9781450318525},
	Journal = {Proceedings of the 9th International Symposium on Open Collaboration - WikiSym '13},
	Keywords = {Security; Performance},
	Pages = {1-10},
	Publisher = {ACM Press},
	Title = {Security of public continuous integration services},
	Url = {http://dx.doi.org/10.1145/2491055.2491070},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2491055.2491070}}

@article{Kulas:2014,
	Abstract = {Commissioning time for an instrument at an observatory is precious, especially the night time. Whenever astronomers come up with a software feature request or point out a software defect, the software engineers have the task to find a solution and implement it as fast as possible. In this project phase, the software engineers work under time pressure and stress to deliver a functional instrument control software (ICS). The shortness of development time during commissioning is a constraint for software engineering teams and applies to the ARGOS project as well. The goal of the ARGOS (Advanced Rayleigh guided Ground layer adaptive Optics System) project is the upgrade of the Large Binocular Telescope (LBT) with an adaptive optics (AO) system consisting of six Rayleigh laser guide stars and wavefront sensors. For developing the ICS, we used the technique Test- Driven Development (TDD) whose main rule demands that the programmer writes test code before production code. Thereby, TDD can yield a software system, that grows without defects and eases maintenance. Having applied TDD in a calm and relaxed environment like office and laboratory, the ARGOS team has profited from the benefits of TDD. Before the commissioning, we were worried that the time pressure in that tough project phase would force us to drop TDD because we would spend more time writing test code than it would be worth. Despite this concern at the beginning, we could keep TDD most of the time also in this project phase This report describes the practical application and performance of TDD including its benefits, limitations and problems during the ARGOS commissioning. Furthermore, it covers our experience with pair programming and continuous integration at the telescope.},
	Author = {Kulas, M. and Borelli, Jose Luis and G{\"a}ssler, Wolfgang and Peter, Diethard and Rabien, Sebastian and Orban de Xivry, Gilles and Busoni, Lorenzo and Bonaglia, Marco and Mazzoni, Tommaso and Rahmer, Gustavo},
	Bdsk-Color = {4211277567},
	Date-Added = {2019-05-06 10:11:34 +0100},
	Date-Modified = {2020-10-24 21:48:10 +0100},
	Doi = {10.1117/12.2056218},
	Editor = {Chiozzi, Gianluca and Radziwill, Nicole M.Editors},
	Journal = {Software and Cyberinfrastructure for Astronomy III},
	Keywords = {Test-Driven Development; TDD; commissioning; continuous integration; pair programming; software engineering; testing; instrument control software; distributed software system; adaptive optics; LBT},
	Pages = {10},
	Publisher = {SPIE},
	Title = {Practical experience with test-driven development during commissioning of the multi-star AO system ARGOS},
	Url = {http://dx.doi.org/10.1117/12.2056218},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1117/12.2056218}}

@article{McIntosh:2015,
	Abstract = {Software developers rely on a fast build system to incrementally compile their source code changes and produce modified deliverables for testing and deployment. Header files, which tend to trigger slow rebuild processes, are most problematic if they also change frequently during the development process, and hence, need to be rebuilt often. In this paper, we propose an approach that analyzes the build dependency graph (i.e., the data structure used to determine the minimal list of commands that must be executed when a source code file is modified), and the change history of a software system to pinpoint header file hotspots---header files that change frequently and trigger long rebuild processes. Through a case study on the GLib, PostgreSQL, Qt, and Ruby systems, we show that our approach identifies header file hotspots that, if improved, will provide greater improvement to the total future build cost of a system than just focusing on the files that trigger the slowest rebuild processes, change the most frequently, or are used the most throughout the codebase. Furthermore, regression models built using architectural and code properties of source files can explain 32--57 % of these hotspots, identifying subsystems that are particularly hotspot-prone and would benefit the most from architectural refinement.},
	Author = {McIntosh, Shane and Adams, Bram and Nagappan, Meiyappan and Hassan, Ahmed E.},
	Date-Added = {2019-05-06 10:10:43 +0100},
	Date-Modified = {2020-10-21 22:11:48 +0100},
	Doi = {10.1007/s10515-015-0183-5},
	Issn = {1573-7535},
	Journal = {Automated Software Engineering},
	Keywords = {Build systems;Performance analysis;Mining software repositories},
	Number = {4},
	Pages = {619--647},
	Publisher = {Springer Nature},
	Title = {Identifying and understanding header file hotspots in C/C++ build processes},
	Url = {http://dx.doi.org/10.1007/s10515-015-0183-5},
	Volume = {23},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s10515-015-0183-5}}

@article{Brandtner:2015a,
	Abstract = {Continuous Integration (CI) environments cope with the repeated integration of source code changes and provide rapid feedback about the status of a software project. However, as the integration cycles become shorter, the amount of data increases, and the effort to find information in CI environments becomes substantial. In modern CI environments, the selection of measurements (e.g., build status, quality metrics) listed in a dashboard does only change with the intervention of a stakeholder (e.g., a project manager). In this paper, we want to address the shortcoming of static views with so-called Software Quality Assessment (SQA) profiles. SQA-Profiles are defined as rule-sets and enable a dynamic composition of CI dashboards based on stakeholder activities in tools of a CI environment (e.g., version control system). We present a set of SQA-Profiles for project management committee (PMC) members: Bandleader, Integrator, Gatekeeper, and Onlooker. For this, we mined the commit and issue management activities of PMC members from 20 Apache projects. We implemented a framework to evaluate the performance of our rule-based SQA-Profiles in comparison to a machine learning approach. The results showed that project-independent SQA-Profiles can be used to automatically extract the profiles of PMC members with a precision of 0.92 and a recall of 0.78.},
	Author = {Brandtner, Martin and Muller, Sebastian C. and Leitner, Philipp and Gall, Harald C.},
	Date-Added = {2019-05-06 10:10:12 +0100},
	Date-Modified = {2020-10-24 20:42:32 +0100},
	Doi = {10.1109/saner.2015.7081840},
	Isbn = {9781479984695},
	Journal = {2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
	Pages = {301-310},
	Publisher = {IEEE},
	Title = {SQA-Profiles: Rule-based activity profiles for Continuous Integration environments},
	Url = {http://dx.doi.org/10.1109/SANER.2015.7081840},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SANER.2015.7081840},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/saner.2015.7081840}}

@article{Beaumont:2012,
	Abstract = {In this paper, we consider the problem of scheduling a special kind of mixed data-parallel applications arising in the context of Continuous Integration. Continuous integration (CI) is a software engineering technique, which consists in re-building and testing interdependent software components as soon as developers modify them. The CI tool is able to provide quick feedback to the developers, which allows them to fix the bug soon after it has been introduced. The CI process can be described as a DAG where nodes represent package build tasks, and edges represent dependencies among these packages, build tasks themselves can in turn be run in parallel. Thus, CI can be viewed as a mixed data-parallel application. A crucial point for a successful CI process is its ability to provide quick feedback. Thus, make span minimization is the main goal. Our contribution is twofold. First we provide and analyze a large dataset corresponding to a build DAG. Second, we compare the performance of several scheduling heuristics on this dataset.},
	Author = {Beaumont, Olivier and Bonichon, Nicolas and Courtes, Ludovic and Dolstra, Eelco and Hanin, Xavier},
	Date-Added = {2019-05-06 10:09:49 +0100},
	Date-Modified = {2020-10-24 21:43:13 +0100},
	Doi = {10.1109/ipdpsw.2012.7},
	Isbn = {9781467309745},
	Journal = {2012 IEEE 26th International Parallel and Distributed Processing Symposium Workshops & PhD Forum},
	Keywords = {DAG Scheduling;mixed parallelism;Continuous Integration},
	Pages = {91-98},
	Publisher = {IEEE},
	Title = {Mixed Data-Parallel Scheduling for Distributed Continuous Integration},
	Url = {http://dx.doi.org/10.1109/IPDPSW.2012.7},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/IPDPSW.2012.7},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ipdpsw.2012.7}}

@article{Ablett:2007,
	Abstract = {In this paper, we describe BuildBot, a robotic interface developed to assist with the continuous integration process utilized by co-located agile software development teams. BuildBot's physical nature allows us to engage the agile software development team members through vision, hearing and touch. In this way, BuildBot becomes an active part of the development process by bringing together human-robot interaction, human group dynamics and software engineering concepts through a number of interaction modalities. In this paper we describe the design and implementation of the BuildBot prototype, a robotic interface that can sense virtual stimuli, in this case the state of a software build, and react accordingly in a physical way via vision, sound and touch. We present an early evaluation comparing BuildBot to two other tools used by an agile team to monitor the continuous integration process. We also show preliminary results indicating that BuildBot may be more noticeable to the developers and contribute to a fun and lighthearted atmosphere. We argue that by increasing awareness of the state of the software build, BuildBot can assist in the self-supervision of agile software engineering teams and can help the team achieve its goals in a more engaging and sociable manner.},
	Author = {Ablett, Ruth and Sharlin, Ehud and Maurer, Frank and Denzinger, Jorg and Schock, Craig},
	Date-Added = {2019-05-06 10:09:09 +0100},
	Date-Modified = {2020-10-24 20:40:59 +0100},
	Doi = {10.1109/roman.2007.4415217},
	Isbn = {9781424416349},
	Journal = {RO-MAN 2007 - The 16th IEEE International Symposium on Robot and Human Interactive Communication},
	Pages = {931-936},
	Publisher = {IEEE},
	Title = {BuildBot: Robotic Monitoring of Agile Software Development Teams},
	Url = {http://dx.doi.org/10.1109/ROMAN.2007.4415217},
	Year = {2007},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ROMAN.2007.4415217},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/roman.2007.4415217}}

@article{Van_der_Storm:2008,
	Abstract = {Failing integration builds are show stoppers. Development activity is stalled because developers have to wait with integrating new changes until the problem is fixed and a successful build has been run. We show how backtracking can be used to mitigate the impact of build failures in the context of component-based software development. This way, even in the face of failure, development may continue and a working version is always available.},
	Author = {van der Storm, Tijs},
	Date-Added = {2019-05-06 10:08:46 +0100},
	Date-Modified = {2020-10-24 21:40:01 +0100},
	Doi = {10.1109/csmr.2008.4493318},
	Isbn = {9781424421572},
	Issn = {1534-5351},
	Journal = {2008 12th European Conference on Software Maintenance and Reengineering},
	Keywords = {software configuration management;build management;software maintenance},
	Pages = {233-242},
	Publisher = {IEEE},
	Title = {Backtracking Incremental Continuous Integration},
	Url = {http://dx.doi.org/10.1109/CSMR.2008.4493318},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/CSMR.2008.4493318},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/csmr.2008.4493318}}

@inproceedings{Subeta:2012,
	Abstract = {Previous courses addressing the gap between student and professional programming practice have either isolated small groups' development in such a way that larger scale difficulties that motivate many professional practices do not arise, or have required significant additional staffing that would be expensive to provide in a large cohort core undergraduate software engineering course. We describe the first iteration of a course that enabled 73 students to work together to improve a large common legacy code base using professional practices and tools, staffed only by two lecturers and two undergraduate students employed as part-time tutors. The course relies on continuous integration and automated metrics, that coalesce frequently updated information in a manner that is visible to students and can be monitored by a small number of staff. The course is supported by a just-in-time teaching programme of thirty-two technical topics. We describe the constraints that determined the design of the course, and quantitative and qualitative data from the first iteration of the course.},
	Acmid = {2337377},
	Address = {Piscataway, NJ, USA},
	Author = {S\"{u}{\$\beta\$}, J\"{o}rn Guy and Billingsley, William},
	Booktitle = {Proceedings of the 34th International Conference on Software Engineering},
	Date-Added = {2019-05-06 10:08:17 +0100},
	Date-Modified = {2020-10-21 23:38:13 +0100},
	Doi = {10.1109/ICSE.2012.6227025},
	Isbn = {978-1-4673-1067-3},
	Keywords = {Continuous Integration; Software Engineering; Studio Course; Resource Constraints; Experience Report},
	Location = {Zurich, Switzerland},
	Numpages = {10},
	Pages = {1175--1184},
	Publisher = {IEEE Press},
	Series = {ICSE '12},
	Title = {Using Continuous Integration of Code and Content to Teach Software Engineering with Limited Resources},
	Url = {http://dl.acm.org/citation.cfm?id=2337223.2337377},
	Year = {2012},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2337223.2337377}}

@article{Erculiani:2014,
	Abstract = {This paper describes uBuild, a novel tool designed to support the automated execution of repeatable and controlled tests of embedded Linux systems. This is useful for continuous integration purposes, and to evaluate the impact of various design and implementation options on the system's performance. uBuild allows the designer to build the embedded system image from scratch, by compiling all the needed software from the source code and by even building the needed cross-compilation toolchain if required. It provides deterministic control on the configuration options used to build the cross-compilation toolchain, the Linux kernel, the system libraries, and all the programs. In this way, the effects of each option can be tested and evaluated in isolation.

},
	Author = {Erculiani, Fabio and Abeni, Luca and Palopoli, Luigi},
	Date-Added = {2019-05-06 10:07:44 +0100},
	Date-Modified = {2020-10-21 22:19:03 +0100},
	Doi = {10.1007/978-3-319-04891-8_11},
	Isbn = {9783319048918},
	Issn = {1611-3349},
	Journal = {Lecture Notes in Computer Science},
	Keywords = {Embedded Systems; Continuous Testing; Performance Evaluation},
	Pages = {123--134},
	Publisher = {Springer International Publishing},
	Title = {uBuild: Automated Testing and Performance Evaluation of Embedded Linux Systems},
	Url = {http://dx.doi.org/10.1007/978-3-319-04891-8_11},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-04891-8_11}}

@article{Pereira_Moreira:2010,
	Abstract = {This paper describes a framework for a software internal quality measurement program with automatic metrics extraction. This framework was successfully implemented in an Industrial Software Factory. That was possible through the implementation of a proposed Continuous Integration CI) environment to periodically analyze source codes and extract metrics. These metrics were consolidated in a Data Warehouse by allowing On-line Analytical Processing (OLAP) and Key Performance Indicator (KPI) analysis with high-performance and user-friendly interface. The measurement program followed GQ(I)M paradigm for metrics selection to ensure that collected metrics are relevant from the Software Factory goals perspective. Finally, the Measurement and Analysis Process Area of the Capability Maturity Model integration - CMMi was used for measurement and analysis planning and implementation.},
	Author = {Pereira Moreira, Gabriel de_Souza and Mellado, Roberto Pepato and Montini, Denis {\'A}vila and Dias, Luiz Alberto Vieira and Marques da Cunha, Adilson},
	Date-Added = {2019-05-06 10:07:22 +0100},
	Date-Modified = {2020-10-24 21:42:10 +0100},
	Doi = {10.1109/itng.2010.85},
	Isbn = {9781424462704},
	Journal = {2010 Seventh International Conference on Information Technology: New Generations},
	Keywords = {Software Measurement;Software Metrics;Goal-Driven Measurement;Software Product Quality;Continuous Integration},
	Pages = {1177-1182},
	Publisher = {IEEE},
	Title = {Software Product Measurement and Analysis in a Continuous Integration Environment},
	Url = {http://dx.doi.org/10.1109/ITNG.2010.85},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ITNG.2010.85},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/itng.2010.85}}

@article{Neely:2013,
	Abstract = {Rally Software transitioned from shipping code every eight-weeks, with time-boxed Scrum sprints, to a model of continuous delivery with Kanban. The team encountered complex challenges with their build systems, automated test suites, customer enablement, and internal communication. But there was light at the end of the tunnel - greater control and flexibility over feature releases, incremental delivery of value, lower risks, fewer defects, easier on-boarding of new developers, less off-hours work, and a considerable up tick in confidence. This experience report describes the journey to continuous delivery with the aim that others can learn from our mistakes and get their teams deploying more frequently. We will describe and contrast this transition from the business (product management) and engineering perspectives.},
	Author = {Neely, Steve and Stolt, Steve},
	Date-Added = {2019-05-06 10:06:58 +0100},
	Date-Modified = {2020-10-24 20:41:55 +0100},
	Doi = {10.1109/agile.2013.17},
	Isbn = {9780769550763},
	Journal = {2013 Agile Conference},
	Pages = {121-128},
	Publisher = {IEEE},
	Title = {Continuous Delivery? Easy! Just Change Everything (Well, Maybe It Is Not That Easy)},
	Url = {http://dx.doi.org/10.1109/AGILE.2013.17},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/AGILE.2013.17},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/agile.2013.17}}

@article{Guimaraes:2012,
	Abstract = {The earlier merge conflicts are detected the easier it is to resolve them. A recommended practice is for developers to frequently integrate so that they detect conflicts earlier. However, manual integrations are cumbersome and disrupt programming flow, so developers commonly defer them; besides, manual integrations do not help to detect conflicts with uncommitted code of co-workers. Consequently, conflicts grow over time thus making resolution harder at late stages.

We present a solution that continuously integrates in the background uncommitted and committed changes to support automatic detection of conflicts emerging during programming. To do so, we designed a novel merge algorithm that is O(N) complex, and implemented it inside an IDE, thus promoting a metaphor of continuous merging, similar to continuous compilation. Evidence from controlled experiments shows that our solution helps developers to become aware of and resolve conflicts earlier than when they use a mainstream version control system.

},
	Author = {Guimar{\~a}es, M{\'a}rio Lu{\'\i}s and Rito Silva, Ant{\'o}nio},
	Date-Added = {2019-05-06 10:06:32 +0100},
	Date-Modified = {2020-10-21 23:40:29 +0100},
	Doi = {10.1007/978-3-642-28872-2_23},
	Isbn = {9783642288722},
	Issn = {1611-3349},
	Journal = {Lecture Notes in Computer Science},
	Keywords = {software merging; version control; continuous integration; conflict detection; continuous merging},
	Pages = {332--346},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Making Software Integration Really Continuous},
	Url = {http://dx.doi.org/10.1007/978-3-642-28872-2_23},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-28872-2_23}}

@inproceedings{Betz:2013,
	Abstract = {Continuous integration is the software engineering principle of rapid and automated development and testing. We identify several key points of continuous integration and demonstrate how they relate to the needs of computational science projects by discussing the implementation and relevance of these principles to AMBER, a large and widely used molecular dynamics software package. The use of a continuous integration server has both improved collaboration and communication between AMBER developers, who are globally distributed, as well as making failure and benchmark information that would be time consuming for individual developers to obtain by themselves, available in real time. Continuous integration servers currently available are aimed at the software engineering community and can be difficult to adapt to the needs of computational science projects, however as demonstrated in this paper the effort payoff can be rapid since uncommon errors are found and contributions from geographically separated researchers are unified into one easily-accessible web-based interface.},
	Acmid = {2663380},
	Address = {Piscataway, NJ, USA},
	Author = {Betz, Robin M. and Walker, Ross C.},
	Booktitle = {Proceedings of the 5th International Workshop on Software Engineering for Computational Science and Engineering},
	Date-Added = {2019-05-06 10:06:09 +0100},
	Date-Modified = {2020-10-21 23:31:18 +0100},
	Doi = {10.1109/SECSE.2013.6615101},
	Isbn = {978-1-4673-6261-0},
	Location = {San Francisco, California},
	Numpages = {7},
	Pages = {68--74},
	Publisher = {IEEE Press},
	Series = {SE-CSE '13},
	Title = {Implementing Continuous Integration Software in an Established Computational Chemistry Software Package},
	Url = {http://dl.acm.org/citation.cfm?id=2663370.2663380},
	Year = {2013},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2663370.2663380}}

@article{Jixiang_Lu:2014,
	Abstract = {When smart grid scheduling support system (D5000 system) was developed, the development team ran across tough issue that the system is difficult for integration and becomes unstable after integration due to the complexity. To resolve the problem, the author made research and introduced continuous integration and automated testing approach on D5000 system development. This paper provides the concept and advantages of continuous integration, and analyzes the necessity for continuous integration. It also describes automated testing for quality improvement with code static analytics, automated unit testing, and automated function testing; This paper gives a case study to deploy continuous integration and automated testing on D5000 system development which resolves quality and integration issues effectively and efficiently.},
	Author = {Jixiang Lu and Zhihong Yang and Junxia Qian},
	Date-Added = {2019-05-06 10:05:02 +0100},
	Date-Modified = {2020-10-24 21:46:12 +0100},
	Doi = {10.1109/powercon.2014.6993503},
	Isbn = {9781479950324},
	Journal = {2014 International Conference on Power System Technology},
	Keywords = {smart grid;continuous integration;automated testing},
	Pages = {2441-2446},
	Publisher = {IEEE},
	Title = {Implementation of continuous integration and automated testing in software development of smart grid scheduling support system},
	Url = {http://dx.doi.org/10.1109/POWERCON.2014.6993503},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/POWERCON.2014.6993503},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/powercon.2014.6993503}}

@article{Karvonen:2015,
	Abstract = {The benefits and barriers that software development companies face when moving beyond agile development practices are identified in a multiple-case study in five Finnish companies. The practices that companies need to adopt when moving towards innovation experiment systems are recognised. The background of the study is the Stairway to Heaven (StH) model that describes the path that many software development companies take when advancing their development practices. The development practices in each case are investigated and analysed in relation to the StH model. At first the results of the analysis strengthened the validity of the StH model as a path taken by software development companies to advance their development practices. Based on the findings, the StH model was extended with a set of additional practices and their adoption levels for each step of the model. The extended model was validated in five case companies.},
	Author = {Karvonen, Teemu and Lwakatare, Lucy Ellen and Sauvola, Tanja and Bosch, Jan and Olsson, Helena Holmstr{\"o}m and Kuvaja, Pasi and Oivo, Markku},
	Date-Added = {2019-05-06 10:03:17 +0100},
	Date-Modified = {2020-10-21 22:13:03 +0100},
	Doi = {10.1007/978-3-319-19593-3_10},
	Isbn = {9783319195933},
	Issn = {1865-1356},
	Journal = {Software Business},
	Keywords = {Software development; Agile development; Feedback loops; Innovation experiment systems; Continuous deployment},
	Pages = {117--131},
	Publisher = {Springer International Publishing},
	Title = {Hitting the Target: Practices for Moving Toward Innovation Experiment Systems},
	Url = {http://dx.doi.org/10.1007/978-3-319-19593-3_10},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-319-19593-3_10}}

@article{Stahl:2014,
	Abstract = {There is a steadily increasing interest in the agile practice of continuous integration. Consequently, there is great diversity in how it is interpreted and implemented, and a need to study, document and analyze how automated software integration flows are implemented in the industry today. In this paper we study five separate cases, using a descriptive model developed to address the variation points in continuous integration practice discovered in literature. Each case is discussed and evaluated individually, whereupon six guidelines for the design and implementation of automated software integration are presented. Furthermore, the descriptive model used to document the cases is evaluated and evolved.},
	Author = {St{\aa}hl, Daniel and Bosch, Jan},
	Date-Added = {2019-05-06 10:02:52 +0100},
	Date-Modified = {2020-10-24 21:47:06 +0100},
	Doi = {10.1145/2591062.2591186},
	Isbn = {9781450327688},
	Journal = {Companion Proceedings of the 36th International Conference on Software Engineering - ICSE Companion 2014},
	Keywords = {software integration; Agile software development; continuous integration; automation; methodologies},
	Pages = {54--63},
	Publisher = {ACM Press},
	Title = {Automated software integration flows in industry: a multiple-case study},
	Url = {http://dx.doi.org/10.1145/2591062.2591186},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2591062.2591186}}

@article{Olsson:2012,
	Abstract = {Agile software development is well-known for its focus on close customer collaboration and customer feedback. In emphasizing flexibility, efficiency and speed, agile practices have lead to a paradigm shift in how software is developed. However, while agile practices have succeeded in involving the customer in the development cycle, there is an urgent need to learn from customer usage of software also after delivering and deployment of the software product. The concept of continuous deployment, i.e. the ability to deliver software functionality frequently to customers and subsequently, the ability to continuously learn from real-time customer usage of software, has become attractive to companies realizing the potential in having even shorter feedback loops. However, the transition towards continuous deployment involves a number of barriers. This paper presents a multiple-case study in which we explore barriers associated with the transition towards continuous deployment. Based on interviews at four different software development companies we present key barriers in this transition as well as actions that need to be taken to address these.},
	Author = {Olsson, Helena Holmstrom and Alahyari, Hiva and Bosch, Jan},
	Date-Added = {2019-05-06 10:02:26 +0100},
	Date-Modified = {2020-10-24 21:43:52 +0100},
	Doi = {10.1109/seaa.2012.54},
	Isbn = {9781467324519},
	Journal = {2012 38th Euromicro Conference on Software Engineering and Advanced Applications},
	Keywords = {agile software development;customer collaboration;continuous integration;continuous deployment},
	Pages = {392-399},
	Publisher = {IEEE},
	Title = {Climbing the "Stairway to Heaven" -- A Mulitiple-Case Study Exploring Barriers in the Transition from Agile Development towards Continuous Deployment of Software},
	Url = {http://dx.doi.org/10.1109/SEAA.2012.54},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SEAA.2012.54},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/seaa.2012.54}}

@article{Adams:2015,
	Abstract = {Release engineering focuses on building a pipeline that transforms source code into an integrated, compiled, packaged, tested, and signed product that's ready for release. The pipeline's input is the source code developers write to create a product or modify an existing one. Enterprises running large-scale websites and delivering mobile applications with millions of users must rely on a robust release pipeline to ensure they can deliver and update their products to new and existing customers, at the required release cadence.

This special issue provides an overview of research and practitioner experience. This article aims to give you insight into the state of the practice and the challenges release engineers face. It features highlights from interviews with Boris Debic, a privacy engineer (and former release engineer); Chuck Rossi, a release-engineering manager; and Kim Moir, a release engineer. We asked each of them the same questions covering topics such as release-engineering metrics, continuous delivery's benefits and limitations, the required job skills, the required changes in education, and recommendations for future research.},
	Author = {Adams, Bram and Bellomo, Stephany and Bird, Christian and Marshall-Keim, Tamara and Khomh, Foutse and Moir, Kim},
	Date-Added = {2019-05-06 10:01:57 +0100},
	Date-Modified = {2020-10-21 21:53:12 +0100},
	Doi = {10.1109/ms.2015.52},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Number = {2},
	Pages = {42--49},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {The Practice and Future of Release Engineering: A Roundtable with Three Release Engineers},
	Url = {http://dx.doi.org/10.1109/MS.2015.52},
	Volume = {32},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2015.52},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2015.52}}

@article{Zhu:2015,
	Abstract = {Continuous delivery and deployment are dramatically shortening release cycles from months to hours. Cloud applications with high-frequency releases often rely heavily on automated tools and cloud infrastructure APIs to deploy new software versions. The authors report on reliability issues and how these tools and APIs contribute to them. They also analyze the trade-offs between using heavily baked and lightly baked virtual-image approaches, on the basis of experiments with Amazon Web Service OpsWorks APIs and the Chef configuration management tool. Finally, they propose error-handling practices for continuous-delivery facilities.},
	Author = {Zhu, Liming and Xu, Donna and Tran, An Binh and Xu, Xiwei and Bass, Len and Weber, Ingo and Dwarakanathan, Srini},
	Date-Added = {2019-05-06 09:59:44 +0100},
	Date-Modified = {2020-10-21 22:17:29 +0100},
	Doi = {10.1109/ms.2015.23},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {release engineering;continuous delivery;continuous deployment;DevOps;system administration;software engineering},
	Number = {2},
	Pages = {73--80},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Achieving Reliable High-Frequency Releases in Cloud Environments},
	Url = {http://dx.doi.org/10.1109/MS.2015.23},
	Volume = {32},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2015.23},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2015.23}}

@article{Bellomo:2014,
	Abstract = {There is growing interest in continuous delivery practices to enable rapid and reliable deployment. While practices are important, we suggest architectural design decisions are equally important for projects to achieve goals such continuous integration (CI) build, automated testing and reduced deployment-cycle time. Architectural design decisions that conflict with deploy ability goals can impede the team's ability to achieve the desired state of deployment and may result in substantial technical debt. To explore this assertion, we interviewed three project teams striving to practicing continuous delivery. In this paper, we summarize examples of the deploy ability goals for each project as well as the architectural decisions that they have made to enable deploy ability. We present the deploy ability goals, design decisions, and deploy ability tactics collected and summarize the design tactics derived from the interviews in the form of an initial draft version hierarchical deploy ability tactic tree.},
	Author = {Bellomo, Stephany and Ernst, Neil and Nord, Robert and Kazman, Rick},
	Date-Added = {2019-05-06 09:59:05 +0100},
	Date-Modified = {2020-10-24 21:48:04 +0100},
	Doi = {10.1109/dsn.2014.104},
	Isbn = {9781479922338},
	Journal = {2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks},
	Keywords = {deployability;continuous integration;continuous delivery;architecture tactic;test automation},
	Pages = {702-707},
	Publisher = {IEEE},
	Title = {Toward Design Decisions to Enable Deployability: Empirical Study of Three Projects Reaching for the Continuous Delivery Holy Grail},
	Url = {http://dx.doi.org/10.1109/DSN.2014.104},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/DSN.2014.104},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/dsn.2014.104}}

@article{Claps:2015,
	Abstract = {Context
Continuous Deployment (CD) is an emerging software development process with organisations such as Facebook, Microsoft, and IBM successfully implementing and using the process. The CD process aims to immediately deploy software to customers as soon as new code is developed, and can result in a number of benefits for organisations, such as: new business opportunities, reduced risk for each release, and prevent development of wasted software. There is little academic literature on the challenges organisations face when adopting the CD process, however there are many anecdotal challenges that organisations have voiced on their online blogs.
Objective
The aim of this research is to examine the challenges faced by organisations when adopting CD as well as the strategies to mitigate these challenges.
Method
An explorative case study technique that involves in-depth interviews with software practitioners in an organisation that has adopted CD was conducted to identify these challenges.
Results
This study found a total of 20 technical and social adoption challenges that organisations may face when adopting the CD process. The results are discussed to gain a deeper understanding of the strategies employed by organisations to mitigate the impacts of these challenges.
Conclusion
While a number of individual technical and social adoption challenges were uncovered by the case study in this research, most challenges were not faced in isolation. The severity of these challenges were reduced by a number of mitigation strategies employed by the case study organisation. It is concluded that organisations need to be well prepared to handle technical and social adoption challenges with their existing expertise, processes and tools before adopting the CD process. For practitioners, knowing how to address the challenges an organisation may face when adopting the CD process provides a level of awareness that they previously may not have had.},
	Author = {Gerry Gerard Claps and Richard Berntsson Svensson and Ayb{\"u}ke Aurum},
	Date-Added = {2019-05-06 09:56:38 +0100},
	Date-Modified = {2019-05-06 11:02:49 +0100},
	Doi = {10.1016/j.infsof.2014.07.009},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Continuous deployment, Agile software development, Lean software development, Challenges and mitigation strategies},
	Pages = {21 - 31},
	Title = {On the journey to continuous deployment: Technical and social challenges along the way},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584914001694},
	Volume = {57},
	Year = {2015},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584914001694},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2014.07.009}}

@inproceedings{Debbiche:2014,
	Abstract = {The complexity of software development has increased over the last few years. Customers today demand higher quality and more stable software with shorter delivery time. Software companies strive to improve their processes in order to meet theses challenges. Agile practices have been widely praised for the focus they put on customer collaboration and shorter feedback loops. Companies that have well established agile practices have been trying to improve their processes further by adopting continuous integration - the concept where teams integrate their code several times a day. However, adopting continuous integration is not a trivial task. This paper presents a case study in which we, based on interviews at a major Swedish telecommunication services and equipment provider, assess the challenges of continuous integration. The study found 23 adoption challenges that organisations may face when adopting the continuous integration process.},
	Address = {Cham},
	Author = {Debbiche, Adam and Dien{\'e}r, Mikael and Berntsson Svensson, Richard},
	Booktitle = {Product-Focused Software Process Improvement},
	Date-Added = {2019-05-06 09:56:15 +0100},
	Date-Modified = {2020-10-21 22:33:29 +0100},
	Doi = {10.1007/978-3-319-13835-0_2},
	Editor = {Jedlitschka, Andreas and Kuvaja, Pasi and Kuhrmann, Marco and M{\"a}nnist{\"o}, Tomi and M{\"u}nch, J{\"u}rgen and Raatikainen, Mikko},
	Isbn = {978-3-319-13835-0},
	Keywords = {continuous integration; software; challenges},
	Pages = {17--32},
	Publisher = {Springer International Publishing},
	Title = {Challenges When Adopting Continuous Integration: A Case Study},
	Year = {2014},
	Bdsk-Url-1 = {https://doi.org/10.1007/978-3-319-13835-0_2}}

@article{Leppanen:2015,
	Abstract = {As part of a Finnish research program, researchers interviewed 15 information and communications technology companies to determine the extent to which the companies adopted continuous deployment. They also aimed to find out why continuous deployment is considered beneficial and what the obstacles are to its full adoption. The benefits mentioned the most often were the ability to get faster feedback, the ability to deploy more often to keep customers satisfied, and improved quality and productivity. Despite understanding the benefits, none of the companies adopted a fully automatic deployment pipeline. The companies also had higher continuous-deployment capability than what they practiced. In many cases, they consciously chose to not aim for full continuous deployment. Obstacles to full adoption included domain-imposed restrictions, resistance to change, customer desires, and developers' skill and confidence.},
	Author = {Leppanen, Marko and Makinen, Simo and Pagels, Max and Eloranta, Veli-Pekka and Itkonen, Juha and Mantyla, Mika V. and Mannisto, Tomi},
	Date-Added = {2019-05-06 09:54:20 +0100},
	Date-Modified = {2020-10-21 21:55:52 +0100},
	Doi = {10.1109/ms.2015.50},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {continuous deployment;software development;software engineering;thematic analysis;continuous delivery;continuous integration},
	Number = {2},
	Pages = {64--72},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {The highways and country roads to continuous deployment},
	Url = {http://dx.doi.org/10.1109/MS.2015.50},
	Volume = {32},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2015.50},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2015.50}}

@article{Bell:2015,
	Abstract = {Build processes are too slow. Because most of the build time for Java projects is spent executing tests, researchers have focused on speeding up testing. They've integrated two complementary approaches into a system that seamlessly supports Ant and Maven JUnit build processes. The first approach, unit test virtualization, isolates in-memory dependencies among test cases, which otherwise are isolated inefficiently by restarting the Java Virtual Machine (JVM) before every test. The system supports just-in-time reinitialization of only the small portion of memory needed by the next test, reusing a single JVM. The implementation of this approach is called VMVM (Virtual Machine in the Virtual Machine, pronounced "vroom vroom"). In addition, simple setup and tear-down resource management methods designed for sequential execution lead to conflicts when the resources are accessed concurrently. So, the second approach, virtualized unit test virtualization, isolates external dependencies such as files and network ports while long-running tests execute in parallel. For this, the system distributes testing jobs in round-robin manner among OS-level virtual machines. The result is, on average, a 51 percent speedup of application build times. The implementation of this approach is called VMVMVM (Virtual Machine in a Virtual Machine on a Virtual Machine "vroom vroom vroom").},
	Author = {Bell, Jonathan and Melski, Eric and Dattatreya, Mohan and Kaiser, Gail E.},
	Date-Added = {2019-05-06 09:53:52 +0100},
	Date-Modified = {2020-10-21 21:47:32 +0100},
	Doi = {10.1109/ms.2015.32},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {test execution;testing tools;software engineering},
	Number = {2},
	Pages = {97--104},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Vroom: Faster Build Processes for Java},
	Url = {http://dx.doi.org/10.1109/MS.2015.32},
	Volume = {32},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2015.32},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2015.32}}

@article{Brandtner:2015,
	Abstract = {Context
Continuous Integration (CI) has become an established best practice of modern software development. Its philosophy of regularly integrating the changes of individual developers with the master code base saves the entire development team from descending into Integration Hell, a term coined in the field of extreme programming. In practice, CI is supported by automated tools to cope with this repeated integration of source code through automated builds and testing. One of the main problems, however, is that relevant information about the quality and health of a software system is both scattered across those tools and across multiple views.
Objective
This paper introduces a quality awareness framework for CI-data and its conceptional model used for the data integration and visualization. The framework called SQA-Mashup makes use of the service-based mashup paradigm and integrates information from the entire CI-toolchain into a single service.
Method
The research approach followed in our work consists out of (i) a conceptional model for data integration and visualization, (ii) a prototypical framework implementation based on tool requirements derived from literature, and (iii) a controlled user study to evaluate its usefulness.
Results
The results of the controlled user study showed that SQA-Mashup's single point of access allows users to answer questions regarding the state of a system more quickly (57%) and accurately (21.6%) than with standalone CI-tools.
Conclusions
The SQA-Mashup framework can serve as one-stop shop for software quality data monitoring in a software development project. It enables easy access to CI-data which otherwise is not integrated but scattered across multiple CI-tools. Our dynamic visualization approach allows for a tailoring of integrated CI-data according to information needs of different stakeholders such as developers or testers.},
	Author = {Martin Brandtner and Emanuel Giger and Harald Gall},
	Bdsk-Color = {4211148543},
	Date-Added = {2019-05-06 09:53:15 +0100},
	Date-Modified = {2019-05-06 12:08:07 +0100},
	Doi = {10.1016/j.infsof.2014.10.004},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Continuous integration, Controlled user study, Software quality, Tool integration, Information needs},
	Pages = {97 - 113},
	Title = {SQA-Mashup: A mashup framework for continuous integration},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584914002158},
	Volume = {65},
	Year = {2015},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584914002158},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2014.10.004}}

@article{Krusche:2014,
	Abstract = {Continuous delivery is a set of practices and principles to release software faster and more frequently. While it helps to bridge the gap between developers and operations for software in production, it can also improve the communication between developers and customers in the development phase, i.e. before software is in production. It shortens the feedback cycle and developers ideally use it right from the beginning of a software development project. In this paper we describe the implementation of a customized continuous delivery workflow and its benefits in a multi-customer project course in summer 2013. Our workflow focuses on the ability to deliver software with only a few clicks to the customer in order to obtain feedback as early as possible. This helps developers to validate their understanding about requirements, which is especially helpful in agile projects where requirements might change often. We describe how we integrated this workflow and the role of the release manager into our project-based organization and how we introduced it using different teaching methods. Within three months 90 students worked in 10 different projects with real customers from industry and delivered 490 releases. After the project course we evaluated our approach in an online questionnaire and in personal interviews. Our findings and observations show that participating students understood and applied the concepts and are convinced about the benefits of continuous delivery.},
	Author = {Krusche, Stephan and Alperowitz, Lukas},
	Date-Added = {2019-05-06 09:52:46 +0100},
	Date-Modified = {2020-10-24 21:48:34 +0100},
	Doi = {10.1145/2591062.2591163},
	Isbn = {9781450327688},
	Journal = {Companion Proceedings of the 36th International Conference on Software Engineering - ICSE Companion 2014},
	Keywords = {Feedback; User Involvement; Release Management; Version Control System; Continuous Delivery; Continuous Integration; DevOps; Executable Prototypes},
	Pages = {335--343},
	Publisher = {ACM Press},
	Title = {Introduction of continuous delivery in multi-customer project courses},
	Url = {http://dx.doi.org/10.1145/2591062.2591163},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2591062.2591163}}
