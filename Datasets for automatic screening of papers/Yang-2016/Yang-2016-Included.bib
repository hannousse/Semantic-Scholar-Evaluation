%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Salima Yahiouche at 2020-10-24 20:54:40 +0100 


%% Saved with string encoding Unicode (UTF-8) 



@article{Waterman:2013,
	Abstract = {A key feature of agile software development is its prioritisation of responding to changing requirements over planning ahead. If an agile development team spends too much time planning and designing architecture then responding to change will be extremely costly, while not doing enough architectural design puts the project at risk of failure. Striking the balance depends heavily on the context of the system being built, the environment and the development teams. This Grounded Theory research into how much architecture agile teams design up-front has identified system complexity as an important factor in determining how much planning a team does up-front, while system size, although related to complexity, has a much less direct impact. Furthermore, when determining how much design to do up-front, value to the customer can be a more important factor than overall development cost. Understanding these factors can help agile teams to determine how much up-front planning is appropriate for the systems they develop.},
	Author = {Waterman, Michael and Noble, James and Allan, George},
	Date-Added = {2019-05-21 19:00:11 +0100},
	Date-Modified = {2020-10-21 16:52:24 +0100},
	Doi = {10.1007/978-3-642-38314-4_17},
	Isbn = {9783642383144},
	Issn = {1865-1356},
	Journal = {Agile Processes in Software Engineering and Extreme Programming},
	Keywords = {Software architecture; agile software development; Grounded Theory},
	Pages = {238--252},
	Publisher = {Springer Berlin Heidelberg},
	Title = {The Effect of Complexity and Value on Architecture Planning in Agile Software Development},
	Url = {http://dx.doi.org/10.1007/978-3-642-38314-4_17},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-38314-4_17}}

@article{Waterman:2012,
	Abstract = {A key part of software architecture is the design of the high level structure of a software system -- an exercise in planning ahead. Agile software development methods discourage planning ahead, encapsulated by the Agile Manifesto philosophy "[we value] responding to change over following aplan". Development without architecture planning risks failure. This leads to an apparent paradox: how can you design an architecture while using a methodology that promotes not planning ahead? This paper introduces Grounded Theory research that is exploring the factors that affect how much architecture planning industry practitioners do up-front -- in other words, how much architecture? Early results show that the experience of the architects and predefined or template architectures both help to reduce the architectural effort required without sacrificing the benefits of a full architecture design.},
	Author = {Waterman, Michael and Noble, James and Allan, George},
	Date-Added = {2019-05-21 18:59:53 +0100},
	Date-Modified = {2020-10-24 20:46:05 +0100},
	Doi = {10.1109/agileindia.2012.11},
	Isbn = {9781467307994},
	Journal = {2012 Agile India},
	Keywords = {Software architecture; Software development management; Software engineering},
	Pages = {56-59},
	Publisher = {IEEE},
	Title = {How Much Architecture? Reducing the Up-Front Effort},
	Url = {http://dx.doi.org/10.1109/AgileIndia.2012.11},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/AgileIndia.2012.11},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/agileindia.2012.11}}

@article{Stober:2009,
	Abstract = {In agile planning you are counting on what you know you definitely have. Depending on the type of project, you are either given a number of resources by your management to do the project, or, as in a services contract, there is a certain amount assigned for resources that you better not overspend. The time constraints will be fixed as well. On the other hand, requirements will be a moving target. Therefore the plan is fluid and includes only a rough estimate of those requirements that might be achievable in a prioritized order. Content is the parameter to adjust when adapting to change. The actual deliverable will be the best that can be accomplished within the given timeframe and with the given resources. Each team will figure out how to accomplish as much work as possible. In contrast to this, traditional waterfall project management teaches just the opposite approach: You start with gathering the list of fixed requirements, then estimate the cost and time needed to implement them. This approach ignores that in most cases, resources and dates are non-negotiable given constraints. The content delivered by the team will always be confined by the team size and available time, regardless which requirements you commit to address in your specification (Fig. 6.1). If the requirements are fixed by management as well as the dates and resources, this is neither waterfall nor agile, but simply unprofessional and a setup for failure. The team will be doomed to fall into a never-ending emergency mode, which is not sustainable and will offer quality decrease as the only way out.},
	Author = {Stober, Thomas and Hansmann, Uwe},
	Bdsk-Color = {4211277567},
	Date-Added = {2019-05-21 18:59:28 +0100},
	Date-Modified = {2020-10-21 16:51:12 +0100},
	Doi = {10.1007/978-3-540-70832-2_6},
	Isbn = {9783540708322},
	Journal = {Agile Software Development},
	Keywords = {Project Management; Architectural Change; Work Item; Agile Development; Agile Software Development},
	Pages = {93--114},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Considerations on Planning and Architecture},
	Url = {http://dx.doi.org/10.1007/978-3-540-70832-2_6},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-540-70832-2_6}}

@article{Staron:2013,
	Abstract = {The principles of Agile software development are increasingly used in large software development projects, e.g. using Scrum of Scrums or combining Agile and Lean development methods. When large software products are developed by self-organized, usually feature-oriented teams, there is a risk that architectural dependencies between software components become uncontrolled. In particular there is a risk that the prescriptive architecture models in form of diagrams are outdated and implicit architectural dependencies may become more frequent than the explicit ones. In this paper we present a method for automated discovery of potential dependencies between software components based on analyzing revision history of software repositories. The result of this method is a map of implicit dependencies which is used by architects in decisions on the evolution of the architecture. The software architects can assess the validity of the dependencies and can prevent unwanted component couplings and design erosion hence minimizing the risk of post-release quality problems. Our method was evaluated in a case study at one large product at Saab Electronic Defense Systems (Saab EDS) and one large software product at Ericsson AB.},
	Author = {Staron, Miroslaw and Meding, Wilhelm and Hoglund, Christoffer and Eriksson, Peter and Nilsson, Jimmy and Hansson, Jorgen},
	Date-Added = {2019-05-21 18:59:05 +0100},
	Date-Modified = {2020-10-24 20:51:36 +0100},
	Doi = {10.1109/seaa.2013.9},
	Isbn = {9780769550916},
	Journal = {2013 39th Euromicro Conference on Software Engineering and Advanced Applications},
	Keywords = {measure; metric; mining software repositories; quality; dependency; architecture; case study; industry},
	Pages = {325-332},
	Publisher = {IEEE},
	Title = {Identifying Implicit Architectural Dependencies Using Measures of Source Code Change Waves},
	Url = {http://dx.doi.org/10.1109/SEAA.2013.9},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SEAA.2013.9},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/seaa.2013.9}}

@article{Sharifloo:2008,
	Abstract = {Today, agile methods become a popular approach to develop software systems. They try to satisfy customer, respond to changes, release in less time and achieve suitable profits for developers. XP is one of the most popular agile methods which is currently being used and different kinds of research have been accomplished about its various aspects such as pair programming. In spite of all benefits known of XP, it does not involve architectural techniques yet. As it is mentioned in many technical reports, the way to achieve high quality of system is to consider its architecture as an important matter in the development process. This paper introduces two practices in order to empower XP's development process toward improving system's architecture. The main characteristic of proposed solution is that it is derived from values and practices of XP in order to be compatible with XP process model and to keep its agility intact.},
	Author = {Sharifloo, Amir Azim and Saffarian, Amir S. and Shams, Fereidoon},
	Date-Added = {2019-05-21 18:58:43 +0100},
	Date-Modified = {2020-10-24 20:53:48 +0100},
	Doi = {10.1109/ASWEC.2008.65},
	Isbn = {9780769531007},
	Issn = {1530-0803},
	Journal = {19th Australian Conference on Software Engineering (aswec 2008)},
	Keywords = {Extreme Programming; Software Architecture; Architectural Practices},
	Pages = {310-319},
	Publisher = {IEEE},
	Title = {Embedding Architectural Practices into Extreme Programming},
	Url = {http://dx.doi.org/10.1109/ASWEC.2008.65},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ASWEC.2008.4483219},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/aswec.2008.4483219}}

@article{Savolain:2010,
	Abstract = {Many organizations have started to use agile development processes to speed up the development cycle and to improve the ability of the company in reacting to changing requirements. Adopting agile practices may happen as a revolution where all old practices are removed or as a more gradual process. In this paper, we discuss lessons learnt in two agile transition processes. Based on our experience, agile processes can be used in embedded software development for products. The challenges include the varying size of user requirements, the role of system requirements, and architecturally significant requirements. It is difficult for large organizations to be agile. Work allocation for a large number of different teams with different competencies tends to decrease speed, and increase the role of design and management. We conclude that agile development in this context needs very skilled developers and has to be a combination of new and old practices.},
	Author = {Savolain, Juha and Kuusela, Juha and Vilavaara, Asko},
	Date-Added = {2019-05-21 18:58:25 +0100},
	Date-Modified = {2020-10-24 20:49:54 +0100},
	Doi = {10.1109/re.2010.41},
	Isbn = {9781424480227},
	Journal = {2010 18th IEEE International Requirements Engineering Conference},
	Keywords = {agility; requirements engineering; best practices},
	Pages = {289-294},
	Publisher = {IEEE},
	Title = {Transition to Agile Development - Rediscovery of Important Requirements Engineering Practices},
	Url = {http://dx.doi.org/10.1109/RE.2010.41},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/RE.2010.41},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/re.2010.41}}

@article{Sauer:2010,
	Abstract = {In this chapter architecture-centric development is proposed as a means to strengthen the cohesion of distributed teams and to tackle challenges due to geographical and temporal distances and the clash of different cultures. A shared software architecture serves as blueprint for all activities in the development process and ties them together. Architecture-centric development thus provides a plan for task allocation, facilitates the cooperation of globally distributed developers, and enables continuous integration reaching across distributed teams. Advice is also provided for software architects who work with distributed teams in an agile manner.},
	Author = {Sauer, Joachim},
	Bdsk-Color = {4211277567},
	Date-Added = {2019-05-21 18:58:02 +0100},
	Date-Modified = {2020-10-21 16:49:42 +0100},
	Doi = {10.1007/978-3-642-12442-6_22},
	Isbn = {9783642124426},
	Journal = {Agility Across Time and Space},
	Keywords = {Software Architect; Software Architecture; Agile Method; Global Software Development; Continuous Integration},
	Pages = {321--329},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Architecture-Centric Development in Globally Distributed Projects},
	Url = {http://dx.doi.org/10.1007/978-3-642-12442-6_22},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-12442-6_22}}

@article{Richardson:2011,
	Abstract = {You'll have to read further to find out! There are so many interesting things about this article-it's the first in a series based on presentations from the SATURN conference. My first college degree was in chemistry, so there was an immediate connection for me with this story about chemical abstracts. The author brings us architectural wisdom, combined with an agile point of view and weather forecasting.},
	Author = {Richardson, E.},
	Date-Added = {2019-05-21 18:57:38 +0100},
	Date-Modified = {2020-10-21 16:34:34 +0100},
	Doi = {10.1109/ms.2011.152},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {agile; architecture; evolution},
	Number = {6},
	Pages = {9--12},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {What an Agile Architect Can Learn from a Hurricane Meteorologist},
	Url = {http://dx.doi.org/10.1109/MS.2011.152},
	Volume = {28},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2011.152},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2011.152}}

@article{Rendell:2009,
	Abstract = {This experience report, by a projectpsilas technical architect, details the adoption of Agile methods across several teams after one high profile success. The organization had a long history of waterfall development and a clearly defined remit for technical architects. Years of refinement had led to a set of techniques which contradicted many of the ideals held by Agile practitioners. The authorpsilas challenge was to maintain agility and fulfill responsibilities inherited from waterfall processes without reverting to the conventional practices that ultimately lead to the architectpsilas ivory tower.},
	Author = {Rendell, Andrew},
	Date-Added = {2019-05-21 18:57:12 +0100},
	Date-Modified = {2020-10-24 20:53:31 +0100},
	Doi = {10.1109/agile.2009.17},
	Isbn = {9780769537689},
	Journal = {2009 Agile Conference},
	Pages = {180-185},
	Publisher = {IEEE},
	Title = {Descending from the Architect's Ivory Tower},
	Url = {http://dx.doi.org/10.1109/AGILE.2009.17},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/AGILE.2009.17},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/agile.2009.17}}

@inproceedings{Read:2003,
	Abstract = {Agile software development processes are best applied to small teams on small to medium sized projects. Scaling agile methodologies is desired in order to bring the benefits of agile to larger, more complex projects. One way to scale agile methods is via an architecture-centric approach, in which a project is divided into smaller modules on which sub teams can use agile effectively. However, a problem with architecture-centric modifications to agile methods is the introduction of non-agile elements, for instance up-front design and integration difficulties. These issues are discussed and a tool-based solution is presented facilitating the adoption of the architecture-centric agile approach.},
	Author = {Read, Kris and Maurer, Frank},
	Booktitle = {Extreme Programming and Agile Methods - XP/Agile Universe 2003},
	Date-Added = {2019-05-21 18:56:18 +0100},
	Date-Modified = {2020-10-21 16:23:58 +0100},
	Doi = {10.1007/978-3-540-45122-8_16},
	Isbn = {9783540451228},
	Issn = {1611-3349},
	Keywords = {Agile Methods; Scaling; CruiseControl; Continuous Integration; Test Driven Design; Automated Testing},
	Pages = {142--150},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Issues in Scaling Agile Using an Architecture-Centric Approach: A Tool-Based Solution},
	Url = {http://dx.doi.org/10.1007/978-3-540-45122-8_16},
	Year = {2003},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-540-45122-8_16}}

@article{Prause:2012,
	Abstract = {There is a problem with documentation and architectural design in agile projects. This is the result of interviews we have conducted with 37 software engineering experts from industry and academia. In our paper, we analyze the interview results and the origins of the revealed issues. We propose ways to integrate software design methodologies into agile development, and reputation mechanism to solve documentation problems. The contributions of this paper are (i) an investigation of expert opinions on design and documentation problems, (ii) an analysis of problem origins, and (iii) proposals for future improvements of agile processes.},
	Author = {Prause, Christian R. and Durdik, Zoya},
	Date-Added = {2019-05-21 18:55:51 +0100},
	Date-Modified = {2020-10-24 20:52:48 +0100},
	Doi = {10.1109/icssp.2012.6225956},
	Isbn = {9781467323505},
	Journal = {2012 International Conference on Software and System Process (ICSSP)},
	Keywords = {agile development; software design; documentation; software quality; reputation},
	Pages = {130-134},
	Publisher = {IEEE},
	Title = {Architectural design and documentation: Waste in agile development?},
	Url = {http://dx.doi.org/10.1109/ICSSP.2012.6225956},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSSP.2012.6225956},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icssp.2012.6225956}}

@inproceedings{Perez:2010,
	Abstract = {Software systems need software architectures to improve their scalability and maintenance. However, many agile practitioners claim that the upfront design of software architectures is an investment that does not pay off, since customers can rarely appreciate the value delivered by architectures. Furthermore, conventional architectural practices may be considered unacceptable from the Agile values and principles perspective. In this paper, the development of working architectures in agile iterations is presented as an attempt to solve the problem of designing software architectures in Agile. This contribution is based on the new concept of Plastic Partial Component (PPC). PPCs are highly malleable components that can be partially described, what increases the flexibility of architecture design. PPCs based architectures let reinforce some of the agile values and principles. Our experience of putting this contribution into practice is illustrated through the agile development of a Testing Framework for Biogas Plants.},
	Author = {P{\'e}rez, Jennifer and D{\'\i}az, Jessica and Garbajosa, Juan and Alarc{\'o}n, Pedro P.},
	Booktitle = {Software Architecture},
	Date-Added = {2019-05-21 18:54:54 +0100},
	Date-Modified = {2020-10-21 16:24:43 +0100},
	Doi = {10.1007/978-3-642-15114-9_10},
	Isbn = {9783642151149},
	Issn = {1611-3349},
	Keywords = {Software Architecture; Biogas Plant; Software Product Line; Eclipse Modeling Framework; Agile Development},
	Pages = {102--117},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Flexible Working Architectures: Agile Architecting Using PPCs},
	Url = {http://dx.doi.org/10.1007/978-3-642-15114-9_10},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-15114-9_10}}

@inproceedings{Pareto:2010,
	Abstract = {Lean and Agile processes have resolved longstanding problems in engineering communication by replacing document based communication with face-to-face collaboration, but do not yet scale to very large and heterogeneous projects. This paper proposes a compatible extension to lean and agile processes that addresses this limitation. The core idea is to adopt the view of documentation as boundary objects: shared artefacts that maintain integrity across a project's intersecting social worlds. The paper presents a case study, in which interviews with system engineers and designers were analysed to obtain requirements on an architectural description serving as boundary objects in a telecommunications project. The main result is a list of 18 empirically grounded, elementary requirements, worth considering when implementing lean and agile processes in the large.},
	Author = {Pareto, Lars and Eriksson, Peter and Ehnebom, Staffan},
	Booktitle = {Model Driven Engineering Languages and Systems},
	Date-Added = {2019-05-21 18:54:02 +0100},
	Date-Modified = {2020-10-21 16:25:20 +0100},
	Doi = {10.1007/978-3-642-16129-2_29},
	Isbn = {9783642161292},
	Issn = {1611-3349},
	Keywords = {MBSE; engineering communication; architecture; boundary object},
	Pages = {406--419},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Architectural Descriptions as Boundary Objects in System and Design Work},
	Url = {http://dx.doi.org/10.1007/978-3-642-16129-2_29},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-16129-2_29}}

@article{Ozkaya:2013,
	Abstract = {In this paper, we present lessons we learned while working with a large program, helping it to modernize its very large transaction-based system that operates 24x7, while adopting agile software development. We focus on two agile architecting methods we used that provide rapid feedback on the state of agile team support: architecture-centric risk factors for adoption of agile development at scale and incremental architecture evaluations.},
	Author = {Ipek Ozkaya and Mike Gagliardi and Robert L. Nord},
	Bdsk-Color = {4211277567},
	Date-Added = {2019-05-21 18:52:34 +0100},
	Date-Modified = {2020-10-21 16:45:44 +0100},
	Journal = {RAPID AND AGILE STABILITY},
	Number = {3},
	Pages = {17-22},
	Title = {Architecting for Large Scale Agile Software Development: A Risk-Driven Approach},
	Volume = {16},
	Year = {2013}}

@article{Nord:2006,
	Abstract = {The agile software development paradigm and plan-driven approaches each have their strengths and shortcomings. The former emphasizes rapid, flexible development, while the latter emphasizes project and process infrastructure. Many practitioners, particularly of agile methods, tend-to view software architecture in light of the plan-driven side of the spectrum. They think that architecture-centric methods are too much work, equating them with high-ceremony processes emphasizing document production. But many elements make up a successful development approach, including process, product, technology, people, and tools. Software architecture is part of product quality and isn't tied to a particular process, technology, culture, or tool. This article explores the relationship and synergies between architecture-centric design and analysis methods and the extreme programming framework. We chose to focus on XP because it's one of the most mature and best-known agile practices.},
	Author = {Nord, R.L. and Tomayko, J.E.},
	Date-Added = {2019-05-21 18:50:41 +0100},
	Date-Modified = {2020-10-21 16:35:53 +0100},
	Doi = {10.1109/ms.2006.54},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {software architecture; architecture-centric methods; quality attributes; agile software development; Extreme Programming; XP},
	Number = {2},
	Pages = {47--53},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Software architecture-centric methods and agile development},
	Url = {http://dx.doi.org/10.1109/MS.2006.54},
	Volume = {23},
	Year = {2006},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2006.54},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2006.54}}

@article{Nord:2012,
	Abstract = {Lean practices use the principle of Little's law to improve the flow of value to the end user by eliminating sources of waste from a software development process. Little's law defines throughput as a ratio of work in process and cycle time. Increasing throughput (or productivity) requires continuously improving (that is, decreasing) cycle time while ensuring that the work-in-process limit doesn't exceed the capacity available to process the work. This article shares experiences regarding the role architecture plays in lean software management practices. Release plans that give as much emphasis to architecturally significant tasks as to feature-based high-priority functionality can achieve better outcomes by avoiding conditions that lead to wasted time and effort. The application of lean software development practices can improve with better practical guidance on how to manage architecture flow as well as feature flow.},
	Author = {Nord, R. L. and Ozkaya, I. and Sangwan, R. S.},
	Date-Added = {2019-05-21 18:50:06 +0100},
	Date-Modified = {2020-10-21 16:36:56 +0100},
	Doi = {10.1109/ms.2012.109},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {software engineering management; lean software management; flow management; release planning; software architecture; waste},
	Number = {5},
	Pages = {33--39},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Making Architecture Visible to Improve Flow Management in Lean Software Development},
	Url = {http://dx.doi.org/10.1109/MS.2012.109},
	Volume = {29},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2012.109},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2012.109}}

@article{Nord:2011,
	Abstract = {We learned an important lesson recently about breaking down barriers among architects, developers, and other stakeholders when we were engaged on a project and were challenged to deliver the architecture in smaller increments and shorter iterations. We learned how information was used and exchanged among key players participating in the software development process and are seeking to formalize our understanding through principles of workflow from lean software development and how architecture knowledge management can influence defining an appropriate architecture batch size for effective incremental development.},
	Author = {Nord, Robert L. and Brown, Nanette and Ozkaya, Ipek},
	Date-Added = {2019-05-21 18:49:40 +0100},
	Date-Modified = {2020-10-24 20:54:26 +0100},
	Doi = {10.1145/1988676.1988680},
	Isbn = {9781450305969},
	Journal = {Proceeding of the 6th international workshop on SHAring and Reusing architectural Knowledge - SHARK '11},
	Keywords = {architectural knowledge; architecture-centric engineering; lean software development; agility},
	Pages = {9--12},
	Publisher = {ACM Press},
	Title = {Architecting with just enough information},
	Url = {http://dx.doi.org/10.1145/1988676.1988680},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1988676.1988680}}

@article{Madison:2010,
	Abstract = {Agile development starts to build before the outcome is fully understood, adjusts designs and plans as empirical knowledge is gained while building, trusts the judgment of those closest to the problem, and encourages continual collaboration with the ultimate consumers. Architecture establishes a technology stack, creates design patterns, enhances quality attributes, and communicates to all interested parties. The combination of these two spaces is agile architecture-an approach that uses agile techniques to drive towards good architecture. Agility and architecture aren't at odds. Agile development gives the architect repeated opportunities to work closely with the business and technical teams to continually guide systems in the direction of good architecture.},
	Author = {Madison, J.},
	Date-Added = {2019-05-21 18:49:17 +0100},
	Date-Modified = {2020-10-21 16:37:52 +0100},
	Doi = {10.1109/ms.2010.35},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {agile development; enterprise architecture; software engineering; project management; team organization},
	Number = {2},
	Pages = {41--48},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Agile Architecture Interactions},
	Url = {http://dx.doi.org/10.1109/MS.2010.35},
	Volume = {27},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2010.35},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2010.35}}

@article{Landre:2007,
	Abstract = {In this paper we present the experience gained and lessons learned when the IT department at Statoil ASA, a large Oil and Gas company in Norway, applied Domain-Driven design techniques in combination with agile software development practices to assess the software architecture of our next generation oil trading and supply chain application.

Our hypothesis was that the use of object oriented techniques, domain driven design and a proper object-relational mapping tool would significantly improve the performance and reduce the code base compared with current legacy systems.

The legacy system is based on several Oracle databases serving a variety of clients written in Java, Gupta Centura Team Developer and HTML. The databases have a layer of business logic written in PL/SQL offering various system services to the clients.

To validate our new object-oriented software architecture, we re-implemented one of the most computationally heavy and data intensive services using Test First and Domain-Driven design techniques. The resulting software was then tested on a set of servers with a representative subset of data from the production environment.

We found that using these techniques improved our software architecture with respect to performance as well as code quality when running on top of our Oracle databases.

We also tested the switch to an object database from Versant and achieved additional performance gains.},
	Author = {Landre, Einar and Wesenberg, Harald and Olmheim, Jorn},
	Date-Added = {2019-05-21 18:48:46 +0100},
	Date-Modified = {2020-10-24 20:49:02 +0100},
	Doi = {10.1145/1297846.1297967},
	Isbn = {9781595938657},
	Journal = {Companion to the 22nd ACM SIGPLAN conference on Object oriented programming systems and applications companion - OOPSLA '07},
	Keywords = {object databases; versant; domain-driven design; agile software development; test first; test driven design; relational databases; PL/SQL; oracle; object-relational mapping},
	Pages = {983--993},
	Publisher = {ACM Press},
	Title = {Agile enterprise software development using domain-driven design and test first},
	Url = {http://dx.doi.org/10.1145/1297846.1297967},
	Year = {2007},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1297846.1297967}}

@article{Krunic:2007,
	Abstract = {Some projects are simply too big to finish on the release schedule that you want to maintain. Rally's agile engineering team delivered a very disruptive architectural change lasting nine months in parallel with three releases. This paper will show how this was done without prolonging the usual release cycles and without technically crippling our product or doing a lot of throwaway work. The main elements of our approach were: the "sacrifice one" pattern, incremental delivery of the architectural change when possible, technical infrastructure modifications to support incremental changes to the architecture, and addressing the biggest risk first. When we were close to finished, we added the whole team for the final push to release with the new architecture. The end result was three successful releases of the existing system prior to the final release rolling out the new architecture.},
	Author = {Krunic, Veljko},
	Date-Added = {2019-05-21 18:48:07 +0100},
	Date-Modified = {2020-10-24 20:50:54 +0100},
	Doi = {10.1109/agile.2007.7},
	Isbn = {0769528724},
	Journal = {AGILE 2007 (AGILE 2007)},
	Pages = {162-168},
	Publisher = {IEEE},
	Title = {Agile Architecture - Changing Application Servers},
	Url = {http://dx.doi.org/10.1109/AGILE.2007.7},
	Year = {2007},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/AGILE.2007.7},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/agile.2007.7}}

@article{Krueger:2006,
	Abstract = {Rapid, yet methodical, systems of systems integration is in high demand. Application areas such as homeland security and disaster response add to the challenge because of a unique set of integration requirements; three examples are: (1) a high demand for flexibility with respect to the configuration and support of business processes to anticipate and cater to changing threat and mitigation scenarios, (2) high agility demands during both development and production to address legacy and emergent capabilities, processes, applications and technologies, (3) wide variety of trust relationships among and across stakeholders and their organizations. In this paper we report on an approach for balancing challenging integration requirements while rapidly delivering a high-quality, value added, integrated system architecture and service-based implementation infrastructure. In particular, we show how the choice of an enterprise service bus as a deployment infrastructure helps discharge many of the obligations induced by the mentioned requirements - if it is combined with an agile, yet systematic approach for architecture discovery and design},
	Author = {Krueger, I.H. and Meisinger, M. and Menarini, M. and Pasco, S.},
	Date-Added = {2019-05-21 18:47:44 +0100},
	Date-Modified = {2020-10-24 20:50:16 +0100},
	Doi = {10.1109/iri.2006.252387},
	Isbn = {0780397886},
	Journal = {2006 IEEE International Conference on Information Reuse & Integration},
	Pages = {51-56},
	Publisher = {IEEE},
	Title = {Rapid Systems of Systems Integration - Combining an Architecture-Centric Approach with Enterprise Service Bus Infrastructure},
	Url = {http://dx.doi.org/10.1109/IRI.2006.252387},
	Year = {2006},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/IRI.2006.252387},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/iri.2006.252387}}

@article{Kruchten:2011,
	Abstract = {This paper presents a contextual model for software‐intensive systems development to guide the adoption and adaptation of agile software development practices. This model was found especially useful when the project context departs significantly from the ``agile sweet spot'', that is, the ideal conditions in which agile software development practices originated from, and where they are most likely to succeed, ``out of the box''. This is the case for large systems, distributed development environment, safety‐critical systems, system requiring a novel architecture, or systems with an unorthodox business model or governance model. },
	Author = {Kruchten, Philippe},
	Date-Added = {2019-05-21 18:47:08 +0100},
	Date-Modified = {2020-10-21 16:32:24 +0100},
	Doi = {10.1002/smr.572},
	Issn = {2047-7473},
	Journal = {Journal of Software: Evolution and Process},
	Keywords = {agile software development; software development process; process adaptation},
	Number = {4},
	Pages = {351--361},
	Publisher = {Wiley},
	Title = {Contextualizing agile software development},
	Url = {http://dx.doi.org/10.1002/smr.572},
	Volume = {25},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1002/smr.572}}

@article{Krogdahl:2005,
	Abstract = {Today, businesses have to respond with flexibility and speed to ever-changing customer demand, market opportunities and external threats. Service oriented architecture (SOA) is a special way to look a IT systems, focusing on their adaptability - the ability to respond to changing and new requirements. It is more than evident that agile approaches to software development seem to be a natural fit for developing such systems. In this article, we try to harden this evidence. We take a look on the fundamentals of agile software development and assess their suitability for SOA-based systems.},
	Author = {Krogdahl, P. and Luef, G. and Steindl, C.},
	Date-Added = {2019-05-21 18:46:39 +0100},
	Date-Modified = {2020-10-24 20:54:05 +0100},
	Doi = {10.1109/scc.2005.86},
	Isbn = {0769524087},
	Journal = {2005 IEEE International Conference on Services Computing (SCC'05) Vol-1},
	Pages = {93-100},
	Publisher = {IEEE},
	Title = {Service-oriented agility: an initial analysis for the use of agile methods for SOA development},
	Url = {http://dx.doi.org/10.1109/SCC.2005.86},
	Year = {2005},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SCC.2005.86},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/scc.2005.86}}

@article{Koontz:2012,
	Abstract = {With increasing emphasis on avionics system rapid development and reduced cycle times, software architecting practices can be applied with agility to enhance evolving stakeholder concerns while sustaining long-term business goals.},
	Author = {Ronald J. Koontz and Robert L. Nord},
	Bdsk-Color = {4211277567},
	Date-Added = {2019-05-21 18:45:24 +0100},
	Date-Modified = {2020-10-21 16:45:21 +0100},
	Journal = {RAPID AND AGILE STABILITY},
	Number = {3},
	Pages = {14-19},
	Title = {Architecting for Sustainable Software Delivery},
	Volume = {15},
	Year = {2012}}

@article{Keuler:2012,
	Abstract = {In this paper, we present industrial experiences made by combining two polarizing disciplines in software engineering: software architecture and agile software development. In particular, we show how architectural design decisions could be made, communicated, and sustained in an agile development environment by using a light-weight component framework. The concepts of the component framework have proven to be effective in addressing challenges such as connecting architectural design decisions to a system's implementation and making the architecture tangible for the developers. This is of utmost importance when the software is delivered in accordance with agile principles, such as, working software over comprehensive documentation, or responding to change over following a plan.},
	Author = {Keuler, Thorsten and Wagner, Stefan and Winkler, Bernhard},
	Date-Added = {2019-05-21 18:44:30 +0100},
	Date-Modified = {2020-10-24 20:49:36 +0100},
	Doi = {10.1109/wicsa-ecsa.212.35},
	Isbn = {9780769548272},
	Journal = {2012 Joint Working IEEE/IFIP Conference on Software Architecture and European Conference on Software Architecture},
	Keywords = {Agile software development; Component-based development},
	Pages = {229-233},
	Publisher = {IEEE},
	Title = {Architecture-aware Programming in Agile Environments},
	Url = {http://dx.doi.org/10.1109/WICSA-ECSA.212.35},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/WICSA-ECSA.212.35},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/wicsa-ecsa.212.35}}

@article{Keeling:2011,
	Abstract = {The system metaphor was proposed in Extreme Programming as a lightweight alternative to more rigorous architecture practices, but many teams have trouble using metaphors effectively to improve team communication or evaluate a system's architecture. This is no surprise as few agile teams have had training in architecture practices let alone in how to create metaphors. In our experience this does not invalidate the metaphor, but rather shows that more guidance is needed in the proper use of metaphors. This paper outlines one team's positive experience using system metaphors in the development of a medium-sized, service-oriented, enterprise system. Specific guidelines for creating effective metaphors are presented along with concrete examples.},
	Author = {Keeling, Michael and Velichansky, Michail},
	Date-Added = {2019-05-21 18:44:11 +0100},
	Date-Modified = {2020-10-24 20:52:11 +0100},
	Doi = {10.1109/agile.2011.28},
	Isbn = {9781612844268},
	Journal = {2011 AGILE Conference},
	Keywords = {software architecture; Agile; Extreme Programming; XP; system metaphor; architecture styles; architecture patterns},
	Pages = {256-262},
	Publisher = {IEEE},
	Title = {Making Metaphors that Matter},
	Url = {http://dx.doi.org/10.1109/AGILE.2011.28},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/AGILE.2011.28},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/agile.2011.28}}

@article{Kanwal:2010,
	Abstract = {The software development industry suffers from the delay in project completion time due to heavy documentation requirements of traditional process models. To overcome these delays, agile process models are getting a wide acceptance and popularity in the industry. The beauty of these models is light weight documentation and heavy intercommunications. Due to an emphasis of these models on rapid development, there is an ever increasing need of architecture evaluation. A single software architecture evaluation method (SAEM) capable of preserving the agility does not exist at the moment. In this paper, we have proposed a hybrid SAEM for feature driven development (FDD) agile process model. The proposed SAEM is hybrid of quality attribute workshop (QAW), architecture tradeoff analysis method (ATAM) and active review for intermediate designs (ARID).},
	Author = {Kanwal, Faria and Junaid, Komal and Fahiem, Muhammad Abuzar},
	Date-Added = {2019-05-21 18:43:50 +0100},
	Date-Modified = {2020-10-24 20:51:51 +0100},
	Doi = {10.1109/cise.2010.5676863},
	Isbn = {9781424453917},
	Journal = {2010 International Conference on Computational Intelligence and Software Engineering},
	Keywords = {process models; Software architecture evaluation methods; FDD; QAW; ATAM; ARID},
	Pages = {1-5},
	Publisher = {IEEE},
	Title = {A Hybrid Software Architecture Evaluation Method for FDD - An Agile Process Model},
	Url = {http://dx.doi.org/10.1109/CISE.2010.5676863},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/CISE.2010.5676863},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/cise.2010.5676863}}

@article{Jensen:2008,
	Abstract = {Within the field of Software Engineering emergence of agile methods has been a hot topic since the late 90s. eXtreme Programming (XP) ([1]) was one of the first agile methods and is one of the most well-known. However research has pointed to weaknesses in XP regarding supporting development of viable architectures. To strengthen XP in this regard a new practice: Developer Stories ([2]) was introduced in 2006 - mainly based on a theoretical argumentation.

This paper reports from extensive experimentation with, and elaboration of the new practice. Results from this experimentation shows that using Developer Stories increases the likelihood of developing a viable architecture through a series of deliberate choices, through creating disciplined and recurring activities that: 1) Facilitate sharing and embodying of knowledge about architectural issues, and 2) heighten visibility of refactorings for both customers and developers.},
	Author = {Jensen, Rolf Njor and Platz, Niels and Tj{\o}rneh{\o}j, Gitte},
	Bdsk-Color = {4211277567},
	Date-Added = {2019-05-21 18:43:27 +0100},
	Date-Modified = {2020-10-21 16:27:24 +0100},
	Doi = {10.1007/978-3-540-88655-6_13},
	Isbn = {9783540886556},
	Issn = {1865-0937},
	Journal = {Software and Data Technologies},
	Keywords = {Knowledge Sharing; Architectural Change; User Story; Agile Method; Pair Programming},
	Pages = {172--184},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Developer Stories: Improving Architecture in Agile Practice - How Facilitating Knowledge Management and Putting the Customer in the Drivers Seat Enables Sound Architectural Design},
	Url = {http://dx.doi.org/10.1007/978-3-540-88655-6_13},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-540-88655-6_13}}

@article{Isham:2008,
	Abstract = {In early 2007, ChannelAdvisor undertook an ambitious project to rearchitect one of its core product offerings. Flush with early success from rapid customer adoption, the foundation for this product had grown well beyond its initial design. As defects grew in frequency and severity, pressure mounted to "fix it yesterday", but consensus on exactly how proved elusive. "Fix it right" ideals battled with "fix it now", ultimately resulting in a new architecture that was inefficient, incomplete, and, after 3 long months of "working harder, not smarter", cancelled. In this experience report I will recap my experience as a product development manager sponsoring this project; revealing how the project went awry, what the team learned, and how the utilization of the Scrum process not only created a scalable, reliable architecture, but also greatly improved the ongoing productivity and morale of the product team.},
	Author = {Isham, Mark},
	Date-Added = {2019-05-21 18:43:05 +0100},
	Date-Modified = {2020-10-24 20:48:43 +0100},
	Doi = {10.1109/agile.2008.16},
	Isbn = {9780769533216},
	Journal = {Agile 2008 Conference},
	Keywords = {agile; architecture; redesign legacy},
	Pages = {484-489},
	Publisher = {IEEE},
	Title = {Agile Architecture IS Possible You First Have to Believe!},
	Url = {http://dx.doi.org/10.1109/Agile.2008.16},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/Agile.2008.16},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/agile.2008.16}}

@inproceedings{Ihme:2005,
	Abstract = {Architectural design patterns capture proven solutions of skilled designers to many recurring design problems. However, these patterns may lead to large solutions and overengineering, which are considered alarm signals from the viewpoint of agility. This paper reports the results of two case studies focusing on the adoption of architectural design patterns in agile development of mobile applications for real markets. The Agile Architecture Line Approach and Model were applied in the case studies. The used approach and model strive for a light and robust architecture design framework for mobile applications and services. In this approach, current architectural knowledge concerning available patterns and solutions will be captured during the Architecture Line Definition phase taking place before production. Based on the experience gained from the first case project, more emphasis was laid on capturing the current architectural knowledge about the patterns and solutions proven useful and effective in similar applications running on the used platform. The patterns are augmented before production with suitable supporting information so as to enable them to help inexperienced designers to improve the quality of mobile applications developed in nine-week agile projects in concordance with agile values. This paper demonstrates empirically that architectural design patterns can help to develop viable software architectures and to document them in a useful way, as applied in the challenging context of tough time-to-market demads, the mobile development environment and the J2ME platform. This paper further shows that pattern-based rationale of design decisions and architectural components can be a key success factor in designing mobile software and improving its quality. The empirical results of this paper are presented in a manner enabling practitioners to utilize the proposed solutions in similar projects.},
	Author = {Tuomas Ihme and Ihme, Tuomas and Abrahamsson, Pekka},
	Booktitle = {Proceedings of the International Conference on Agility (ICAM)},
	Date-Added = {2019-05-21 18:40:37 +0100},
	Date-Modified = {2020-10-21 16:25:59 +0100},
	Doi = {10.1.1.120.6792},
	Keywords = {Agile methodologies; Architectural patterns; Extreme programming; Mobile software; New product development},
	Pages = {155-162},
	Title = {The Use of Architectural Patterns in the Agile Software Development of Mobile Applications},
	Url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.120.6792},
	Year = {2005},
	Bdsk-Url-1 = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.120.6792},
	Bdsk-Url-2 = {https://doi.org/10.1.1.120.6792}}

@article{Ihme:2012,
	Abstract = {The use of modern agile software development methods in large organisations requires tailoring agile development to the organisations' needs. This study concentrated on studying integrating software product line and agile application development in the context of large and complex financial IT systems. The study was conducted by interviewing a wide representation from the case organisation's personnel developing in-house software for the company's own use. The results indicate that the guidelines of the Scrum method for agile project management are valid also for the studied company type. However, each project in the studied company should acknowledge the constraints set by other projects and the complex technical infrastructure, data security issues and system portfolio in the organisation's product line platform. In order to promote re-use and avoid risks, means and mechanisms are needed to coordinate and synchronise multiple projects and their releases on business level, the project's compatibility with its constraints on system architecture level and the direction of software architecture on project team level.},
	Author = {Ihme, Tuomas},
	Date-Added = {2019-05-21 18:40:06 +0100},
	Date-Modified = {2020-10-21 16:31:39 +0100},
	Doi = {10.1007/s13173-012-0096-0},
	Issn = {1678-4804},
	Journal = {Journal of the Brazilian Computer Society},
	Keywords = {Software product line; Agile software development; Scrum; Software architecture; Qualitative study},
	Number = {3},
	Pages = {257--274},
	Publisher = {Springer Nature},
	Title = {Scrum adoption and architectural extensions in developing new service applications of large financial IT systems},
	Url = {http://dx.doi.org/10.1007/s13173-012-0096-0},
	Volume = {19},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s13173-012-0096-0}}

@article{Hayata:2012,
	Abstract = {Both agile software development and lean architecture have been studied in the software engineering field. Combining these two approaches has also been investigated. However, the existing research and practices only present the principles but fail to develop a framework of the software development for practitioners to follow. In this paper, a framework about how na{\"\i}ve agile practices could be fulfilled by introducing "lean" practices under the DCI (Data-Context-Interaction) paradigm is proposed. Lean practice is an end-user-focused and value-centric system design. In the proposed framework, lean architecture is complementary to agile principles and disciplines and supports agile development. This paper is exploring the possibilities of how agile methods can restore its lost insights and possibly be reinforced by lean thinking. Meanwhile, it is also examined what lean can do "beyond" agile. A new lean approach to building domain architecture comes from Data-Context-Interaction (DCI) paradigm which facilitates to represent the domain architecture intuitively. DCI approach allows us to successfully decouple between domain and business-logic features and provides an approach for lean practitioners to design system architecture much closer to the real-world domain. It is claimed that the investment into lean and agile methodologies go hand in hand from organizational to technical aspects by tying up with lean concepts as the backbone for agile methods. How lean makes it right and how agile makes it fast with the DCI paradigm will be demonstrated with an example. The main contribution to the software development will be presented.},
	Author = {Hayata, Tomohiro and Han, Jianchao and Beheshti, Mohsen},
	Date-Added = {2019-05-21 18:39:38 +0100},
	Date-Modified = {2020-10-24 20:48:06 +0100},
	Doi = {10.1109/itng.2012.157},
	Isbn = {9780769546544},
	Journal = {2012 Ninth International Conference on Information Technology - New Generations},
	Keywords = {Agile; Lean; domain architecture; Data-Context-Interaction (DCI); software development; architectural design},
	Pages = {343-348},
	Publisher = {IEEE},
	Title = {Facilitating Agile Software Development with Lean Architecture in the DCI Paradigm},
	Url = {http://dx.doi.org/10.1109/ITNG.2012.157},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ITNG.2012.157},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/itng.2012.157}}

@article{Hadar:2013,
	Abstract = {The use of agile development methodologies in the software industry has increased significantly over the past decade. This has led to efforts to adjust these methodologies to enterprise products and complex systems' development, and specifically to combine the requirement of minimalism with the need for well-defined up-front architecture artifacts. Nevertheless, in many cases, architecture is accompanied with extensive documentation that requires significant effort to review and maintain throughout the development lifecycle. This paper presents a case study that aims at identifying difficulties architects and other stakeholders encounter when dealing with architecture documentation in agile development. The findings indicate that the architecture specification document is usually very long, complex, and not self-explanatory. In order to adjust the architecture documentation to the lean and minimal documentation approach of agile processes, we propose a considerably shorter abstract specification document, requiring reduced documentation efforts and resulting in a lean documentation that is easier to review, update, and communicate.},
	Author = {Hadar, Irit and Sherman, Sofia and Hadar, Ethan and Harrison, John J.},
	Date-Added = {2019-05-21 18:39:13 +0100},
	Date-Modified = {2020-10-24 20:52:29 +0100},
	Doi = {10.1109/chase.2013.6614746},
	Isbn = {9781467362900},
	Journal = {2013 6th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)},
	Keywords = {Software architecture in agile development; architecture documentation},
	Pages = {121-124},
	Publisher = {IEEE},
	Title = {Less is more: Architecture documentation for agile development},
	Url = {http://dx.doi.org/10.1109/CHASE.2013.6614746},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/CHASE.2013.6614746},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/chase.2013.6614746}}

@article{Hadar:2008,
	Abstract = {Tactical agile development and strategic architectural evolution are viewed as opposite ends of the development spectrum, with the long-term value of applying an architecture-centric approach seemingly at odds with rapid development, featuring its informal documentation activities. The value of a long-term vision, or ar-chitecture, is particularly high in the context of product integra-tion and research. However, there is also benefit in rapid and early feedback on incremental deliverables, as featured in agile development.

To extract the main benefits of both worlds we introduce the CA Agile Architecture (C3A) method, targeted for the architec-ture and design phases of the development life cycle. Its founda-tion is the Reference and Implementation Architecture, which features a lean one-page per component contract, as well as sev-eral abstraction levels. The C3A artifacts are governed by a cyclic process of architectural evaluation and evolution, with accompa-nying coaching and training activities.

This work-in-progress is being prototyped with three product teams, varying in team size, product maturity and complexity, and geographical location. C3A features a common tactical-focused agenda for the functional and system architectures, with mini-mally overlapping strategic views.},
	Author = {Hadar, Ethan and Silberman, Gabriel M.},
	Date-Added = {2019-05-21 18:37:26 +0100},
	Date-Modified = {2020-10-24 20:51:15 +0100},
	Doi = {10.1145/1449814.1449816},
	Isbn = {9781605582207},
	Journal = {Companion to the 23rd ACM SIGPLAN conference on Object oriented programming systems languages and applications - OOPSLA Companion '08},
	Keywords = {reference architecture; architecture centric evolution; UML; design reviews},
	Pages = {641--652},
	Publisher = {ACM Press},
	Title = {Agile architecture methodology: Long term strategy interleaved with short term tactics},
	Url = {http://dx.doi.org/10.1145/1449814.1449816},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1449814.1449816}}

@article{Farhan:2009,
	Abstract = {Agile process models have evolved in the recent past to overcome the problems associated with traditional models however, these are facing many challenges. One of these challenges is the lack of proper software architecture evaluation method (SAEM) suitable for agile process models. Our research focuses on developing a suitable SAEM for agile process models. Crystal being a light weight agile process model and architecture tradeoff analysis method (ATAM) being a robust SAEM, we need some modifications in ATAM so that it can be mapped for Crystal. This mapping is very crucial because without proper evaluation, agile models can suffer with severe quality drawbacks as well as maintenance problems. We have excluded some phases in ATAM to make it suitable for Crystal. We also performed different surveys on agile process models and SAEM from professional and academic domains.},
	Author = {Farhan, Saima and Tauseef, Huma and Fahiem, Muhammad Abuzar},
	Date-Added = {2019-05-21 18:36:42 +0100},
	Date-Modified = {2020-10-24 20:47:09 +0100},
	Doi = {10.1109/wcse.2009.405},
	Isbn = {9780769535708},
	Journal = {2009 WRI World Congress on Software Engineering},
	Keywords = {Agility; Light weight process models; ATAM; crystal; architecture evaluation methods},
	Pages = {121-125},
	Publisher = {IEEE},
	Title = {Adding Agility to Architecture Tradeoff Analysis Method for Mapping on Crystal},
	Url = {http://dx.doi.org/10.1109/WCSE.2009.405},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/WCSE.2009.405},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/wcse.2009.405}}

@article{Falessi:2010,
	Abstract = {A study of the relationship between agile methods and software architecture surveyed 72 IBM software developers. Results suggest that the two approaches are compatible. In particular, agile developers perceived architectural principles as important and supportive to agile values, rather than contrasting or neutral to them. This positive perception of software architectural principles and practice bodes well for future efforts to integrate agile and architecture practices.},
	Author = {Falessi, Davide and Cantone, Giovanni and Sarcia', Salvatore Alessandro and Calavaro, Giuseppe and Subiaco, Paolo and D'Amore, Cristiana},
	Date-Added = {2019-05-21 18:36:19 +0100},
	Date-Modified = {2020-10-21 16:38:30 +0100},
	Doi = {10.1109/ms.2010.49},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {software architecture; agile software development},
	Number = {2},
	Pages = {23--25},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Peaceful Coexistence: Agile Developer Perspectives on Software Architecture},
	Url = {http://dx.doi.org/10.1109/MS.2010.49},
	Volume = {27},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2010.49},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2010.49}}

@article{Faber:2010,
	Abstract = {Architects provide those system qualities as values to their customers, communicating and implementing them in close cooperation with developers. In this way, architects also can and should play an important role in agile development projects. As a service to application developers, architects participate in coding activities and sustain the architecture's effectiveness throughout a project's lifetime.},
	Author = {Faber, R.},
	Date-Added = {2019-05-21 18:35:50 +0100},
	Date-Modified = {2020-10-21 16:39:40 +0100},
	Doi = {10.1109/ms.2010.37},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {software architecture; agile development; software engineering; management; development teams; software engineering process; software process models},
	Number = {2},
	Pages = {33--40},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Architects as Service Providers},
	Url = {http://dx.doi.org/10.1109/MS.2010.37},
	Volume = {27},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2010.37},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2010.37}}

@article{Eloranta:2012,
	Abstract = {Combining agile project management approaches such as Scrum and software architecture related work has been found problematic. In this paper, we propose several models to align architecture knowledge management with Scrum, based on different architecture work practices in Scrum identified in the industry. The proposed models exploit an architectural knowledge base with a capability to generate architectural documents, and a decision-based architecture evaluation method.},
	Author = {Eloranta, Veli-Pekka and Koskimies, Kai},
	Date-Added = {2019-05-21 18:35:18 +0100},
	Date-Modified = {2020-10-24 20:48:24 +0100},
	Doi = {10.1145/2361999.2362023},
	Isbn = {9781450315685},
	Journal = {Proceedings of the WICSA/ECSA 2012 Companion Volume on - WICSA/ECSA '12},
	Keywords = {agile; Scrum; architecture knowledge management},
	Pages = {112--115},
	Publisher = {ACM Press},
	Title = {Aligning architecture knowledge management with Scrum},
	Url = {http://dx.doi.org/10.1145/2361999.2362023},
	Year = {2012},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2361999.2362023}}

@article{Durdik:2011,
	Abstract = {Agile methods and architectural modelling have been considered to be mutually exclusive. On the one hand, agile methods try to reduce overheads by avoiding activities that do not directly contribute to the immediate needs of the current project. This often leads to bad cross-project reuse. On the other hand, architectural modelling is considered a pre requisite for the systematic cross-project reuse and for the resulting increase in software developer productivity. The theme of this paper is to address the relationship between agile methods and architectural modelling and to propose a novel process for agile architectural modelling, which drives requirements elicitation through the use of patterns and components. This process is in-line with agile principles and is illustrated on an example application. Additionally, the paper points out the challenges connected to the process validation and proposes an approach for the empirical validation addressing these challenges.},
	Author = {Durdik, Zoya},
	Date-Added = {2019-05-21 18:34:49 +0100},
	Date-Modified = {2020-10-24 20:46:48 +0100},
	Doi = {10.1145/2000259.2000291},
	Isbn = {9781450307246},
	Journal = {Proceedings of the joint ACM SIGSOFT conference -- QoSA and ACM SIGSOFT symposium -- ISARCS on Quality of software architectures -- QoSA and architecting critical systems -- ISARCS - QoSA-ISARCS '11},
	Keywords = {component selection; architectural modelling; agile methods; software architecture; development process; scrum; design patterns},
	Pages = {183--192},
	Publisher = {ACM Press},
	Title = {Towards a process for architectural modelling in agile software development},
	Url = {http://dx.doi.org/10.1145/2000259.2000291},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/2000259.2000291}}

@article{Diaz:2013,
	Abstract = {Software architecture is a key factor to scale up Agile Software Development (ASD) in large software-intensive systems. Currently, software architectures are more often approached through mechanisms that enable to incrementally design and evolve software architectures (aka. agile architecting). Agile architecting should be a light-weight decision-making process, which could be achieved by providing knowledge to assist agile architects in reasoning about changes. This paper presents the novel solution of using change-impact knowledge as the main driver for agile architecting. The solution consists of a Change Impact Analysis technique and a set of models to assist agile architects in the change (decision-making) process by retrieving the change-impact architectural knowledge resulting from adding or changing features iteration after iteration. To validate our approach, we have put our solution into practice by running a project of a metering management system in electric power networks in an i-smart software factory.},
	Author = {Diaz, Jessica and Perez, Jennifer and Garbajosa, Juan and Yague, Agustin},
	Date-Added = {2019-05-21 18:34:17 +0100},
	Date-Modified = {2020-10-24 20:50:37 +0100},
	Doi = {10.1109/hicss.2013.127},
	Isbn = {9780769548920},
	Journal = {2013 46th Hawaii International Conference on System Sciences},
	Keywords = {Agile Architecting; Change Impact Analysis; Agile Software Development; Architectural Knowledge},
	Pages = {4780-4789},
	Publisher = {IEEE},
	Title = {Change-Impact Driven Agile Architecting},
	Url = {http://dx.doi.org/10.1109/HICSS.2013.127},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/HICSS.2013.127},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/hicss.2013.127}}

@article{Diaz:2014,
	Abstract = {Context

Software Product Line Engineering implies the upfront design of a Product-Line Architecture (PLA) from which individual product applications can be engineered. The big upfront design associated with PLAs is in conflict with the current need of ``being open to change''. To make the development of product-lines more flexible and adaptable to changes, several companies are adopting Agile Product Line Engineering. However, to put Agile Product Line Engineering into practice it is still necessary to make mechanisms available to assist and guide the agile construction and evolution of PLAs.
Objective

This paper presents the validation of a process for ``the agile construction and evolution of product-line architectures'', called Agile Product-Line Architecting (APLA). The contribution of the APLA process is the integration of a set of models for describing, documenting, and tracing PLAs, as well as an algorithm for guiding the change decision-making process of PLAs. The APLA process is assessed to prove that assists Agile Product Line Engineering practitioners in the construction and evolution of PLAs.
Method

Validation is performed through a case study by using both quantitative and qualitative analysis. Quantitative analysis was performed using statistics, whereas qualitative analysis was performed through interviews using constant comparison, triangulation, and supporting tools. This case study was conducted according to the guidelines of Runeson and H{\"o}st in a software factory where three projects in the domain of Smart Grids were involved.
Results

APLA is deployed through the Flexible-PLA modeling framework. This framework supported the successful development and evolution of the PLA of a family of power metering management applications for Smart Grids.
Conclusions

APLA is a well-supported solution for the agile construction and evolution of PLAs. This case study illustrates that the proposed solution for the agile construction of PLAs is viable in an industry project on Smart Grids.},
	Author = {D{\'\i}az, Jessica and P{\'e}rez, Jennifer and Garbajosa, Juan},
	Date-Added = {2019-05-21 18:33:52 +0100},
	Date-Modified = {2020-10-21 16:33:33 +0100},
	Doi = {10.1016/j.infsof.2014.01.014},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Agile product-line engineering; Agile product-line architecting; Product-line architectural knowledge; Change impact analysis; Case study},
	Number = {7},
	Pages = {727--748},
	Publisher = {Elsevier BV},
	Title = {Agile product-line architecting in practice: A case study in smart grids},
	Url = {http://dx.doi.org/10.1016/j.infsof.2014.01.014},
	Volume = {56},
	Year = {2014},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/j.infsof.2014.01.014}}

@inproceedings{Cleland_Huang:2013,
	Abstract = {[Context and motivation] Architecturally significant requirements (ASRs) drive and constrain many aspects of the architecture. It is therefore beneficial to elicit and analyze these requirements in early phases of a project so that they can be taken into consideration during the architectural design of the system. Unfortunately failure to invest upfront effort in exploring stakeholders quality concerns, can lead to the need for significant refactoring efforts to accommodate emerging requirements. This problem is particularly evident in agile projects which are inherently incremental. [Question/Problem] Existing techniques for early discovery of ASRs, such as Win-Win and i*, are typically rejected by agile development teams as being somewhat heavy-weight. A light-weight approach is therefore needed to help developers identify and explore critical architectural concerns early in the project. [Principal ideas/results] In this paper we present the use of Architecturally-Savvy Personas (ASP-Lite). The personas are used to emerge and analyze stakeholders' quality concerns and to drive and validate the architectural design. ASP-Lite emerged from our experiences working with the requirements and architectural design of the TraceLab project. The approach proved effective for discovering, analyzing, and managing architecturally significant requirements, and then for designing a high-level architectural solution which was designed to satisfy requirements despite significant interdependencies and tradeoffs. [Contributions] This paper presents the ASP-Lite approach and describes its support for architectural design in the US$2 Million TraceLab project.},
	Author = {Cleland-Huang, Jane and Czauderna, Adam and Keenan, Ed},
	Bdsk-Color = {4211277567},
	Booktitle = {Requirements Engineering: Foundation for Software Quality},
	Date-Added = {2019-05-21 18:33:04 +0100},
	Date-Modified = {2020-10-21 16:19:52 +0100},
	Doi = {10.1007/978-3-642-37422-7_2},
	Isbn = {9783642374227},
	Issn = {1611-3349},
	Keywords = {personas; architecture; requirements; architecturally significant requirements; tradeoffs},
	Pages = {18--33},
	Publisher = {Springer Berlin Heidelberg},
	Title = {A Persona-Based Approach for Exploring Architecturally Significant Requirements in Agile Projects},
	Url = {http://dx.doi.org/10.1007/978-3-642-37422-7_2},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-37422-7_2}}

@inproceedings{Christensen:2010,
	Abstract = {In this paper, we present a novel technique for assessing and prioritizing architectural quality in large-scale software development projects. The technique can be applied with relatively little effort by software architects and thus suited for agile development in which quality attributes can be assessed and prioritized, e.g., within each development sprint. We outline the processes and metrics embodied in the technique, and report initial experiences on the benefits and liabilities. In conclusion, the technique is considered valuable and a viable tool, and has benefits in an architectural, technical, context, as well as in a business and people context.},
	Author = {Christensen, Henrik B{\ae}rbak and Hansen, Klaus Marius and Lindstr{\o}m, Bo},
	Booktitle = {Software Architecture},
	Date-Added = {2019-05-21 18:32:16 +0100},
	Date-Modified = {2020-10-21 16:26:44 +0100},
	Doi = {10.1007/978-3-642-15114-9_11},
	Isbn = {9783642151149},
	Issn = {1611-3349},
	Keywords = {Quality Attribute; Software Architect; Software Architecture; Quality Framework; Importance Level},
	Pages = {118--132},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Lightweight and Continuous Architectural Software Quality Assurance Using the aSQA Technique},
	Url = {http://dx.doi.org/10.1007/978-3-642-15114-9_11},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-15114-9_11}}

@article{Christensen:2011,
	Abstract = {Agile development methods favor speed and feature producing iterations. Software architecture, on the other hand, is ripe with techniques that are slow and not oriented directly towards implementation of costumers' needs. Thus, there is a major challenge in retaining architectural information in a fast-faced agile project. We propose to embed as much architectural information as possible in the central artefact of the agile universe, the code. We argue that thereby valuable architectural information is retained for (automatic) documentation, validation, and further analysis, based on a relatively small investment of effort. We outline some preliminary examples of architectural annotations in Java and Python and their applicability in practice.},
	Author = {Christensen, Henrik B{\ae}rbak and Hansen, Klaus Marius},
	Date-Added = {2019-05-21 18:31:30 +0100},
	Date-Modified = {2020-10-24 20:46:24 +0100},
	Doi = {10.1145/1985793.1985948},
	Isbn = {9781450304450},
	Journal = {Proceeding of the 33rd international conference on Software engineering - ICSE '11},
	Keywords = {software architecture; agile methods; architectural reconstruction},
	Pages = {928--931},
	Publisher = {ACM Press},
	Title = {Towards architectural information in implementation: NIER track},
	Url = {http://dx.doi.org/10.1145/1985793.1985948},
	Year = {2011},
	Bdsk-Url-1 = {http://dx.doi.org/10.1145/1985793.1985948}}

@inproceedings{Chivers:2005,
	Abstract = {The effective provision of security in an agile development requires a new approach: traditional security practices are bound to equally traditional development methods. However, there are concerns that security is difficult to build incrementally, and can prove prohibitively expensive to refactor. This paper describes how to grow security, organically, within an agile project, by using an incremental security architecture which evolves with the code. The architecture provides an essential bridge between system-wide security properties and implementation mechanisms, a focus for understanding security in the project, and a trigger for security refactoring. The paper also describes criteria that allow implementers to recognize when refactoring is needed, and a concrete example that contrasts incremental and `top-down' architectures.},
	Author = {Chivers, Howard and Paige, Richard F. and Ge, Xiaocheng},
	Booktitle = {Extreme Programming and Agile Processes in Software Engineering},
	Date-Added = {2019-05-21 18:30:00 +0100},
	Date-Modified = {2020-10-21 16:22:55 +0100},
	Doi = {10.1007/11499053_7},
	Isbn = {9783540314875},
	Issn = {1611-3349},
	Keywords = {Security Requirement; Security Feature; Estate Agent; Security Architecture; Agile Method},
	Pages = {57--65},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Agile Security Using an Incremental Security Architecture},
	Url = {http://dx.doi.org/10.1007/11499053_7},
	Year = {2005},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/11499053_7}}

@article{Buschmann:2013,
	Abstract = {Does agile development need architecture? Does architecture need agile development? These two questions are debated time and again, frequently with great passion but quite often more polarized than open minded. In this edition of the column, the authors try to offer a more evenhanded perspective on this debate. Instead of posing and discussing culturally biased assumptions, they consider a more open and neutral question: what is the relationship between architecture and process?},
	Author = {Buschmann, Frank and Henney, Kevlin},
	Date-Added = {2019-05-21 18:29:36 +0100},
	Date-Modified = {2020-10-21 16:40:25 +0100},
	Doi = {10.1109/ms.2013.25},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {software architecture; agile development; development process},
	Number = {2},
	Pages = {80--82},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Architecture and Agility: Married, Divorced, or Just Good Friends?},
	Url = {http://dx.doi.org/10.1109/MS.2013.25},
	Volume = {30},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2013.25},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2013.25}}

@article{Brown:2010,
	Abstract = {Industry and government stakeholders continue to demand increasingly rapid innovation and the ability to adjust products and systems to emerging needs. Amongst all the enthusiasm for using Agile practices to meet these needs, the critical role of the underlying architecture is often overlooked.},
	Author = {Nanette Brown and Robert L. Nord and Ipek Ozkaya},
	Date-Added = {2019-05-21 18:28:21 +0100},
	Date-Modified = {2020-10-21 16:46:38 +0100},
	Journal = {ARCHITECTURE TODAy},
	Number = {6},
	Pages = {12-17},
	Title = {Enabling Agility Through Architecture},
	Volume = {3},
	Year = {2010}}

@article{Bosch:2010,
	Abstract = {Traditional process-centric software development has served software-intensive companies well for decades. During recent years, however, the trends of increased adoption of software product lines, software ecosystems and in particular global software engineering have lead to unmanageable complexity and unacceptable overhead. In this paper we present research performed at three global companies in which we studied the relation between large-scale and agile approaches to software development as well as current problems. In addition, by integrating the best practices adopted at the case study companies, we present an alternative approach: architecture-centric software engineering. This approach largely removes inter-team dependencies and provides much higher efficiency and productivity in global software development contexts.},
	Author = {Bosch, Jan and Bosch-Sijtsema, Petra},
	Bdsk-Color = {4211277567},
	Date-Added = {2019-05-21 18:26:32 +0100},
	Date-Modified = {2020-10-21 16:50:24 +0100},
	Doi = {10.1007/978-3-642-12442-6_15},
	Isbn = {9783642124426},
	Journal = {Agility Across Time and Space},
	Keywords = {Software Development; Software Product Line; Global Software Development; Coordination Cost; Agile Development},
	Pages = {217--233},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Coordination Between Global Agile Teams: From Process to Architecture},
	Url = {http://dx.doi.org/10.1007/978-3-642-12442-6_15},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-12442-6_15}}

@article{Booch:2010,
	Abstract = {In this paper, oxymoron is discussed. An oxymoron is not a bovine of meager intelligence, nor is it a chemical compound with two covalently bound oxygen atoms. Rather, an oxymoron is a figure of speech that combines two seemingly contradictory terms and unites them in an apparent paradox. This paper focuses specifically on the oxymoron of agile software architecture.},
	Author = {Booch, Grady},
	Date-Added = {2019-05-21 18:26:09 +0100},
	Date-Modified = {2020-10-21 16:41:06 +0100},
	Doi = {10.1109/ms.2010.117},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {software architecture; agile software development},
	Number = {5},
	Pages = {96--96},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {An Architectural Oxymoron},
	Url = {http://dx.doi.org/10.1109/MS.2010.117},
	Volume = {27},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2010.117},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2010.117}}

@article{Boehm:2010,
	Abstract = {Systems are becoming increasingly reliant on software due to needs for rapid fielding of ``70% capabilities,'' interoperability, net-centricity, and rapid adaptation to change. The latter need has led to increased interest in agile methods of software development, in which teams rely on shared tacit interpersonal knowledge rather than explicit documented knowledge. However, such systems often need to be scaled up to higher level of performance and assurance, requiring stronger architectural support. Several organizations have recently transformed themselves by developing successful combinations of agility and architecture that can scale to projects of up to 100 personnel. This chapter identifies a set of key principles for such architected agile solutions for software-reliant systems, provides guidance for how much architecting is enough, and illustrates the key principles with several case studies.},
	Author = {Boehm, Barry and Lane, Jo Ann and Koolmanojwong, Supannika and Turner, Richard},
	Date-Added = {2019-05-21 18:25:42 +0100},
	Date-Modified = {2020-10-21 16:51:50 +0100},
	Doi = {10.1007/978-3-642-12575-1_8},
	Isbn = {9783642125751},
	Journal = {Agile Software Development},
	Keywords = {Sweet Spot; Agile Method; Agile Development; Agile Practice; Agile Software Development},
	Pages = {165--184},
	Publisher = {Springer Berlin Heidelberg},
	Title = {Architected Agile Solutions for Software-Reliant Systems},
	Url = {http://dx.doi.org/10.1007/978-3-642-12575-1_8},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-12575-1_8}}

@article{Blair:2010,
	Abstract = {Responsibility-driven architecture (RDA) explores when, how, and who should make architectural decisions. The author's research attempts to answer these questions from an agile perspective and proposes a framework to improve architectural design. It has also provided an opportunity to reframe the role and relevancy of the architect in agile development.},
	Author = {Blair, S. and Watt, R. and Cull, T.},
	Date-Added = {2019-05-21 18:25:18 +0100},
	Date-Modified = {2020-10-21 16:41:58 +0100},
	Doi = {10.1109/ms.2010.52},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {agile; software architecture; economics; software engineering process},
	Number = {2},
	Pages = {26--32},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Responsibility-Driven Architecture},
	Url = {http://dx.doi.org/10.1109/MS.2010.52},
	Volume = {27},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2010.52},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2010.52}}

@article{Bellomo:2013,
	Abstract = {Agile projects are showing greater promise in rapid fielding as compared to waterfall projects. However, there is a lack of clarity regarding what really constitutes and contributes to success. We interviewed project teams with incremental development lifecycles, from five government and commercial organizations, to gain a better understanding of success and failure factors for rapid fielding on their projects. A key area we explored involves how Agile projects deal with the pressure to rapidly deliver high-value capability, while maintaining project speed (delivering functionality to the users quickly) and product stability (providing reliable and flexible product architecture). For example, due to schedule pressure we often see a pattern of high initial velocity for weeks or months, followed by a slowing of velocity due to stability issues. Business stakeholders find this to be disruptive as the rate of capability delivery slows while the team addresses stability problems. We found that experienced practitioners, when faced with these challenges, do not apply Agile practices alone. Instead they combine practices - Agile, architecture, or other - in creative ways to respond quickly to unanticipated stability problems. In this paper, we summarize the practices practitioners we interviewed from Agile projects found most valuable and provide an overarching scenario that provides insight into how and why these practices emerge.},
	Author = {Bellomo, Stephany and Nord, Robert L. and Ozkaya, Ipek},
	Date-Added = {2019-05-21 18:24:52 +0100},
	Date-Modified = {2020-10-24 20:47:27 +0100},
	Doi = {10.1109/icse.2013.6606648},
	Isbn = {9781467330732},
	Journal = {2013 35th International Conference on Software Engineering (ICSE)},
	Keywords = {agile software development; architecture; speed; stability; rapid fielding; software development practices},
	Pages = {982-991},
	Publisher = {IEEE},
	Title = {A study of enabling factors for rapid fielding combined practices to balance speed and stability},
	Url = {http://dx.doi.org/10.1109/ICSE.2013.6606648},
	Year = {2013},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ICSE.2013.6606648},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/icse.2013.6606648}}

@article{Babar:2009,
	Abstract = {Agile software development approaches have recently gained popularity as a mechanism for reducing cost and increasing ability to handle change in dynamic market conditions. However, there is also a significant concern about the role and importance of the issues related to the software architecture of a system being developed using agile approaches. There is to date little empirical evidence available on what software architecture related practices are followed by teams using agile approaches and the kinds of architectural challenges resulting from using agile approaches. This paper reports a case study aimed to empirically identify and understand the architectural practices and challenges of teams using agile approaches. The findings provide useful information about the researched issues and also highlight the areas that need to be focused on for integrating agile and architecture-centric approaches.},
	Author = {Babar, Muhammad Ali},
	Date-Added = {2019-05-21 18:24:17 +0100},
	Date-Modified = {2020-10-24 20:47:50 +0100},
	Doi = {10.1109/wicsa.2009.5290794},
	Isbn = {9781424449842},
	Journal = {2009 Joint Working IEEE/IFIP Conference on Software Architecture & European Conference on Software Architecture},
	Keywords = {Software architecture; agile approaches; empirical studies; qualitative research},
	Pages = {81-90},
	Publisher = {IEEE},
	Title = {An exploratory study of architectural practices and challenges in using agile software development approaches},
	Url = {http://dx.doi.org/10.1109/WICSA.2009.5290794},
	Year = {2009},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/WICSA.2009.5290794},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/wicsa.2009.5290794}}

@article{Abrahamsson:2010,
	Abstract = {Agile development has significantly impacted industrial software development practices. However, despite its wide popularity, there's an increasing perplexity about software architecture's role and importance in agile approaches. Advocates of architecture's vital role in achieving quality goals for large software-intensive systems doubt the scalability of any development approach that doesn't pay sufficient attention to architecture. This article talks about software architecture being relevant to the basis of aspects such as communication among team members, inputs to subsequent design decisions, documenting design assumptions, and evaluating design alternatives. In a large software organization, implementing agile approaches isn't a straightforward adoption problem. Most likely, it will take several years to shorten the feedback cycles to benefit from the adaptability and earlier value-creation opportunities. Failure is a natural part of process improvement.},
	Author = {Abrahamsson, P. and Babar, M.A. and Kruchten, P.},
	Date-Added = {2019-05-21 18:23:17 +0100},
	Date-Modified = {2020-10-21 16:42:47 +0100},
	Doi = {10.1109/ms.2010.36},
	Issn = {0740-7459},
	Journal = {IEEE Software},
	Keywords = {software architecture; agile development methods; software engineering},
	Number = {2},
	Pages = {16--22},
	Publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
	Title = {Agility and Architecture: Can They Coexist?},
	Url = {http://dx.doi.org/10.1109/MS.2010.36},
	Volume = {27},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/MS.2010.36},
	Bdsk-Url-2 = {http://dx.doi.org/10.1109/ms.2010.36}}
