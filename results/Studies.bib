%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Hannousse Abdelhakim at 2020-02-12 09:59:05 +0100 


%% Saved with string encoding Unicode (UTF-8) 



@article{Munir:2016,
	Abstract = {Open innovation (OI) means that innovation is fostered by using both external and internal influences in the innovation process. In software engineering (SE), OI has existed for decades, while we currently see a faster and broader move towards OI in SE. We therefore survey research on how OI takes place and contributes to innovation in SE. This study aims to synthesize the research knowledge on OI in the SE domain. We launched a systematic mapping study and conducted a thematic analysis of the results. Moreover, we analyzed the strength of the evidence in the light of a rigor and relevance assessment of the research. We identified 33 publications, divided into 9 themes related to OI. 17/33 studies fall in the high--rigor/high--relevance category, suggesting the results are highly industry relevant. The research indicates that start-ups have higher tendency to opt for OI compared to incumbents. The evidence also suggests that firms assimilating knowledge into their internal R{\&}D activities, have higher likelihood of gaining financial advantages. We concluded that OI should be adopted as a complementary approach to facilitate internal innovation and not to substitute it. Further research is advised on situated OI strategies and the interplay between OI and agile practices.},
	Author = {Munir, Hussan and Wnuk, Krzysztof and Runeson, Per},
	Date-Added = {2019-05-22 13:10:09 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1007/s10664-015-9380-x},
	Issn = {1573-7616},
	Journal = {Empirical Software Engineering},
	Number = {2},
	Pages = {684--723},
	Title = {Open innovation in software engineering: a systematic mapping study},
	Url = {https://doi.org/10.1007/s10664-015-9380-x},
	Volume = {21},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1007/s10664-015-9380-x}}

@article{Uddin:2017,
	Abstract = {Daily large number of bug reports are received in large open and close source bug tracking systems. Dealing with these reports manually utilizes time and resources which leads to delaying the resolution of important bugs. As an important process in software maintenance, bug triaging process carefully analyze these bug reports to determine, for example, whether the bugs are duplicate or unique, important or unimportant, and who will resolve them. Assigning bug reports based on their priority or importance may play an important role in enhancing the bug triaging process. The accurate and timely prioritization and hence resolution of these bug reports not only improves the quality of software maintenance task but also provides the basis to keep particular software alive. In the past decade, various studies have been conducted to prioritize bug reports using data mining techniques like classification, information retrieval and clustering that can overcome incorrect prioritization. Due to their popularity and importance, we survey the automated bug prioritization processes in a systematic way. In particular, this paper gives a small theoretical study for bug reports to motivate the necessity for work on bug prioritization. The existing work on bug prioritization and some possible problems in working with bug prioritization are summarized.},
	Author = {Uddin, Jamal and Ghazali, Rozaida and Deris, Mustafa Mat and Naseem, Rashid and Shah, Habib},
	Date-Added = {2019-05-22 13:08:46 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1007/s10462-016-9478-6},
	Issn = {1573-7462},
	Journal = {Artificial Intelligence Review},
	Number = {2},
	Pages = {145--180},
	Title = {A survey on bug prioritization},
	Url = {https://doi.org/10.1007/s10462-016-9478-6},
	Volume = {47},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1007/s10462-016-9478-6}}

@article{Yang:2016,
	Abstract = {Context
Combining software architecture and agile development has received significant attention in recent years. However, there exists no comprehensive overview of the state of research on the architecture-agility combination.
Objective
This work aims to analyze the combination of architecture and agile methods for the purpose of exploration and analysis with respect to architecting activities and approaches, agile methods and practices, costs, benefits, challenges, factors, tools, and lessons learned concerning the combination.
Method
A systematic mapping study (SMS) was conducted, covering the literature on the architecture-agility combination published between February 2001 and January 2014.
Results
Fifty-four studies were finally included in this SMS. Some of the highlights: (1) a significant difference exists in the proportion of various architecting activities, agile methods, and agile practices employed in the combination. (2) none of the architecting approaches has been widely used in the combination. (3) there is a lack of description and analysis regarding the costs and failure stories of the combination. (4) twenty challenges, twenty-nine factors, and twenty-five lessons learned were identified.
Conclusions
The results of this SMS help the software engineering community to reflect on the past thirteen years of research and practice on the architecture-agility combination with a number of implications.},
	Author = {Chen Yang and Peng Liang and Paris Avgeriou},
	Date-Added = {2019-05-22 13:03:48 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.jss.2015.09.028},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Software architecture, Agile development, Architecting approach},
	Pages = {157 - 184},
	Title = {A systematic mapping study on the combination of software architecture and agile development},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121215002125},
	Volume = {111},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121215002125},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2015.09.028}}

@article{Mariani:2017,
	Abstract = {Context: To find the best sequence of refactorings to be applied in a software artifact is an optimization problem that can be solved using search techniques, in the field called Search-Based Refactoring (SBR). Over the last years, the field has gained importance, and many SBR approaches have appeared, arousing research interest. Objective: The objective of this paper is to provide an overview of existing SBR approaches, by presenting their common characteristics, and to identify trends and research opportunities. Method: A systematic review was conducted following a plan that includes the definition of research questions, selection criteria, a search string, and selection of search engines. 71 primary studies were selected, published in the last sixteen years. They were classified considering dimensions related to the main SBR elements, such as addressed artifacts, encoding, search technique, used metrics, available tools, and conducted evaluation. Results: Some results show that code is the most addressed artifact, and evolutionary algorithms are the most employed search technique. Furthermore, most times, the generated solution is a sequence of refactorings. In this respect, the refactorings considered are usually the ones of the Fowler's Catalog. Some trends and opportunities for future research include the use of models as artifacts, the use of many objectives, the study of the bad smells effect, and the use of hyper-heuristics. Conclusions: We have found many SBR approaches, most of them published recently. The approaches are presented, analyzed, and grouped following a classification scheme. The paper contributes to the SBR field as we identify a range of possibilities that serve as a basis to motivate future researches.},
	Author = {Thain{\'a} Mariani and Silvia Regina Vergilio},
	Date-Added = {2019-05-22 13:03:48 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.infsof.2016.11.009},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Search-based software engineering, Refactoring, Evolutionary algorithms},
	Pages = {14 - 34},
	Title = {A systematic review on search-based refactoring},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916303779},
	Volume = {83},
	Year = {2017},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916303779},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2016.11.009}}

@article{Guinea:2016,
	Abstract = {Context: Software engineering for ubiquitous systems has experienced an important and rapid growth, however the vast research corpus makes it difficult to obtain valuable information from it. Objective: To identify, evaluate, and synthesize research about the most relevant approaches addressing the different phases of the software development life cycle for ubiquitous systems. Method: We conducted a systematic literature review of papers presenting and evaluating approaches for the different phases of the software development life cycle for ubiquitous systems. Approaches were classified according to the phase of the development cycle they addressed, identifying their main concerns and limitations. Results: We identified 128 papers reporting 132 approaches addressing issues related to different phases of the software development cycle for ubiquitous systems. Most approaches have been aimed at addressing the implementation, evolution/maintenance, and feedback phases, while others phases such as testing need more attention from researchers. Conclusion: We recommend to follow existing guidelines when conducting case studies to make the studies more reproducible and closer to real life cases. While some phases of the development cycle have been extensively explored, there is still room for research in other phases, toward a more agile and integrated cycle, from requirements to testing and feedback.},
	Author = {Alejandro S{\'a}nchez Guinea and Gr{\'e}gory Nain and Yves Le Traon},
	Date-Added = {2019-05-22 13:03:48 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.jss.2016.05.024},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Empirical software engineering, Evidence-based software engineering, Systematic review, Research synthesis, Software development cycle, Ubiquitous systems, Development methods, Pervasive systems},
	Pages = {251 - 276},
	Title = {A systematic review on the engineering of software for ubiquitous systems},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121216300553},
	Volume = {118},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121216300553},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2016.05.024}}

@article{Goulao:2016,
	Abstract = {Model-driven engineering (MDE) is believed to have a significant impact in software quality. However, researchers and practitioners may have a hard time locating consolidated evidence on this impact, as the available information is scattered in several different publications. Our goal is to aggregate consolidated findings on quality in MDE, facilitating the work of researchers and practitioners in learning about the coverage and main findings of existing work as well as identifying relatively unexplored niches of research that need further attention. We performed a tertiary study on quality in MDE, in order to gain a better understanding of its most prominent findings and existing challenges, as reported in the literature. We identified 22 systematic literature reviews and mapping studies and the most relevant quality attributes addressed by each of those studies, in the context of MDE. Maintainability is clearly the most often studied and reported quality attribute impacted by MDE. Eighty out of 83 research questions in the selected secondary studies have a structure that is more often associated with mapping existing research than with answering more concrete research questions (e.g., comparing two alternative MDE approaches with respect to their impact on a specific quality attribute). We briefly outline the main contributions of each of the selected literature reviews. In the collected studies, we observed a broad coverage of software product quality, although frequently accompanied by notes on how much more empirical research is needed to further validate existing claims. Relatively, little attention seems to be devoted to the impact of MDE on the quality in use of products developed using MDE.},
	Author = {Goul{\~a}o, Miguel and Amaral, Vasco and Mernik, Marjan},
	Date-Added = {2019-05-14 17:25:48 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1007/s11219-016-9324-8},
	Issn = {1573-1367},
	Journal = {Software Quality Journal},
	Number = {3},
	Pages = {601--633},
	Title = {Quality in model-driven engineering: a tertiary study},
	Url = {https://doi.org/10.1007/s11219-016-9324-8},
	Volume = {24},
	Year = {2016},
	Bdsk-Url-1 = {https://doi.org/10.1007/s11219-016-9324-8}}

@article{Gurbuz:2018,
	Abstract = {Testing safety-critical systems is crucial since a failure or malfunction may result in death or serious injuries to people, equipment, or environment. An important challenge in testing is the derivation of test cases that can identify the potential faults. Model-based testing adopts models of a system under test and/or its environment to derive test artifacts. This paper aims to provide a systematic mapping study to identify, analyze, and describe the state-of-the-art advances in model-based testing for software safety. The systematic mapping study is conducted as a multi-phase study selection process using the published literature in major software engineering journals and conference proceedings. We reviewed 751 papers and 36 of them have been selected as primary studies to answer our research questions. Based on the analysis of the data extraction process, we discuss the primary trends and approaches and present the identified obstacles. This study shows that model-based testing can provide important benefits for software safety testing. Several solution directions have been identified, but further research is critical for reliable model-based testing approach for safety.},
	Author = {Gurbuz, Havva Gulay and Tekinerdogan, Bedir},
	Date-Added = {2019-05-14 17:24:16 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1007/s11219-017-9386-2},
	Issn = {1573-1367},
	Journal = {Software Quality Journal},
	Number = {4},
	Pages = {1327--1372},
	Title = {Model-based testing for software safety: a systematic mapping study},
	Url = {https://doi.org/10.1007/s11219-017-9386-2},
	Volume = {26},
	Year = {2018},
	Bdsk-Url-1 = {https://doi.org/10.1007/s11219-017-9386-2}}

@article{Galindo:2019,
	Abstract = {Feature models have been used since the 90s to describe software product lines as a way of reusing common parts in a family of software systems. In 2010, a systematic literature review was published summarizing the advances and settling the basis of the area of automated analysis of feature models (AAFM). From then on, different studies have applied the AAFM in different domains. In this paper, we provide an overview of the evolution of this field since 2010 by performing a systematic mapping study considering 423 primary sources. We found six different variability facets where the AAFM is being applied that define the tendencies: product configuration and derivation; testing and evolution; reverse engineering; multi-model variability-analysis; variability modelling and variability-intensive systems. We also confirmed that there is a lack of industrial evidence in most of the cases. Finally, we present where and when the papers have been published and who are the authors and institutions that are contributing to the field. We observed that the maturity is proven by the increment in the number of journals published along the years as well as the diversity of conferences and workshops where papers are published. We also suggest some synergies with other areas such as cloud or mobile computing among others that can motivate further research in the future.},
	Author = {Galindo, Jos{\'e} A. and Benavides, David and Trinidad, Pablo and Guti{\'e}rrez-Fern{\'a}ndez, Antonio-Manuel and Ruiz-Cort{\'e}s, Antonio},
	Date-Added = {2019-05-14 17:18:56 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1007/s00607-018-0646-1},
	Issn = {1436-5057},
	Journal = {Computing},
	Number = {5},
	Pages = {387--433},
	Title = {Automated analysis of feature models: Quo vadis?},
	Url = {https://doi.org/10.1007/s00607-018-0646-1},
	Volume = {101},
	Year = {2019},
	Bdsk-Url-1 = {https://doi.org/10.1007/s00607-018-0646-1}}

@article{Dermeval:2016,
	Acmid = {3004677},
	Address = {Secaucus, NJ, USA},
	Author = {Dermeval, Diego and Vilela, J{\'e}ssyka and Bittencourt, Ig Ibert and Castro, Jaelson and Isotani, Seiji and Brito, Patrick and Silva, Alan},
	Date-Added = {2019-05-14 17:15:30 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1007/s00766-015-0222-6},
	Issn = {0947-3602},
	Journal = {Requirements Engineering},
	Keywords = {Ontologies, Requirements engineering, Systematic literature review},
	Number = {4},
	Numpages = {33},
	Pages = {405--437},
	Publisher = {Springer-Verlag New York, Inc.},
	Title = {Applications of Ontologies in Requirements Engineering: A Systematic Review of the Literature},
	Url = {http://dx.doi.org/10.1007/s00766-015-0222-6},
	Volume = {21},
	Year = {2016},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s00766-015-0222-6}}

@article{Ali:2018,
	Abstract = {Context
The trust in systematic literature reviews (SLRs) to provide credible recommendations is critical for establishing evidence-based software engineering (EBSE) practice. The reliability of SLR as a method is not a given and largely depends on the rigor of the attempt to identify, appraise and aggregate evidence. Previous research, by comparing SLRs on the same topic, has identified search as one of the reasons for discrepancies in the included primary studies. This affects the reliability of an SLR, as the papers identified and included in it are likely to influence its conclusions.
Objective
We aim to propose a comprehensive evaluation checklist to assess the reliability of an automated-search strategy used in an SLR.
Method
Using a literature review, we identified guidelines for designing and reporting automated-search as a primary search strategy. Using the aggregated design, reporting and evaluation guidelines, we formulated a comprehensive evaluation checklist. The value of this checklist was demonstrated by assessing the reliability of search in 27 recent SLRs.
Results
Using the proposed evaluation checklist, several additional issues (not captured by the current evaluation checklist) related to the reliability of search in recent SLRs were identified. These issues severely limit the coverage of literature by the search and also the possibility to replicate it.
Conclusion
Instead of solely relying on expensive replications to assess the reliability of SLRs, this work provides means to objectively assess the likely reliability of a search-strategy used in an SLR. It highlights the often-assumed aspect of repeatability of search when using automated-search. Furthermore, by explicitly considering repeatability and consistency as sub-characteristics of a reliable search, it provides a more comprehensive evaluation checklist than the ones currently used in EBSE.},
	Author = {Nauman Bin Ali and Muhammad Usman},
	Date-Added = {2019-05-14 17:05:21 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.infsof.2018.02.002},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Secondary studies, Systematic literature reviews, Search strategies, Reliability, Credibility, Guidelines},
	Pages = {133 - 147},
	Title = {Reliability of search in systematic reviews: Towards a quality assessment framework for the automated-search strategy},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584917304263},
	Volume = {99},
	Year = {2018},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584917304263},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2018.02.002}}

@article{Neiva:2016,
	Abstract = {Context: Many researchers have argued that providing interoperability support only considering the format and meaning (i.e. syntax and semantic) of data exchange is not enough to achieve complete, effective and meaningful collaboration. Pragmatic interoperability has been highlighted as a key requirement to enhance collaboration. However, fulfilling this requirement is not a trivial task and there is a lack of works discussing solutions to achieve this level of interoperability. Objectives: The aim of this study is to present a systematic review and mapping of the literature in order to identify, analyse and classify the published solutions to achieve pragmatic interoperability. Method: To conduct a systematic review and mapping in accordance with the guidelines proposed in the evidence-based software engineering literature. Results: Our study identified 13 papers reporting pragmatic interoperability computational solutions. The first paper in our set of selected papers was published in 2004; the main strategies used to address pragmatic interoperability issues were service discovery, composition and/or selection and ontologies. The application domain of the identified solutions was mainly e-business. In addition, most of the identified solutions were software architectures. Conclusion: Mature proposals addressing pragmatic interoperability are still rare in the literature. Although many works have discussed the importance of pragmatic interoperability, it is necessary that researchers report solutions that implement and evaluate pragmatic interoperability in order to make progress in this area.},
	Author = {Fr{\^a}ncila Weidt Neiva and Jos{\'e} Maria N. David and Regina Braga and Fernanda Campos},
	Date-Added = {2019-05-14 17:05:21 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.infsof.2015.12.013},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Pragmatic interoperability, Collaboration, Collaborative systems, Groupware, Interoperability},
	Pages = {137 - 150},
	Title = {Towards pragmatic interoperability to support collaboration: A systematic review and mapping of the literature},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584916000021},
	Volume = {72},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584916000021},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2015.12.013}}

@article{Ahmad:2018,
	Abstract = {Following a well-established track record of success in other domains such as manufacturing, Kanban is increasingly used to achieve continuous development and delivery of value in the software industry. However, while research on Kanban in software is growing, these articles are largely descriptive, and there is limited rigorous research on its application and with little cohesive building of cumulative knowledge. As a result, it is extremely difficult to determine the true value of Kanban in software engineering. This study investigates the scientific evidence to date regarding Kanban by conducting a systematic mapping of Kanban literature in software engineering between 2006 and 2016. The search strategy resulted in 382 studies, of which 23 were identified as primary papers relevant to this research. This study is unique as it compares the findings of these primary papers with insights from a review of 23 Kanban experience reports during the same period. This study makes four important contributions, (i) a state-of-the-art of Kanban research is provided, (ii) the reported benefits and challenges are identified in both the primary papers and experience reports, (iii) recommended practices from both the primary papers and experience reports are listed and (iv) opportunities for future Kanban research are identified.},
	Author = {Muhammad Ovais Ahmad and Denis Dennehy and Kieran Conboy and Markku Oivo},
	Date-Added = {2019-05-09 17:39:30 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.jss.2017.11.045},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Kanban, Lean, Software engineering, Software development},
	Pages = {96 - 113},
	Title = {Kanban in software engineering: A systematic mapping study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121217302820},
	Volume = {137},
	Year = {2018},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121217302820},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2017.11.045}}

@article{Khan:2019,
	Abstract = {Context
A number of Systematic Mapping Studies (SMSs) that cover Software Engineering (SE) are reported in literature. Tertiary studies synthesize the secondary studies to provide a holistic view of an area.
Objectives
We synthesize SMSs in SE to provide insights into existing SE areas and to investigate the trends and quality of SMSs.
Methodology
We use Systematic Literature Review protocol to analyze and map the SMSs in SE, till August 2017, to SE Body of Knowledge (SWEBOK).
Results
We analyze 210 SMSs and results show that: (1) Software design and construction are most active areas in SE; (2) Some areas lack SMSs, including mathematical foundations, software configuration management, and SE tools; (3) The quality of SMSs is improving with time; (4) SMSs in journals have higher quality than SMSs in conferences and are cited more often; (5) Low quality in SMSs can be attributed to a lack of quality assessment in SMSs and not reporting information about the primary studies.
Conclusion
There is a potential for more SMSs in some SE areas. A number of SMSs do not provide the required information for an SMS, which leads to a low quality score.},
	Author = {Muhammad Uzair Khan and Salman Sherin and Muhammad Zohaib Iqbal and Rubab Zahid},
	Date-Added = {2019-05-09 17:39:30 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.jss.2018.12.018},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Tertiary study, Systematic mapping study, Secondary study, Survey, Software engineering},
	Pages = {396 - 436},
	Title = {Landscaping systematic mapping studies in software engineering: A tertiary study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121218302784},
	Volume = {149},
	Year = {2019},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121218302784},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2018.12.018}}

@article{Alhammad:2018,
	Abstract = {The potential of gamification in education is based on the hypothesis that it supports and motivates students and can thus lead to enhanced learning processes and outcomes. Gamification in software engineering (SE) education is in its infancy. However, as SE educators we are particularly interested in understanding how gamification is pollinating our field and the extent to which the above claim is valid in our context. A systematic literature mapping has underscored the difficulty in fully corroborating the above claim because few empirical data are available so far. However, key trends and challenges have been identified. We found that the purpose of applying gamification in the SE field is mostly directly related to improving student engagement and, to a lesser extent, to improving student knowledge, although other targets are the application of SE best practices and socialization. We have also discussed insightful issues regarding the implementation cost of gamification, patterns in the most often used gamification elements, and the SE processes and teaching activities addressed. Of the identified challenges, we should highlight the complexity of deciding which gamification approach to follow, the lack of information for choosing gamification elements and the need to control the impact of gamification.},
	Author = {Manal M. Alhammad and Ana M. Moreno},
	Date-Added = {2019-05-09 10:51:29 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.jss.2018.03.065},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Gamification, Software engineering, Education, Systematic mapping},
	Pages = {131 - 150},
	Title = {Gamification in software engineering education: A systematic mapping},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121218300645},
	Volume = {141},
	Year = {2018},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121218300645},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2018.03.065}}

@article{Petersen:2015,
	Abstract = {Context
Systematic mapping studies are used to structure a research area, while systematic reviews are focused on gathering and synthesizing evidence. The most recent guidelines for systematic mapping are from 2008. Since that time, many suggestions have been made of how to improve systematic literature reviews (SLRs). There is a need to evaluate how researchers conduct the process of systematic mapping and identify how the guidelines should be updated based on the lessons learned from the existing systematic maps and SLR guidelines.
Objective
To identify how the systematic mapping process is conducted (including search, study selection, analysis and presentation of data, etc.); to identify improvement potentials in conducting the systematic mapping process and updating the guidelines accordingly.
Method
We conducted a systematic mapping study of systematic maps, considering some practices of systematic review guidelines as well (in particular in relation to defining the search and to conduct a quality assessment).
Results
In a large number of studies multiple guidelines are used and combined, which leads to different ways in conducting mapping studies. The reason for combining guidelines was that they differed in the recommendations given.
Conclusion
The most frequently followed guidelines are not sufficient alone. Hence, there was a need to provide an update of how to conduct systematic mapping studies. New guidelines have been proposed consolidating existing findings.},
	Author = {Kai Petersen and Sairam Vakkalanka and Ludwik Kuzniarz},
	Date-Added = {2019-05-09 10:51:29 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.infsof.2015.03.007},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Systematic mapping studies, Software engineering, Guidelines},
	Pages = {1 - 18},
	Title = {Guidelines for conducting systematic mapping studies in software engineering: An update},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584915000646},
	Volume = {64},
	Year = {2015},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584915000646},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2015.03.007}}

@article{Alves:2016,
	Abstract = {Context
The technical debt metaphor describes the effect of immature artifacts on software maintenance that bring a short-term benefit to the project in terms of increased productivity and lower cost, but that may have to be paid off with interest later. Much research has been performed to propose mechanisms to identify debt and decide the most appropriate moment to pay it off. It is important to investigate the current state of the art in order to provide both researchers and practitioners with information that enables further research activities as well as technical debt management in practice.
Objective
This paper has the following goals: to characterize the types of technical debt, identify indicators that can be used to find technical debt, identify management strategies, understand the maturity level of each proposal, and identify what visualization techniques have been proposed to support technical debt identification and management activities.
Method
A systematic mapping study was performed based on a set of three research questions. In total, 100 studies, dated from 2010 to 2014, were evaluated.
Results
We proposed an initial taxonomy of technical debt types, created a list of indicators that have been proposed to identify technical debt, identified the existing management strategies, and analyzed the current state of art on technical debt, identifying topics where new research efforts can be invested.
Conclusion
The results of this mapping study can help to identify points that still require further investigation in technical debt research.},
	Author = {Nicolli S.R. Alves and Thiago S. Mendes and Manoel G. de Mendon{\c c}a and Rodrigo O. Sp{\'\i}nola and Forrest Shull and Carolyn Seaman},
	Date-Added = {2019-05-09 10:51:29 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.infsof.2015.10.008},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Technical debt, Software maintenance, Software engineering, Systematic mapping},
	Pages = {100 - 121},
	Title = {Identification and management of technical debt: A systematic mapping study},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584915001743},
	Volume = {70},
	Year = {2016},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584915001743},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2015.10.008}}

@article{Santos:2018,
	Abstract = {Context: Code smell is a term commonly used to describe potential problems in the design of software. The concept is well accepted by the software engineering community. However, some studies have presented divergent findings about the usefulness of the smell concept as a tool to support software development tasks. The reasons of these divergences have not been considered because the studies are presented independently. Objective: To synthesize current knowledge related to the usefulness of the smell concept. We focused on empirical studies investigating how smells impact the software development, the code smell effect. Method: A systematic review about the smell effect is carried out. We grouped the primary studies findings in a thematic map. Result: The smell concept does not support the evaluation of quality design in practice activities of software development. There is no strong evidence correlating smells and some important software development attributes, such as effort in maintenance. Moreover, the studies point out that human agreement on smell detection is low. Conclusion: In order to improve analysis on the subject, the area needs to better outline: (i) factors affecting human evaluation of smells; and (ii) a classification of types of smells, grouping them according to relevant characteristics.},
	Author = {Jos{\'e} Amancio M. Santos and Jo{\~a}o B. Rocha-Junior and Luciana Carla Lins Prates and Rogeres Santos do Nascimento and Mydi{\~a} Falc{\~a}o Freitas and Manoel Gomes de Mendon{\c c}a},
	Date-Added = {2019-05-07 18:51:28 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.jss.2018.07.035},
	Issn = {0164-1212},
	Journal = {Journal of Systems and Software},
	Keywords = {Code smell, Systematic review, Thematic synthesis},
	Pages = {450 - 477},
	Title = {A systematic review on the code smell effect},
	Url = {http://www.sciencedirect.com/science/article/pii/S0164121218301444},
	Volume = {144},
	Year = {2018},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0164121218301444},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jss.2018.07.035}}

@article{Rahman:2019,
	Abstract = {Context: Infrastructure as code (IaC) is the practice to automatically configure system dependencies and to provision local and remote instances. Practitioners consider IaC as a fundamental pillar to implement DevOps practices, which helps them to rapidly deliver software and services to end-users. Information technology (IT) organizations, such as GitHub, Mozilla, Facebook, Google and Netflix have adopted IaC. A systematic mapping study on existing IaC research can help researchers to identify potential research areas related to IaC, for example defects and security flaws that may occur in IaC scripts. Objective: The objective of this paper is to help researchers identify research areas related to infrastructure as code (IaC) by conducting a systematic mapping study of IaC-related research. Method: We conduct our research study by searching five scholar databases. We collect a set of 31,498 publications by using seven search strings. By systematically applying inclusion and exclusion criteria, which includes removing duplicates and removing non-English and non peer-reviewed publications, we identify 32 publications related to IaC. We identify topics addressed in these publications by applying qualitative analysis. Results: We identify four topics studied in IaC-related publications: (i) framework/tool for infrastructure as code; (ii) adoption of infrastructure as code; (iii) empirical study related to infrastructure as code; and (iv) testing in infrastructure as code. According to our analysis, 50.0% of the studied 32 publications propose a framework or tool to implement the practice of IaC or extend the functionality of an existing IaC tool. Conclusion: Our findings suggest that framework or tools is a well-studied topic in IaC research. As defects and security flaws can have serious consequences for the deployment and development environments in DevOps, we observe the need for research studies that will study defects and security flaws for IaC.},
	Author = {Akond Rahman and Rezvan Mahdavi-Hezaveh and Laurie Williams},
	Date-Added = {2019-05-06 17:13:12 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1016/j.infsof.2018.12.004},
	Issn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Devops, Configuration as code, Configuration script, Continuous deployment, Infrastructure as code, Software engineering, Systematic mapping study},
	Pages = {65 - 77},
	Title = {A systematic mapping study of infrastructure as code research},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584918302507},
	Volume = {108},
	Year = {2019},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584918302507},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2018.12.004}}

@article{Bernardino:2017,
	Author = {M. {Bernardino} and E. M. {Rodrigues} and A. F. {Zorzo} and L. {Marchezan}},
	Date-Added = {2019-05-06 15:28:01 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1049/iet-sen.2015.0154},
	Issn = {1751-8806},
	Journal = {IET Software},
	Keywords = {program testing;software engineering;systematic mapping;model-based testing;MBT process;software modelling;software development},
	Number = {4},
	Pages = {141-155},
	Title = {Systematic mapping study on MBT: tools and models},
	Volume = {11},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1049/iet-sen.2015.0154}}

@article{Shahin:2017,
	Abstract = {Continuous practices, i.e., continuous integration, delivery, and deployment, are the software development industry practices that enable organizations to frequently and reliably release new features and products. With the increasing interest in the literature on continuous practices, it is important to systematically review and synthesize the approaches, tools, challenges, and practices reported for adopting and implementing continuous practices. This paper aimed at systematically reviewing the state of the art of continuous practices to classify approaches and tools, identify challenges and practices in this regard, and identify the gaps for future research. We used the systematic literature review method for reviewing the peer-reviewed papers on continuous practices published between 2004 and June 1, 2016. We applied the thematic analysis method for analyzing the data extracted from reviewing 69 papers selected using predefined criteria. We have identified 30 approaches and associated tools, which facilitate the implementation of continuous practices in the following ways: (1) reducing build and test time in continuous integration (CI); (2) increasing visibility and awareness on build and test results in CI; (3) supporting (semi-) automated continuous testing; (4) detecting violations, flaws, and faults in CI; (5) addressing security and scalability issues in deployment pipeline; and (6) improving dependability and reliability of deployment process. We have also determined a list of critical factors, such as testing (effort and time), team awareness and transparency, good design principles, customer, highly skilled and motivated team, application domain, and appropriate infrastructure that should be carefully considered when introducing continuous practices in a given organization. The majority of the reviewed papers were validation (34.7%) and evaluation (36.2%) research types. This paper also reveals that continuous practices have been successfully applied to both greenfield and maintenance projects. Continuous practices have become an important area of software engineering research and practice. While the reported approaches, tools, and practices are addressing a wide range of challenges, there are several challenges and gaps, which require future research work for improving the capturing and reporting of contextual information in the studies reporting different aspects of continuous practices; gaining a deep understanding of how software-intensive systems should be (re-) architected to support continuous practices; and addressing the lack of knowledge and tools for engineering processes of designing and running secure deployment pipelines.},
	Author = {M. Shahin and M. Ali Babar and L. Zhu},
	Date-Added = {2019-05-06 09:46:19 +0100},
	Date-Modified = {2020-02-12 09:58:44 +0100},
	Doi = {10.1109/ACCESS.2017.2685629},
	Issn = {2169-3536},
	Journal = {IEEE Access},
	Keywords = {program testing;software fault tolerance;software houses;software maintenance;software engineering;software-intensive systems;maintenance projects;greenfield projects;design principles;transparency;team awareness;critical factors;deployment process dependability improvement;deployment process reliability improvement;scalability issues;security issues;fault detection;flaw detection;violation detection;semiautomated continuous testing;CI;test time reduction;build time reduction;thematic analysis method;continuous practices;systematic literature review method;software development industry practices;software deployment;software delivery;continuous integration;Software;Organizations;Software engineering;Systematics;Bibliographies;Testing;Production;Continuous integration;continuous delivery;continuous deployment;continuous software engineering;systematic literature review;empirical software engineering},
	Pages = {3909-3943},
	Title = {Continuous Integration, Delivery and Deployment: A Systematic Review on Approaches, Tools, Challenges and Practices},
	Volume = {5},
	Year = {2017},
	Bdsk-Url-1 = {https://doi.org/10.1109/ACCESS.2017.2685629}}
